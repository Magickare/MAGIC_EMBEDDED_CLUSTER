
FREERTOS-DMA-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005834  08005834  00006834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005894  08005894  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005894  08005894  00006894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005898  08005898  00006898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800589c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a7c  20000010  080058ac  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a8c  080058ac  00007a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d77  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f59  00000000  00000000  00019db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0001cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0a  00000000  00000000  0001dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d46  00000000  00000000  0001e8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012892  00000000  00000000  00021610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d27f5  00000000  00000000  00033ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  001066dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800581c 	.word	0x0800581c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800581c 	.word	0x0800581c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
void StartUartTask(void *argument);

int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    HAL_Init();
 8000504:	f000 fa48 	bl	8000998 <HAL_Init>
    SystemClock_Config();
 8000508:	f000 f838 	bl	800057c <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 800050c:	f000 f882 	bl	8000614 <MX_GPIO_Init>
    MX_DMA_Init();
 8000510:	f000 f89a 	bl	8000648 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8000514:	f000 f8c0 	bl	8000698 <MX_USART2_UART_Init>

    /* Initialize FreeRTOS */
    osKernelInitialize();
 8000518:	f002 fbde 	bl	8002cd8 <osKernelInitialize>

    /* Create UART task */
    uartTaskHandle = osThreadNew(StartUartTask, NULL, NULL);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <main+0x34>)
 8000522:	f002 fc23 	bl	8002d6c <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a03      	ldr	r2, [pc, #12]	@ (8000538 <main+0x38>)
 800052a:	6013      	str	r3, [r2, #0]

    /* Start scheduler */
    osKernelStart();
 800052c:	f002 fbf8 	bl	8002d20 <osKernelStart>

    while (1);  // Should never reach here
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <main+0x30>
 8000534:	0800053d 	.word	0x0800053d
 8000538:	20000134 	.word	0x20000134

0800053c <StartUartTask>:
}

/* UART Task for FreeRTOS */
void StartUartTask(void *argument) {
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    uint8_t txData[] = "Hello STM32 FreeRTOS DMA UART\r\n";
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <StartUartTask+0x38>)
 8000546:	f107 0408 	add.w	r4, r7, #8
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    while (1) {
        HAL_UART_Transmit_DMA(&huart2, txData, sizeof(txData) - 1);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	221f      	movs	r2, #31
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	@ (8000578 <StartUartTask+0x3c>)
 8000562:	f001 ff53 	bl	800240c <HAL_UART_Transmit_DMA>
        vTaskDelay(pdMS_TO_TICKS(1000));  // Non-blocking delay
 8000566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800056a:	f003 fc19 	bl	8003da0 <vTaskDelay>
        HAL_UART_Transmit_DMA(&huart2, txData, sizeof(txData) - 1);
 800056e:	bf00      	nop
 8000570:	e7f2      	b.n	8000558 <StartUartTask+0x1c>
 8000572:	bf00      	nop
 8000574:	08005834 	.word	0x08005834
 8000578:	2000002c 	.word	0x2000002c

0800057c <SystemClock_Config>:
    }
}

/* Clock Configuration */
void SystemClock_Config(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b092      	sub	sp, #72	@ 0x48
 8000580:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2234      	movs	r2, #52	@ 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 f90c 	bl	80057a8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059e:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80005a2:	f001 f881 	bl	80016a8 <HAL_PWREx_ControlVoltageScaling>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	2301      	movs	r3, #1
 80005ac:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ae:	2310      	movs	r3, #16
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLM = 16;
 80005ba:	2310      	movs	r3, #16
 80005bc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 336;
 80005be:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc2d 	bl	8001e30 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x64>
        Error_Handler();
 80005dc:	f000 f886 	bl	80006ec <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80005e0:	230f      	movs	r3, #15
 80005e2:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005f6:	463b      	mov	r3, r7
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f8ce 	bl	800179c <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x8e>
        Error_Handler();
 8000606:	f000 f871 	bl	80006ec <Error_Handler>
    }
}
 800060a:	bf00      	nop
 800060c:	3748      	adds	r7, #72	@ 0x48
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_GPIO_Init+0x30>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <MX_GPIO_Init+0x30>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_GPIO_Init+0x30>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <MX_DMA_Init>:

/* DMA Initialization */
static void MX_DMA_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_DMA_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	@ (8000694 <MX_DMA_Init+0x4c>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800065c:	6313      	str	r3, [r2, #48]	@ 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_DMA_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2010      	movs	r0, #16
 8000670:	f000 fadf 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000674:	2010      	movs	r0, #16
 8000676:	f000 faf8 	bl	8000c6a <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2011      	movs	r0, #17
 8000680:	f000 fad7 	bl	8000c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000684:	2011      	movs	r0, #17
 8000686:	f000 faf0 	bl	8000c6a <HAL_NVIC_EnableIRQ>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <MX_USART2_UART_Init>:

/* UART Initialization */
static void MX_USART2_UART_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	@ (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f001 fe4c 	bl	800236c <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
        Error_Handler();
 80006da:	f000 f807 	bl	80006ec <Error_Handler>
    }
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000002c 	.word	0x2000002c
 80006e8:	40004400 	.word	0x40004400

080006ec <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
    while (1);
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x4>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <HAL_MspInit+0x54>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <HAL_MspInit+0x54>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000708:	6453      	str	r3, [r2, #68]	@ 0x44
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <HAL_MspInit+0x54>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <HAL_MspInit+0x54>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <HAL_MspInit+0x54>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <HAL_MspInit+0x54>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	210f      	movs	r1, #15
 8000736:	f06f 0001 	mvn.w	r0, #1
 800073a:	f000 fa7a 	bl	8000c32 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	@ 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a48      	ldr	r2, [pc, #288]	@ (800088c <HAL_UART_MspInit+0x140>)
 800076a:	4293      	cmp	r3, r2
 800076c:	f040 8089 	bne.w	8000882 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <HAL_UART_MspInit+0x144>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a45      	ldr	r2, [pc, #276]	@ (8000890 <HAL_UART_MspInit+0x144>)
 800077a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <HAL_UART_MspInit+0x144>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <HAL_UART_MspInit+0x144>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000794:	4a3e      	ldr	r2, [pc, #248]	@ (8000890 <HAL_UART_MspInit+0x144>)
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	6313      	str	r3, [r2, #48]	@ 0x30
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <HAL_UART_MspInit+0x144>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007a8:	230c      	movs	r3, #12
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b8:	2307      	movs	r3, #7
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4834      	ldr	r0, [pc, #208]	@ (8000894 <HAL_UART_MspInit+0x148>)
 80007c4:	f000 fddc 	bl	8001380 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80007c8:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007ca:	4a34      	ldr	r2, [pc, #208]	@ (800089c <HAL_UART_MspInit+0x150>)
 80007cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80007ce:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80007d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007f0:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000808:	4823      	ldr	r0, [pc, #140]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 800080a:	f000 fa49 	bl	8000ca0 <HAL_DMA_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000814:	f7ff ff6a 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a1f      	ldr	r2, [pc, #124]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 800081c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800081e:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <HAL_UART_MspInit+0x14c>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <HAL_UART_MspInit+0x158>)
 8000828:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800082c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000830:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000834:	2240      	movs	r2, #64	@ 0x40
 8000836:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000840:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000844:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000858:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 8000868:	f000 fa1a 	bl	8000ca0 <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000872:	f7ff ff3b 	bl	80006ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800087a:	639a      	str	r2, [r3, #56]	@ 0x38
 800087c:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_UART_MspInit+0x154>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	@ 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40004400 	.word	0x40004400
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	20000074 	.word	0x20000074
 800089c:	40026088 	.word	0x40026088
 80008a0:	200000d4 	.word	0x200000d4
 80008a4:	400260a0 	.word	0x400260a0

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <NMI_Handler+0x4>

080008b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <UsageFault_Handler+0x4>

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e2:	f000 f8ab 	bl	8000a3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008e6:	f003 fedf 	bl	80046a8 <xTaskGetSchedulerState>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d001      	beq.n	80008f4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008f0:	f004 fcda 	bl	80052a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <DMA1_Stream5_IRQHandler+0x10>)
 80008fe:	f000 fad5 	bl	8000eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000074 	.word	0x20000074

0800090c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <DMA1_Stream6_IRQHandler+0x10>)
 8000912:	f000 facb 	bl	8000eac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200000d4 	.word	0x200000d4

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800097c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000948:	f7ff ffea 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	@ (8000984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	@ (8000988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	@ (8000990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000972:	f004 ff21 	bl	80057b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fdc3 	bl	8000500 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000988:	0800589c 	.word	0x0800589c
  ldr r2, =_sbss
 800098c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000990:	20004a8c 	.word	0x20004a8c

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f92b 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f808 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff fe92 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f943 	bl	8000c86 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295
 8000a18:	f000 f90b 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000138 	.word	0x20000138

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000138 	.word	0x20000138

08000a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a98:	4013      	ands	r3, r2
 8000a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <__NVIC_GetPriorityGrouping+0x18>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	0a1b      	lsrs	r3, r3, #8
 8000ace:	f003 0307 	and.w	r3, r3, #7
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db0b      	blt.n	8000b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 021f 	and.w	r2, r3, #31
 8000af8:	4907      	ldr	r1, [pc, #28]	@ (8000b18 <__NVIC_EnableIRQ+0x38>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	2001      	movs	r0, #1
 8000b02:	fa00 f202 	lsl.w	r2, r0, r2
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000e100 	.word	0xe000e100

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	@ (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	@ (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	@ 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff29 	bl	8000a7c <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff3e 	bl	8000ac4 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff31 	bl	8000ae0 <__NVIC_EnableIRQ>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffa2 	bl	8000bd8 <SysTick_Config>
 8000c94:	4603      	mov	r3, r0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff feda 	bl	8000a64 <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e099      	b.n	8000df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0201 	bic.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cdc:	e00f      	b.n	8000cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cde:	f7ff fec1 	bl	8000a64 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d908      	bls.n	8000cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2220      	movs	r2, #32
 8000cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e078      	b.n	8000df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d1e8      	bne.n	8000cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4b38      	ldr	r3, [pc, #224]	@ (8000df8 <HAL_DMA_Init+0x158>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d107      	bne.n	8000d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	4313      	orrs	r3, r2
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f023 0307 	bic.w	r3, r3, #7
 8000d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d117      	bne.n	8000dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00e      	beq.n	8000dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 fa6f 	bl	8001288 <DMA_CheckFifoParam>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2240      	movs	r2, #64	@ 0x40
 8000db4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2201      	movs	r2, #1
 8000dba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e016      	b.n	8000df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fa26 	bl	800121c <DMA_CalcBaseAndBitshift>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dd8:	223f      	movs	r2, #63	@ 0x3f
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	f010803f 	.word	0xf010803f

08000dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d101      	bne.n	8000e22 <HAL_DMA_Start_IT+0x26>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e040      	b.n	8000ea4 <HAL_DMA_Start_IT+0xa8>
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2201      	movs	r2, #1
 8000e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d12f      	bne.n	8000e96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2200      	movs	r2, #0
 8000e42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	68f8      	ldr	r0, [r7, #12]
 8000e4c:	f000 f9b8 	bl	80011c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e54:	223f      	movs	r2, #63	@ 0x3f
 8000e56:	409a      	lsls	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f042 0216 	orr.w	r2, r2, #22
 8000e6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0208 	orr.w	r2, r2, #8
 8000e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0201 	orr.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e005      	b.n	8000ea2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000eb8:	4b8e      	ldr	r3, [pc, #568]	@ (80010f4 <HAL_DMA_IRQHandler+0x248>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a8e      	ldr	r2, [pc, #568]	@ (80010f8 <HAL_DMA_IRQHandler+0x24c>)
 8000ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec2:	0a9b      	lsrs	r3, r3, #10
 8000ec4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	409a      	lsls	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d01a      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0204 	bic.w	r2, r2, #4
 8000efe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f04:	2208      	movs	r2, #8
 8000f06:	409a      	lsls	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d012      	beq.n	8000f4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f46:	f043 0202 	orr.w	r2, r3, #2
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f52:	2204      	movs	r2, #4
 8000f54:	409a      	lsls	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f70:	2204      	movs	r2, #4
 8000f72:	409a      	lsls	r2, r3
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7c:	f043 0204 	orr.w	r2, r3, #4
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f88:	2210      	movs	r2, #16
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d043      	beq.n	800101c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d03c      	beq.n	800101c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	409a      	lsls	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d018      	beq.n	8000fee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d024      	beq.n	800101c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
 8000fda:	e01f      	b.n	800101c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01b      	beq.n	800101c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	4798      	blx	r3
 8000fec:	e016      	b.n	800101c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0208 	bic.w	r2, r2, #8
 800100a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001020:	2220      	movs	r2, #32
 8001022:	409a      	lsls	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 808f 	beq.w	800114c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 8087 	beq.w	800114c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001042:	2220      	movs	r2, #32
 8001044:	409a      	lsls	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b05      	cmp	r3, #5
 8001054:	d136      	bne.n	80010c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0216 	bic.w	r2, r2, #22
 8001064:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001074:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <HAL_DMA_IRQHandler+0x1da>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0208 	bic.w	r2, r2, #8
 8001094:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800109a:	223f      	movs	r2, #63	@ 0x3f
 800109c:	409a      	lsls	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d07e      	beq.n	80011b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	4798      	blx	r3
        }
        return;
 80010c2:	e079      	b.n	80011b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01d      	beq.n	800110e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d10d      	bne.n	80010fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d031      	beq.n	800114c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
 80010f0:	e02c      	b.n	800114c <HAL_DMA_IRQHandler+0x2a0>
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001100:	2b00      	cmp	r3, #0
 8001102:	d023      	beq.n	800114c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	4798      	blx	r3
 800110c:	e01e      	b.n	800114c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10f      	bne.n	800113c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0210 	bic.w	r2, r2, #16
 800112a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001150:	2b00      	cmp	r3, #0
 8001152:	d032      	beq.n	80011ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d022      	beq.n	80011a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2205      	movs	r2, #5
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3301      	adds	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	429a      	cmp	r2, r3
 8001182:	d307      	bcc.n	8001194 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f2      	bne.n	8001178 <HAL_DMA_IRQHandler+0x2cc>
 8001192:	e000      	b.n	8001196 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001194:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
 80011b6:	e000      	b.n	80011ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80011b8:	bf00      	nop
    }
  }
}
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80011dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b40      	cmp	r3, #64	@ 0x40
 80011ec:	d108      	bne.n	8001200 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80011fe:	e007      	b.n	8001210 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	60da      	str	r2, [r3, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3b10      	subs	r3, #16
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <DMA_CalcBaseAndBitshift+0x64>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <DMA_CalcBaseAndBitshift+0x68>)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d909      	bls.n	800125e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	1d1a      	adds	r2, r3, #4
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	659a      	str	r2, [r3, #88]	@ 0x58
 800125c:	e007      	b.n	800126e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001266:	f023 0303 	bic.w	r3, r3, #3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	aaaaaaab 	.word	0xaaaaaaab
 8001284:	08005884 	.word	0x08005884

08001288 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001298:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11f      	bne.n	80012e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d856      	bhi.n	8001356 <DMA_CheckFifoParam+0xce>
 80012a8:	a201      	add	r2, pc, #4	@ (adr r2, 80012b0 <DMA_CheckFifoParam+0x28>)
 80012aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ae:	bf00      	nop
 80012b0:	080012c1 	.word	0x080012c1
 80012b4:	080012d3 	.word	0x080012d3
 80012b8:	080012c1 	.word	0x080012c1
 80012bc:	08001357 	.word	0x08001357
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d046      	beq.n	800135a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012d0:	e043      	b.n	800135a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80012da:	d140      	bne.n	800135e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80012e0:	e03d      	b.n	800135e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012ea:	d121      	bne.n	8001330 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d837      	bhi.n	8001362 <DMA_CheckFifoParam+0xda>
 80012f2:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <DMA_CheckFifoParam+0x70>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001309 	.word	0x08001309
 80012fc:	0800130f 	.word	0x0800130f
 8001300:	08001309 	.word	0x08001309
 8001304:	08001321 	.word	0x08001321
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
      break;
 800130c:	e030      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d025      	beq.n	8001366 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800131e:	e022      	b.n	8001366 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001328:	d11f      	bne.n	800136a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800132e:	e01c      	b.n	800136a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d903      	bls.n	800133e <DMA_CheckFifoParam+0xb6>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d003      	beq.n	8001344 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800133c:	e018      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	73fb      	strb	r3, [r7, #15]
      break;
 8001342:	e015      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00e      	beq.n	800136e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	73fb      	strb	r3, [r7, #15]
      break;
 8001354:	e00b      	b.n	800136e <DMA_CheckFifoParam+0xe6>
      break;
 8001356:	bf00      	nop
 8001358:	e00a      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;
 800135a:	bf00      	nop
 800135c:	e008      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;
 800135e:	bf00      	nop
 8001360:	e006      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;
 8001362:	bf00      	nop
 8001364:	e004      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;
 8001366:	bf00      	nop
 8001368:	e002      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;   
 800136a:	bf00      	nop
 800136c:	e000      	b.n	8001370 <DMA_CheckFifoParam+0xe8>
      break;
 800136e:	bf00      	nop
    }
  } 
  
  return status; 
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	@ 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
 800139a:	e165      	b.n	8001668 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	f040 8154 	bne.w	8001662 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d005      	beq.n	80013d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d130      	bne.n	8001434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001408:	2201      	movs	r2, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	f003 0201 	and.w	r2, r3, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b03      	cmp	r3, #3
 800143e:	d017      	beq.n	8001470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d123      	bne.n	80014c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	08da      	lsrs	r2, r3, #3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3208      	adds	r2, #8
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	08da      	lsrs	r2, r3, #3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3208      	adds	r2, #8
 80014be:	69b9      	ldr	r1, [r7, #24]
 80014c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80ae 	beq.w	8001662 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_GPIO_Init+0x300>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a5c      	ldr	r2, [pc, #368]	@ (8001680 <HAL_GPIO_Init+0x300>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b5a      	ldr	r3, [pc, #360]	@ (8001680 <HAL_GPIO_Init+0x300>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001522:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <HAL_GPIO_Init+0x304>)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	@ (8001688 <HAL_GPIO_Init+0x308>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	@ (800168c <HAL_GPIO_Init+0x30c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	@ (8001690 <HAL_GPIO_Init+0x310>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	@ (8001694 <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	@ (8001698 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x20a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x206>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a49      	ldr	r2, [pc, #292]	@ (80016a0 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x202>
 800157e:	2306      	movs	r3, #6
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001582:	2307      	movs	r3, #7
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x21c>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x21c>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4935      	ldr	r1, [pc, #212]	@ (8001684 <HAL_GPIO_Init+0x304>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ba:	4b3a      	ldr	r3, [pc, #232]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015de:	4a31      	ldr	r2, [pc, #196]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001608:	4a26      	ldr	r2, [pc, #152]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165c:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_GPIO_Init+0x324>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae96 	bls.w	800139c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40013800 	.word	0x40013800
 8001688:	40020000 	.word	0x40020000
 800168c:	40020400 	.word	0x40020400
 8001690:	40020800 	.word	0x40020800
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021000 	.word	0x40021000
 800169c:	40021400 	.word	0x40021400
 80016a0:	40021800 	.word	0x40021800
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b35      	ldr	r3, [pc, #212]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	4a34      	ldr	r2, [pc, #208]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c4:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 030c 	and.w	r3, r3, #12
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d051      	beq.n	8001780 <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
 80016e2:	f7ff f9bf 	bl	8000a64 <HAL_GetTick>
 80016e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff f9bb 	bl	8000a64 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e044      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001714:	4920      	ldr	r1, [pc, #128]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <HAL_PWREx_ControlVoltageScaling+0xec>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172e:	f7ff f999 	bl	8000a64 <HAL_GetTick>
 8001732:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff f995 	bl	8000a64 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e01e      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_PWREx_ControlVoltageScaling+0xe8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f986 	bl	8000a64 <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 800175a:	e009      	b.n	8001770 <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 800175c:	f7ff f982 	bl	8000a64 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800176a:	d901      	bls.n	8001770 <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e00a      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001778:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800177c:	d1ee      	bne.n	800175c <HAL_PWREx_ControlVoltageScaling+0xb4>
 800177e:	e001      	b.n	8001784 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	42470060 	.word	0x42470060
 8001798:	40007000 	.word	0x40007000

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff f8ea 	bl	8000a64 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff f8e6 	bl	8000a64 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f855 	bl	80019d0 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	@ (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	@ (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f84a 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	0800586c 	.word	0x0800586c
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_RCC_GetHCLKFreq+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff0 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	0800587c 	.word	0x0800587c

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffdc 	bl	8001968 <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0b5b      	lsrs	r3, r3, #13
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	0800587c 	.word	0x0800587c

080019d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d4:	b0ae      	sub	sp, #184	@ 0xb8
 80019d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f6:	4bcb      	ldr	r3, [pc, #812]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	f200 8206 	bhi.w	8001e10 <HAL_RCC_GetSysClockFreq+0x440>
 8001a04:	a201      	add	r2, pc, #4	@ (adr r2, 8001a0c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a41 	.word	0x08001a41
 8001a10:	08001e11 	.word	0x08001e11
 8001a14:	08001e11 	.word	0x08001e11
 8001a18:	08001e11 	.word	0x08001e11
 8001a1c:	08001a49 	.word	0x08001a49
 8001a20:	08001e11 	.word	0x08001e11
 8001a24:	08001e11 	.word	0x08001e11
 8001a28:	08001e11 	.word	0x08001e11
 8001a2c:	08001a51 	.word	0x08001a51
 8001a30:	08001e11 	.word	0x08001e11
 8001a34:	08001e11 	.word	0x08001e11
 8001a38:	08001e11 	.word	0x08001e11
 8001a3c:	08001c41 	.word	0x08001c41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a40:	4bb9      	ldr	r3, [pc, #740]	@ (8001d28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a46:	e1e7      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a48:	4bb8      	ldr	r3, [pc, #736]	@ (8001d2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a4e:	e1e3      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4bb4      	ldr	r3, [pc, #720]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5c:	4bb1      	ldr	r3, [pc, #708]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d071      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	4bae      	ldr	r3, [pc, #696]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a74:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a8e:	4622      	mov	r2, r4
 8001a90:	462b      	mov	r3, r5
 8001a92:	f04f 0000 	mov.w	r0, #0
 8001a96:	f04f 0100 	mov.w	r1, #0
 8001a9a:	0159      	lsls	r1, r3, #5
 8001a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa0:	0150      	lsls	r0, r2, #5
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	1a51      	subs	r1, r2, r1
 8001aaa:	6439      	str	r1, [r7, #64]	@ 0x40
 8001aac:	4629      	mov	r1, r5
 8001aae:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	018b      	lsls	r3, r1, #6
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aca:	4641      	mov	r1, r8
 8001acc:	018a      	lsls	r2, r1, #6
 8001ace:	4641      	mov	r1, r8
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ae8:	4649      	mov	r1, r9
 8001aea:	00cb      	lsls	r3, r1, #3
 8001aec:	4641      	mov	r1, r8
 8001aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001af2:	4641      	mov	r1, r8
 8001af4:	00ca      	lsls	r2, r1, #3
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	4622      	mov	r2, r4
 8001afe:	189b      	adds	r3, r3, r2
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b02:	462b      	mov	r3, r5
 8001b04:	460a      	mov	r2, r1
 8001b06:	eb42 0303 	adc.w	r3, r2, r3
 8001b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b18:	4629      	mov	r1, r5
 8001b1a:	024b      	lsls	r3, r1, #9
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b22:	4621      	mov	r1, r4
 8001b24:	024a      	lsls	r2, r1, #9
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b3c:	f7fe fb68 	bl	8000210 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b4a:	e067      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4c:	4b75      	ldr	r3, [pc, #468]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	099b      	lsrs	r3, r3, #6
 8001b52:	2200      	movs	r2, #0
 8001b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b66:	2300      	movs	r3, #0
 8001b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b6e:	4622      	mov	r2, r4
 8001b70:	462b      	mov	r3, r5
 8001b72:	f04f 0000 	mov.w	r0, #0
 8001b76:	f04f 0100 	mov.w	r1, #0
 8001b7a:	0159      	lsls	r1, r3, #5
 8001b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b80:	0150      	lsls	r0, r2, #5
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4621      	mov	r1, r4
 8001b88:	1a51      	subs	r1, r2, r1
 8001b8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ba0:	4649      	mov	r1, r9
 8001ba2:	018b      	lsls	r3, r1, #6
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001baa:	4641      	mov	r1, r8
 8001bac:	018a      	lsls	r2, r1, #6
 8001bae:	4641      	mov	r1, r8
 8001bb0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bb4:	4649      	mov	r1, r9
 8001bb6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bce:	4692      	mov	sl, r2
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	eb1a 0303 	adds.w	r3, sl, r3
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	462b      	mov	r3, r5
 8001bdc:	eb4b 0303 	adc.w	r3, fp, r3
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bee:	4629      	mov	r1, r5
 8001bf0:	028b      	lsls	r3, r1, #10
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf8:	4621      	mov	r1, r4
 8001bfa:	028a      	lsls	r2, r1, #10
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c04:	2200      	movs	r2, #0
 8001c06:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c08:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c0e:	f7fe faff 	bl	8000210 <__aeabi_uldivmod>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4613      	mov	r3, r2
 8001c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c1c:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	3301      	adds	r3, #1
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c3e:	e0eb      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c40:	4b38      	ldr	r3, [pc, #224]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c4c:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d06b      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c58:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	2200      	movs	r2, #0
 8001c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c74:	4622      	mov	r2, r4
 8001c76:	462b      	mov	r3, r5
 8001c78:	f04f 0000 	mov.w	r0, #0
 8001c7c:	f04f 0100 	mov.w	r1, #0
 8001c80:	0159      	lsls	r1, r3, #5
 8001c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c86:	0150      	lsls	r0, r2, #5
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	1a51      	subs	r1, r2, r1
 8001c90:	61b9      	str	r1, [r7, #24]
 8001c92:	4629      	mov	r1, r5
 8001c94:	eb63 0301 	sbc.w	r3, r3, r1
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ca6:	4659      	mov	r1, fp
 8001ca8:	018b      	lsls	r3, r1, #6
 8001caa:	4651      	mov	r1, sl
 8001cac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cb0:	4651      	mov	r1, sl
 8001cb2:	018a      	lsls	r2, r1, #6
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	ebb2 0801 	subs.w	r8, r2, r1
 8001cba:	4659      	mov	r1, fp
 8001cbc:	eb63 0901 	sbc.w	r9, r3, r1
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ccc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cd4:	4690      	mov	r8, r2
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	eb18 0303 	adds.w	r3, r8, r3
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	eb49 0303 	adc.w	r3, r9, r3
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	024b      	lsls	r3, r1, #9
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cfe:	4621      	mov	r1, r4
 8001d00:	024a      	lsls	r2, r1, #9
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d14:	f7fe fa7c 	bl	8000210 <__aeabi_uldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d22:	e065      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x420>
 8001d24:	40023800 	.word	0x40023800
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d30:	4b3d      	ldr	r3, [pc, #244]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	2200      	movs	r2, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d40:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d42:	2300      	movs	r3, #0
 8001d44:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001d4a:	4642      	mov	r2, r8
 8001d4c:	464b      	mov	r3, r9
 8001d4e:	f04f 0000 	mov.w	r0, #0
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	0159      	lsls	r1, r3, #5
 8001d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d5c:	0150      	lsls	r0, r2, #5
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4641      	mov	r1, r8
 8001d64:	1a51      	subs	r1, r2, r1
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	4649      	mov	r1, r9
 8001d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d7c:	4659      	mov	r1, fp
 8001d7e:	018b      	lsls	r3, r1, #6
 8001d80:	4651      	mov	r1, sl
 8001d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d86:	4651      	mov	r1, sl
 8001d88:	018a      	lsls	r2, r1, #6
 8001d8a:	4651      	mov	r1, sl
 8001d8c:	1a54      	subs	r4, r2, r1
 8001d8e:	4659      	mov	r1, fp
 8001d90:	eb63 0501 	sbc.w	r5, r3, r1
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	00eb      	lsls	r3, r5, #3
 8001d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da2:	00e2      	lsls	r2, r4, #3
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	4643      	mov	r3, r8
 8001daa:	18e3      	adds	r3, r4, r3
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	464b      	mov	r3, r9
 8001db0:	eb45 0303 	adc.w	r3, r5, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	028b      	lsls	r3, r1, #10
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dcc:	4621      	mov	r1, r4
 8001dce:	028a      	lsls	r2, r1, #10
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dd8:	2200      	movs	r2, #0
 8001dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ddc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001dde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001de2:	f7fe fa15 	bl	8000210 <__aeabi_uldivmod>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4613      	mov	r3, r2
 8001dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001df0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x458>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	0f1b      	lsrs	r3, r3, #28
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e0e:	e003      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	37b8      	adds	r7, #184	@ 0xb8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e26:	bf00      	nop
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	00f42400 	.word	0x00f42400

08001e30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e28d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8083 	beq.w	8001f56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e50:	4b94      	ldr	r3, [pc, #592]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d019      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e5c:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e68:	4b8e      	ldr	r3, [pc, #568]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e74:	d00c      	beq.n	8001e90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e76:	4b8b      	ldr	r3, [pc, #556]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d112      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b88      	ldr	r3, [pc, #544]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e90:	4b84      	ldr	r3, [pc, #528]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d05b      	beq.n	8001f54 <HAL_RCC_OscConfig+0x124>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d157      	bne.n	8001f54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e25a      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x90>
 8001eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	e01d      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xb4>
 8001eca:	4b76      	ldr	r3, [pc, #472]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a75      	ldr	r2, [pc, #468]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b73      	ldr	r3, [pc, #460]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a72      	ldr	r2, [pc, #456]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xcc>
 8001ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6e      	ldr	r2, [pc, #440]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe fdae 	bl	8000a64 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fdaa 	bl	8000a64 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e21f      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b61      	ldr	r3, [pc, #388]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0xdc>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fd9a 	bl	8000a64 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fd96 	bl	8000a64 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	@ 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e20b      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	4b57      	ldr	r3, [pc, #348]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x104>
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d06f      	beq.n	8002042 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f62:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f92:	4b44      	ldr	r3, [pc, #272]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1d3      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b34      	ldr	r3, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x278>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fd43 	bl	8000a64 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fd3f 	bl	8000a64 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1b4      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4925      	ldr	r1, [pc, #148]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_RCC_OscConfig+0x278>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe fd22 	bl	8000a64 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe fd1e 	bl	8000a64 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e193      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d036      	beq.n	80020bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d016      	beq.n	8002084 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7fe fd02 	bl	8000a64 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7fe fcfe 	bl	8000a64 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e173      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_OscConfig+0x274>)
 8002078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x234>
 8002082:	e01b      	b.n	80020bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002084:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_OscConfig+0x27c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7fe fceb 	bl	8000a64 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002090:	e00e      	b.n	80020b0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7fe fce7 	bl	8000a64 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d907      	bls.n	80020b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e15c      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80020a4:	40023800 	.word	0x40023800
 80020a8:	42470000 	.word	0x42470000
 80020ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	4b8a      	ldr	r3, [pc, #552]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ea      	bne.n	8002092 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8097 	beq.w	80021f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ce:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b7f      	ldr	r3, [pc, #508]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	4a7e      	ldr	r2, [pc, #504]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ea:	4b7c      	ldr	r3, [pc, #496]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b79      	ldr	r3, [pc, #484]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b76      	ldr	r3, [pc, #472]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a75      	ldr	r2, [pc, #468]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7fe fca7 	bl	8000a64 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7fe fca3 	bl	8000a64 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e118      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b6c      	ldr	r3, [pc, #432]	@ (80022e0 <HAL_RCC_OscConfig+0x4b0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x31e>
 8002140:	4b66      	ldr	r3, [pc, #408]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a65      	ldr	r2, [pc, #404]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
 800214c:	e01c      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x340>
 8002156:	4b61      	ldr	r3, [pc, #388]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	4a60      	ldr	r2, [pc, #384]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	@ 0x70
 8002162:	4b5e      	ldr	r3, [pc, #376]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002166:	4a5d      	ldr	r2, [pc, #372]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	@ 0x70
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0x358>
 8002170:	4b5a      	ldr	r3, [pc, #360]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	6713      	str	r3, [r2, #112]	@ 0x70
 800217c:	4b57      	ldr	r3, [pc, #348]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002180:	4a56      	ldr	r2, [pc, #344]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7fe fc68 	bl	8000a64 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe fc64 	bl	8000a64 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0d7      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ae:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ee      	beq.n	8002198 <HAL_RCC_OscConfig+0x368>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe fc52 	bl	8000a64 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c4:	f7fe fc4e 	bl	8000a64 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e0c1      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	4b40      	ldr	r3, [pc, #256]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ee      	bne.n	80021c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	4a3a      	ldr	r2, [pc, #232]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80ad 	beq.w	800235c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002202:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b08      	cmp	r3, #8
 800220c:	d060      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d145      	bne.n	80022a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b33      	ldr	r3, [pc, #204]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe fc22 	bl	8000a64 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7fe fc1e 	bl	8000a64 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e093      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002236:	4b29      	ldr	r3, [pc, #164]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69da      	ldr	r2, [r3, #28]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	019b      	lsls	r3, r3, #6
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	491b      	ldr	r1, [pc, #108]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b1b      	ldr	r3, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fbf3 	bl	8000a64 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7fe fbef 	bl	8000a64 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e064      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x452>
 80022a0:	e05c      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCC_OscConfig+0x4b4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fbdc 	bl	8000a64 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fbd8 	bl	8000a64 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04d      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_RCC_OscConfig+0x4ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x480>
 80022ce:	e045      	b.n	800235c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e040      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40007000 	.word	0x40007000
 80022e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <HAL_RCC_OscConfig+0x538>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d030      	beq.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d129      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d122      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800231e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002320:	4293      	cmp	r3, r2
 8002322:	d119      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232e:	085b      	lsrs	r3, r3, #1
 8002330:	3b01      	subs	r3, #1
 8002332:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d10f      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d107      	bne.n	8002358 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e042      	b.n	8002404 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe f9da 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	@ 0x24
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f9e9 	bl	8002788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	@ 0x30
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	d156      	bne.n	80024d4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_UART_Transmit_DMA+0x26>
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e04f      	b.n	80024d6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	88fa      	ldrh	r2, [r7, #6]
 8002440:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	@ 0x21
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245a:	4a21      	ldr	r2, [pc, #132]	@ (80024e0 <HAL_UART_Transmit_DMA+0xd4>)
 800245c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002462:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <HAL_UART_Transmit_DMA+0xd8>)
 8002464:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <HAL_UART_Transmit_DMA+0xdc>)
 800246c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	2200      	movs	r2, #0
 8002474:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	3304      	adds	r3, #4
 800248a:	461a      	mov	r2, r3
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f7fe fcb5 	bl	8000dfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800249a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	e853 3f00 	ldrex	r3, [r3]
 80024aa:	617b      	str	r3, [r7, #20]
   return(result);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80024be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6a39      	ldr	r1, [r7, #32]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e5      	bne.n	800249c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3730      	adds	r7, #48	@ 0x30
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	08002529 	.word	0x08002529
 80024e4:	080025c3 	.word	0x080025c3
 80024e8:	080025df 	.word	0x080025df

080024ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b090      	sub	sp, #64	@ 0x40
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d137      	bne.n	80025b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002546:	2200      	movs	r2, #0
 8002548:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800254a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3314      	adds	r3, #20
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	e853 3f00 	ldrex	r3, [r3]
 8002558:	623b      	str	r3, [r7, #32]
   return(result);
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800256a:	633a      	str	r2, [r7, #48]	@ 0x30
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002572:	e841 2300 	strex	r3, r2, [r1]
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e5      	bne.n	800254a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800257e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	60fb      	str	r3, [r7, #12]
   return(result);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
 8002596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	330c      	adds	r3, #12
 800259c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800259e:	61fa      	str	r2, [r7, #28]
 80025a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	69fa      	ldr	r2, [r7, #28]
 80025a6:	e841 2300 	strex	r3, r2, [r1]
 80025aa:	617b      	str	r3, [r7, #20]
   return(result);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1e5      	bne.n	800257e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025b2:	e002      	b.n	80025ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80025b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80025b6:	f7ff ff99 	bl	80024ec <HAL_UART_TxCpltCallback>
}
 80025ba:	bf00      	nop
 80025bc:	3740      	adds	r7, #64	@ 0x40
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff ff95 	bl	8002500 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025fa:	2b80      	cmp	r3, #128	@ 0x80
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b21      	cmp	r3, #33	@ 0x21
 8002610:	d108      	bne.n	8002624 <UART_DMAError+0x46>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800261e:	68b8      	ldr	r0, [r7, #8]
 8002620:	f000 f827 	bl	8002672 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	2b40      	cmp	r3, #64	@ 0x40
 8002630:	bf0c      	ite	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	2300      	movne	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b22      	cmp	r3, #34	@ 0x22
 8002644:	d108      	bne.n	8002658 <UART_DMAError+0x7a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f000 f835 	bl	80026c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	f043 0210 	orr.w	r2, r3, #16
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002664:	68b8      	ldr	r0, [r7, #8]
 8002666:	f7ff ff55 	bl	8002514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002672:	b480      	push	{r7}
 8002674:	b089      	sub	sp, #36	@ 0x24
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	60bb      	str	r3, [r7, #8]
   return(result);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	61ba      	str	r2, [r7, #24]
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	613b      	str	r3, [r7, #16]
   return(result);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e5      	bne.n	800267a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	@ 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b095      	sub	sp, #84	@ 0x54
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80026da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80026ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026f2:	e841 2300 	strex	r3, r2, [r1]
 80026f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e5      	bne.n	80026ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3314      	adds	r3, #20
 8002704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	61fb      	str	r3, [r7, #28]
   return(result);
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3314      	adds	r3, #20
 800271c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800271e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1e5      	bne.n	80026fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	2b01      	cmp	r3, #1
 8002738:	d119      	bne.n	800276e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	60bb      	str	r3, [r7, #8]
   return(result);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f023 0310 	bic.w	r3, r3, #16
 8002750:	647b      	str	r3, [r7, #68]	@ 0x44
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800275a:	61ba      	str	r2, [r7, #24]
 800275c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	e841 2300 	strex	r3, r2, [r1]
 8002766:	613b      	str	r3, [r7, #16]
   return(result);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1e5      	bne.n	800273a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2220      	movs	r2, #32
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800277c:	bf00      	nop
 800277e:	3754      	adds	r7, #84	@ 0x54
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b0c0      	sub	sp, #256	@ 0x100
 800278e:	af00      	add	r7, sp, #0
 8002790:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a4:	68d9      	ldr	r1, [r3, #12]
 80027a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	ea40 0301 	orr.w	r3, r0, r1
 80027b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	431a      	orrs	r2, r3
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027e0:	f021 010c 	bic.w	r1, r1, #12
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027ee:	430b      	orrs	r3, r1
 80027f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002802:	6999      	ldr	r1, [r3, #24]
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	ea40 0301 	orr.w	r3, r0, r1
 800280e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b8f      	ldr	r3, [pc, #572]	@ (8002a54 <UART_SetConfig+0x2cc>)
 8002818:	429a      	cmp	r2, r3
 800281a:	d005      	beq.n	8002828 <UART_SetConfig+0xa0>
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b8d      	ldr	r3, [pc, #564]	@ (8002a58 <UART_SetConfig+0x2d0>)
 8002824:	429a      	cmp	r2, r3
 8002826:	d104      	bne.n	8002832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002828:	f7ff f8be 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 800282c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002830:	e003      	b.n	800283a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002832:	f7ff f8a5 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 8002836:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800283a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002844:	f040 810c 	bne.w	8002a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800284c:	2200      	movs	r2, #0
 800284e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002852:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800285a:	4622      	mov	r2, r4
 800285c:	462b      	mov	r3, r5
 800285e:	1891      	adds	r1, r2, r2
 8002860:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002862:	415b      	adcs	r3, r3
 8002864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800286a:	4621      	mov	r1, r4
 800286c:	eb12 0801 	adds.w	r8, r2, r1
 8002870:	4629      	mov	r1, r5
 8002872:	eb43 0901 	adc.w	r9, r3, r1
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288a:	4690      	mov	r8, r2
 800288c:	4699      	mov	r9, r3
 800288e:	4623      	mov	r3, r4
 8002890:	eb18 0303 	adds.w	r3, r8, r3
 8002894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002898:	462b      	mov	r3, r5
 800289a:	eb49 0303 	adc.w	r3, r9, r3
 800289e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028b6:	460b      	mov	r3, r1
 80028b8:	18db      	adds	r3, r3, r3
 80028ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80028bc:	4613      	mov	r3, r2
 80028be:	eb42 0303 	adc.w	r3, r2, r3
 80028c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80028c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80028cc:	f7fd fca0 	bl	8000210 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4b61      	ldr	r3, [pc, #388]	@ (8002a5c <UART_SetConfig+0x2d4>)
 80028d6:	fba3 2302 	umull	r2, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	011c      	lsls	r4, r3, #4
 80028de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028f0:	4642      	mov	r2, r8
 80028f2:	464b      	mov	r3, r9
 80028f4:	1891      	adds	r1, r2, r2
 80028f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028f8:	415b      	adcs	r3, r3
 80028fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002900:	4641      	mov	r1, r8
 8002902:	eb12 0a01 	adds.w	sl, r2, r1
 8002906:	4649      	mov	r1, r9
 8002908:	eb43 0b01 	adc.w	fp, r3, r1
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800291c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002920:	4692      	mov	sl, r2
 8002922:	469b      	mov	fp, r3
 8002924:	4643      	mov	r3, r8
 8002926:	eb1a 0303 	adds.w	r3, sl, r3
 800292a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800292e:	464b      	mov	r3, r9
 8002930:	eb4b 0303 	adc.w	r3, fp, r3
 8002934:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002944:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800294c:	460b      	mov	r3, r1
 800294e:	18db      	adds	r3, r3, r3
 8002950:	643b      	str	r3, [r7, #64]	@ 0x40
 8002952:	4613      	mov	r3, r2
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	647b      	str	r3, [r7, #68]	@ 0x44
 800295a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800295e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002962:	f7fd fc55 	bl	8000210 <__aeabi_uldivmod>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4611      	mov	r1, r2
 800296c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <UART_SetConfig+0x2d4>)
 800296e:	fba3 2301 	umull	r2, r3, r3, r1
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2264      	movs	r2, #100	@ 0x64
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	1acb      	subs	r3, r1, r3
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002982:	4b36      	ldr	r3, [pc, #216]	@ (8002a5c <UART_SetConfig+0x2d4>)
 8002984:	fba3 2302 	umull	r2, r3, r3, r2
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002990:	441c      	add	r4, r3
 8002992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800299c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	1891      	adds	r1, r2, r2
 80029aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029ac:	415b      	adcs	r3, r3
 80029ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029b4:	4641      	mov	r1, r8
 80029b6:	1851      	adds	r1, r2, r1
 80029b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80029ba:	4649      	mov	r1, r9
 80029bc:	414b      	adcs	r3, r1
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80029cc:	4659      	mov	r1, fp
 80029ce:	00cb      	lsls	r3, r1, #3
 80029d0:	4651      	mov	r1, sl
 80029d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d6:	4651      	mov	r1, sl
 80029d8:	00ca      	lsls	r2, r1, #3
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	4642      	mov	r2, r8
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029e8:	464b      	mov	r3, r9
 80029ea:	460a      	mov	r2, r1
 80029ec:	eb42 0303 	adc.w	r3, r2, r3
 80029f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a08:	460b      	mov	r3, r1
 8002a0a:	18db      	adds	r3, r3, r3
 8002a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a0e:	4613      	mov	r3, r2
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a1e:	f7fd fbf7 	bl	8000210 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <UART_SetConfig+0x2d4>)
 8002a28:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2164      	movs	r1, #100	@ 0x64
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	3332      	adds	r3, #50	@ 0x32
 8002a3a:	4a08      	ldr	r2, [pc, #32]	@ (8002a5c <UART_SetConfig+0x2d4>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 0207 	and.w	r2, r3, #7
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4422      	add	r2, r4
 8002a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a50:	e106      	b.n	8002c60 <UART_SetConfig+0x4d8>
 8002a52:	bf00      	nop
 8002a54:	40011000 	.word	0x40011000
 8002a58:	40011400 	.word	0x40011400
 8002a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a72:	4642      	mov	r2, r8
 8002a74:	464b      	mov	r3, r9
 8002a76:	1891      	adds	r1, r2, r2
 8002a78:	6239      	str	r1, [r7, #32]
 8002a7a:	415b      	adcs	r3, r3
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a82:	4641      	mov	r1, r8
 8002a84:	1854      	adds	r4, r2, r1
 8002a86:	4649      	mov	r1, r9
 8002a88:	eb43 0501 	adc.w	r5, r3, r1
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	00eb      	lsls	r3, r5, #3
 8002a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9a:	00e2      	lsls	r2, r4, #3
 8002a9c:	4614      	mov	r4, r2
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	4643      	mov	r3, r8
 8002aa2:	18e3      	adds	r3, r4, r3
 8002aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	eb45 0303 	adc.w	r3, r5, r3
 8002aae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002abe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ace:	4629      	mov	r1, r5
 8002ad0:	008b      	lsls	r3, r1, #2
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad8:	4621      	mov	r1, r4
 8002ada:	008a      	lsls	r2, r1, #2
 8002adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ae0:	f7fd fb96 	bl	8000210 <__aeabi_uldivmod>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4b60      	ldr	r3, [pc, #384]	@ (8002c6c <UART_SetConfig+0x4e4>)
 8002aea:	fba3 2302 	umull	r2, r3, r3, r2
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	011c      	lsls	r4, r3, #4
 8002af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002afc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	1891      	adds	r1, r2, r2
 8002b0a:	61b9      	str	r1, [r7, #24]
 8002b0c:	415b      	adcs	r3, r3
 8002b0e:	61fb      	str	r3, [r7, #28]
 8002b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b14:	4641      	mov	r1, r8
 8002b16:	1851      	adds	r1, r2, r1
 8002b18:	6139      	str	r1, [r7, #16]
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	414b      	adcs	r3, r1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b2c:	4659      	mov	r1, fp
 8002b2e:	00cb      	lsls	r3, r1, #3
 8002b30:	4651      	mov	r1, sl
 8002b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b36:	4651      	mov	r1, sl
 8002b38:	00ca      	lsls	r2, r1, #3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4642      	mov	r2, r8
 8002b42:	189b      	adds	r3, r3, r2
 8002b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b48:	464b      	mov	r3, r9
 8002b4a:	460a      	mov	r2, r1
 8002b4c:	eb42 0303 	adc.w	r3, r2, r3
 8002b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	008b      	lsls	r3, r1, #2
 8002b70:	4641      	mov	r1, r8
 8002b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b76:	4641      	mov	r1, r8
 8002b78:	008a      	lsls	r2, r1, #2
 8002b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b7e:	f7fd fb47 	bl	8000210 <__aeabi_uldivmod>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <UART_SetConfig+0x4e4>)
 8002b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2264      	movs	r2, #100	@ 0x64
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	1acb      	subs	r3, r1, r3
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	3332      	adds	r3, #50	@ 0x32
 8002b9c:	4a33      	ldr	r2, [pc, #204]	@ (8002c6c <UART_SetConfig+0x4e4>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ba8:	441c      	add	r4, r3
 8002baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bae:	2200      	movs	r2, #0
 8002bb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bc8:	4641      	mov	r1, r8
 8002bca:	1851      	adds	r1, r2, r1
 8002bcc:	6039      	str	r1, [r7, #0]
 8002bce:	4649      	mov	r1, r9
 8002bd0:	414b      	adcs	r3, r1
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002be0:	4659      	mov	r1, fp
 8002be2:	00cb      	lsls	r3, r1, #3
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bea:	4651      	mov	r1, sl
 8002bec:	00ca      	lsls	r2, r1, #3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4642      	mov	r2, r8
 8002bf6:	189b      	adds	r3, r3, r2
 8002bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	eb42 0303 	adc.w	r3, r2, r3
 8002c02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c1c:	4649      	mov	r1, r9
 8002c1e:	008b      	lsls	r3, r1, #2
 8002c20:	4641      	mov	r1, r8
 8002c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c26:	4641      	mov	r1, r8
 8002c28:	008a      	lsls	r2, r1, #2
 8002c2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c2e:	f7fd faef 	bl	8000210 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <UART_SetConfig+0x4e4>)
 8002c38:	fba3 1302 	umull	r1, r3, r3, r2
 8002c3c:	095b      	lsrs	r3, r3, #5
 8002c3e:	2164      	movs	r1, #100	@ 0x64
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	3332      	adds	r3, #50	@ 0x32
 8002c4a:	4a08      	ldr	r2, [pc, #32]	@ (8002c6c <UART_SetConfig+0x4e4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4422      	add	r2, r4
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c66:	46bd      	mov	sp, r7
 8002c68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c6c:	51eb851f 	.word	0x51eb851f

08002c70 <__NVIC_SetPriority>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	6039      	str	r1, [r7, #0]
 8002c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	db0a      	blt.n	8002c9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	490c      	ldr	r1, [pc, #48]	@ (8002cbc <__NVIC_SetPriority+0x4c>)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	0112      	lsls	r2, r2, #4
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	440b      	add	r3, r1
 8002c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c98:	e00a      	b.n	8002cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4908      	ldr	r1, [pc, #32]	@ (8002cc0 <__NVIC_SetPriority+0x50>)
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3b04      	subs	r3, #4
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	761a      	strb	r2, [r3, #24]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f06f 0004 	mvn.w	r0, #4
 8002cce:	f7ff ffcf 	bl	8002c70 <__NVIC_SetPriority>
#endif
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cde:	f3ef 8305 	mrs	r3, IPSR
 8002ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ce4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002cea:	f06f 0305 	mvn.w	r3, #5
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	e00c      	b.n	8002d0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <osKernelInitialize+0x44>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <osKernelInitialize+0x44>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	e002      	b.n	8002d0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d0c:	687b      	ldr	r3, [r7, #4]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	2000013c 	.word	0x2000013c

08002d20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d26:	f3ef 8305 	mrs	r3, IPSR
 8002d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d32:	f06f 0305 	mvn.w	r3, #5
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	e010      	b.n	8002d5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <osKernelStart+0x48>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d109      	bne.n	8002d56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d42:	f7ff ffbf 	bl	8002cc4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <osKernelStart+0x48>)
 8002d48:	2202      	movs	r2, #2
 8002d4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d4c:	f001 f85e 	bl	8003e0c <vTaskStartScheduler>
      stat = osOK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	e002      	b.n	8002d5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000013c 	.word	0x2000013c

08002d6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d7c:	f3ef 8305 	mrs	r3, IPSR
 8002d80:	617b      	str	r3, [r7, #20]
  return(result);
 8002d82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d17e      	bne.n	8002e86 <osThreadNew+0x11a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d07b      	beq.n	8002e86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d8e:	2380      	movs	r3, #128	@ 0x80
 8002d90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d92:	2318      	movs	r3, #24
 8002d94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d045      	beq.n	8002e32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <osThreadNew+0x48>
        name = attr->name;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <osThreadNew+0x6e>
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b38      	cmp	r3, #56	@ 0x38
 8002dcc:	d805      	bhi.n	8002dda <osThreadNew+0x6e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <osThreadNew+0x72>
        return (NULL);
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e054      	b.n	8002e88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <osThreadNew+0xa8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b5b      	cmp	r3, #91	@ 0x5b
 8002dfc:	d90a      	bls.n	8002e14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <osThreadNew+0xa8>
        mem = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e010      	b.n	8002e36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10c      	bne.n	8002e36 <osThreadNew+0xca>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d108      	bne.n	8002e36 <osThreadNew+0xca>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d104      	bne.n	8002e36 <osThreadNew+0xca>
          mem = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61bb      	str	r3, [r7, #24]
 8002e30:	e001      	b.n	8002e36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d110      	bne.n	8002e5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e44:	9202      	str	r2, [sp, #8]
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6a3a      	ldr	r2, [r7, #32]
 8002e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fdfe 	bl	8003a54 <xTaskCreateStatic>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e013      	b.n	8002e86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fe4c 	bl	8003b14 <xTaskCreate>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <osThreadNew+0x11a>
            hTask = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e86:	693b      	ldr	r3, [r7, #16]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	@ 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4a06      	ldr	r2, [pc, #24]	@ (8002ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2280      	movs	r2, #128	@ 0x80
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000140 	.word	0x20000140
 8002ec0:	2000019c 	.word	0x2000019c

08002ec4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	@ (8002ef0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ed4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a06      	ldr	r2, [pc, #24]	@ (8002ef4 <vApplicationGetTimerTaskMemory+0x30>)
 8002eda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	2000039c 	.word	0x2000039c
 8002ef4:	200003f8 	.word	0x200003f8

08002ef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f103 0208 	add.w	r2, r3, #8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f103 0208 	add.w	r2, r3, #8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f103 0208 	add.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d103      	bne.n	8002fba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	e00c      	b.n	8002fd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e002      	b.n	8002fc8 <vListInsert+0x2e>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d2f6      	bcs.n	8002fc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6852      	ldr	r2, [r2, #4]
 800302c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	429a      	cmp	r2, r3
 8003036:	d103      	bne.n	8003040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10b      	bne.n	800308c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	e7fd      	b.n	8003088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800308c:	f002 f87c 	bl	8005188 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	441a      	add	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	3b01      	subs	r3, #1
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	22ff      	movs	r2, #255	@ 0xff
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	22ff      	movs	r2, #255	@ 0xff
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01a      	beq.n	8003120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3310      	adds	r3, #16
 80030ee:	4618      	mov	r0, r3
 80030f0:	f001 f91a 	bl	8004328 <xTaskRemoveFromEventList>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d012      	beq.n	8003120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <xQueueGenericReset+0xd0>)
 80030fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	e009      	b.n	8003120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3310      	adds	r3, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fef1 	bl	8002ef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3324      	adds	r3, #36	@ 0x24
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff feec 	bl	8002ef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003120:	f002 f864 	bl	80051ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003124:	2301      	movs	r3, #1
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000ed04 	.word	0xe000ed04

08003134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	@ 0x38
 8003138:	af02      	add	r7, sp, #8
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10b      	bne.n	800317e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	e7fd      	b.n	800317a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <xQueueGenericCreateStatic+0x56>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <xQueueGenericCreateStatic+0x5a>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <xQueueGenericCreateStatic+0x5c>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	623b      	str	r3, [r7, #32]
}
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <xQueueGenericCreateStatic+0x84>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <xQueueGenericCreateStatic+0x88>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <xQueueGenericCreateStatic+0x8a>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	61fb      	str	r3, [r7, #28]
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031da:	2350      	movs	r3, #80	@ 0x50
 80031dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b50      	cmp	r3, #80	@ 0x50
 80031e2:	d00b      	beq.n	80031fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	61bb      	str	r3, [r7, #24]
}
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80031fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003210:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68b9      	ldr	r1, [r7, #8]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f805 	bl	800322e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003226:	4618      	mov	r0, r3
 8003228:	3730      	adds	r7, #48	@ 0x30
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	e002      	b.n	8003250 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800325c:	2101      	movs	r1, #1
 800325e:	69b8      	ldr	r0, [r7, #24]
 8003260:	f7ff fefe 	bl	8003060 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08e      	sub	sp, #56	@ 0x38
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003282:	2300      	movs	r3, #0
 8003284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xQueueGenericSend+0x34>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <xQueueGenericSend+0x42>
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <xQueueGenericSend+0x46>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <xQueueGenericSend+0x48>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <xQueueGenericSend+0x64>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	e7fd      	b.n	80032d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d103      	bne.n	80032e6 <xQueueGenericSend+0x72>
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <xQueueGenericSend+0x76>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <xQueueGenericSend+0x78>
 80032ea:	2300      	movs	r3, #0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <xQueueGenericSend+0x94>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	623b      	str	r3, [r7, #32]
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003308:	f001 f9ce 	bl	80046a8 <xTaskGetSchedulerState>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <xQueueGenericSend+0xa4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <xQueueGenericSend+0xa8>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <xQueueGenericSend+0xaa>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <xQueueGenericSend+0xc6>
	__asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	61fb      	str	r3, [r7, #28]
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	e7fd      	b.n	8003336 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800333a:	f001 ff25 	bl	8005188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	429a      	cmp	r2, r3
 8003348:	d302      	bcc.n	8003350 <xQueueGenericSend+0xdc>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d129      	bne.n	80033a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003356:	f000 fa0f 	bl	8003778 <prvCopyDataToQueue>
 800335a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003366:	3324      	adds	r3, #36	@ 0x24
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ffdd 	bl	8004328 <xTaskRemoveFromEventList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003374:	4b3f      	ldr	r3, [pc, #252]	@ (8003474 <xQueueGenericSend+0x200>)
 8003376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	e00a      	b.n	800339c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800338c:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <xQueueGenericSend+0x200>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800339c:	f001 ff26 	bl	80051ec <vPortExitCritical>
				return pdPASS;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e063      	b.n	800346c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033aa:	f001 ff1f 	bl	80051ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e05c      	b.n	800346c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 f817 	bl	80043f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033c2:	2301      	movs	r3, #1
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033c6:	f001 ff11 	bl	80051ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033ca:	f000 fd87 	bl	8003edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ce:	f001 fedb 	bl	8005188 <vPortEnterCritical>
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d103      	bne.n	80033e8 <xQueueGenericSend+0x174>
 80033e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d103      	bne.n	80033fe <xQueueGenericSend+0x18a>
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033fe:	f001 fef5 	bl	80051ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003402:	1d3a      	adds	r2, r7, #4
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f806 	bl	800441c <xTaskCheckForTimeOut>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d124      	bne.n	8003460 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003418:	f000 faa6 	bl	8003968 <prvIsQueueFull>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	3310      	adds	r3, #16
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f000 ff2a 	bl	8004284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003432:	f000 fa31 	bl	8003898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003436:	f000 fd5f 	bl	8003ef8 <xTaskResumeAll>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f af7c 	bne.w	800333a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003442:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <xQueueGenericSend+0x200>)
 8003444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	e772      	b.n	800333a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003456:	f000 fa1f 	bl	8003898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800345a:	f000 fd4d 	bl	8003ef8 <xTaskResumeAll>
 800345e:	e76c      	b.n	800333a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003462:	f000 fa19 	bl	8003898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003466:	f000 fd47 	bl	8003ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800346a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800346c:	4618      	mov	r0, r3
 800346e:	3738      	adds	r7, #56	@ 0x38
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b090      	sub	sp, #64	@ 0x40
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <xQueueGenericSendFromISR+0x3e>
 80034ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <xQueueGenericSendFromISR+0x42>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueGenericSendFromISR+0x44>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSendFromISR+0x6e>
 80034de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <xQueueGenericSendFromISR+0x72>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xQueueGenericSendFromISR+0x74>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	623b      	str	r3, [r7, #32]
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003508:	f001 ff1e 	bl	8005348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800350c:	f3ef 8211 	mrs	r2, BASEPRI
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	61fa      	str	r2, [r7, #28]
 8003522:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003524:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003526:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <xQueueGenericSendFromISR+0xc2>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d12f      	bne.n	800359a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003540:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003550:	f000 f912 	bl	8003778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003554:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d112      	bne.n	8003584 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800355e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	3324      	adds	r3, #36	@ 0x24
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fedc 	bl	8004328 <xTaskRemoveFromEventList>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00e      	beq.n	8003594 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00b      	beq.n	8003594 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e007      	b.n	8003594 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003584:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003588:	3301      	adds	r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	b25a      	sxtb	r2, r3
 800358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003594:	2301      	movs	r3, #1
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003598:	e001      	b.n	800359e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800359a:	2300      	movs	r3, #0
 800359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800359e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3740      	adds	r7, #64	@ 0x40
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	@ 0x30
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <xQueueReceive+0x32>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	623b      	str	r3, [r7, #32]
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <xQueueReceive+0x40>
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <xQueueReceive+0x44>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <xQueueReceive+0x46>
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <xQueueReceive+0x62>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	61fb      	str	r3, [r7, #28]
}
 8003610:	bf00      	nop
 8003612:	bf00      	nop
 8003614:	e7fd      	b.n	8003612 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003616:	f001 f847 	bl	80046a8 <xTaskGetSchedulerState>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <xQueueReceive+0x72>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <xQueueReceive+0x76>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueReceive+0x78>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <xQueueReceive+0x94>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	61bb      	str	r3, [r7, #24]
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003648:	f001 fd9e 	bl	8005188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01f      	beq.n	8003698 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800365c:	f000 f8f6 	bl	800384c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	1e5a      	subs	r2, r3, #1
 8003664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003666:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00f      	beq.n	8003690 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	3310      	adds	r3, #16
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fe57 	bl	8004328 <xTaskRemoveFromEventList>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d007      	beq.n	8003690 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003680:	4b3c      	ldr	r3, [pc, #240]	@ (8003774 <xQueueReceive+0x1c0>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003690:	f001 fdac 	bl	80051ec <vPortExitCritical>
				return pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	e069      	b.n	800376c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800369e:	f001 fda5 	bl	80051ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e062      	b.n	800376c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d106      	bne.n	80036ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036ac:	f107 0310 	add.w	r3, r7, #16
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fe9d 	bl	80043f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036ba:	f001 fd97 	bl	80051ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036be:	f000 fc0d 	bl	8003edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c2:	f001 fd61 	bl	8005188 <vPortEnterCritical>
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036cc:	b25b      	sxtb	r3, r3
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d103      	bne.n	80036dc <xQueueReceive+0x128>
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d103      	bne.n	80036f2 <xQueueReceive+0x13e>
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f2:	f001 fd7b 	bl	80051ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036f6:	1d3a      	adds	r2, r7, #4
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fe8c 	bl	800441c <xTaskCheckForTimeOut>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d123      	bne.n	8003752 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800370a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800370c:	f000 f916 	bl	800393c <prvIsQueueEmpty>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d017      	beq.n	8003746 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003718:	3324      	adds	r3, #36	@ 0x24
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4611      	mov	r1, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fdb0 	bl	8004284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003724:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003726:	f000 f8b7 	bl	8003898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800372a:	f000 fbe5 	bl	8003ef8 <xTaskResumeAll>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d189      	bne.n	8003648 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003734:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <xQueueReceive+0x1c0>)
 8003736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	e780      	b.n	8003648 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003748:	f000 f8a6 	bl	8003898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800374c:	f000 fbd4 	bl	8003ef8 <xTaskResumeAll>
 8003750:	e77a      	b.n	8003648 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003754:	f000 f8a0 	bl	8003898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003758:	f000 fbce 	bl	8003ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800375c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800375e:	f000 f8ed 	bl	800393c <prvIsQueueEmpty>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	f43f af6f 	beq.w	8003648 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800376a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800376c:	4618      	mov	r0, r3
 800376e:	3730      	adds	r7, #48	@ 0x30
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14d      	bne.n	800383a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff9e 	bl	80046e4 <xTaskPriorityDisinherit>
 80037a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e043      	b.n	800383a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d119      	bne.n	80037ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6858      	ldr	r0, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	461a      	mov	r2, r3
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	f002 f81c 	bl	8005800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	441a      	add	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d32b      	bcc.n	800383a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	e026      	b.n	800383a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68d8      	ldr	r0, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	f002 f802 	bl	8005800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	425b      	negs	r3, r3
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	425b      	negs	r3, r3
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d105      	bne.n	800383a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3b01      	subs	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003842:	697b      	ldr	r3, [r7, #20]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d303      	bcc.n	8003880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68d9      	ldr	r1, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	461a      	mov	r2, r3
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f001 ffb8 	bl	8005800 <memcpy>
	}
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038a0:	f001 fc72 	bl	8005188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ac:	e011      	b.n	80038d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3324      	adds	r3, #36	@ 0x24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fd34 	bl	8004328 <xTaskRemoveFromEventList>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038c6:	f000 fe0d 	bl	80044e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	dce9      	bgt.n	80038ae <prvUnlockQueue+0x16>
 80038da:	e000      	b.n	80038de <prvUnlockQueue+0x46>
					break;
 80038dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	22ff      	movs	r2, #255	@ 0xff
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038e6:	f001 fc81 	bl	80051ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038ea:	f001 fc4d 	bl	8005188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f6:	e011      	b.n	800391c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3310      	adds	r3, #16
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fd0f 	bl	8004328 <xTaskRemoveFromEventList>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003910:	f000 fde8 	bl	80044e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	3b01      	subs	r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800391c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003920:	2b00      	cmp	r3, #0
 8003922:	dce9      	bgt.n	80038f8 <prvUnlockQueue+0x60>
 8003924:	e000      	b.n	8003928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	22ff      	movs	r2, #255	@ 0xff
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003930:	f001 fc5c 	bl	80051ec <vPortExitCritical>
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003944:	f001 fc20 	bl	8005188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e001      	b.n	800395a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800395a:	f001 fc47 	bl	80051ec <vPortExitCritical>

	return xReturn;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003970:	f001 fc0a 	bl	8005188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	429a      	cmp	r2, r3
 800397e:	d102      	bne.n	8003986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e001      	b.n	800398a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800398a:	f001 fc2f 	bl	80051ec <vPortExitCritical>

	return xReturn;
 800398e:	68fb      	ldr	r3, [r7, #12]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e014      	b.n	80039d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039a8:	4a0f      	ldr	r2, [pc, #60]	@ (80039e8 <vQueueAddToRegistry+0x50>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039b4:	490c      	ldr	r1, [pc, #48]	@ (80039e8 <vQueueAddToRegistry+0x50>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039be:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <vQueueAddToRegistry+0x50>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039ca:	e006      	b.n	80039da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b07      	cmp	r3, #7
 80039d6:	d9e7      	bls.n	80039a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200007f8 	.word	0x200007f8

080039ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039fc:	f001 fbc4 	bl	8005188 <vPortEnterCritical>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d103      	bne.n	8003a16 <vQueueWaitForMessageRestricted+0x2a>
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a1c:	b25b      	sxtb	r3, r3
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d103      	bne.n	8003a2c <vQueueWaitForMessageRestricted+0x40>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a2c:	f001 fbde 	bl	80051ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d106      	bne.n	8003a46 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	3324      	adds	r3, #36	@ 0x24
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fc45 	bl	80042d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a46:	6978      	ldr	r0, [r7, #20]
 8003a48:	f7ff ff26 	bl	8003898 <prvUnlockQueue>
	}
 8003a4c:	bf00      	nop
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08e      	sub	sp, #56	@ 0x38
 8003a58:	af04      	add	r7, sp, #16
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	623b      	str	r3, [r7, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	61fb      	str	r3, [r7, #28]
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a9e:	235c      	movs	r3, #92	@ 0x5c
 8003aa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b5c      	cmp	r3, #92	@ 0x5c
 8003aa6:	d00b      	beq.n	8003ac0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	61bb      	str	r3, [r7, #24]
}
 8003aba:	bf00      	nop
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ac0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01e      	beq.n	8003b06 <xTaskCreateStatic+0xb2>
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01b      	beq.n	8003b06 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	9302      	str	r3, [sp, #8]
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f850 	bl	8003b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003afe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b00:	f000 f8de 	bl	8003cc0 <prvAddNewTaskToReadyList>
 8003b04:	e001      	b.n	8003b0a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b0a:	697b      	ldr	r3, [r7, #20]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3728      	adds	r7, #40	@ 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	@ 0x30
 8003b18:	af04      	add	r7, sp, #16
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fc4f 	bl	80053cc <pvPortMalloc>
 8003b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b36:	205c      	movs	r0, #92	@ 0x5c
 8003b38:	f001 fc48 	bl	80053cc <pvPortMalloc>
 8003b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b4a:	e005      	b.n	8003b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b4c:	6978      	ldr	r0, [r7, #20]
 8003b4e:	f001 fd0b 	bl	8005568 <vPortFree>
 8003b52:	e001      	b.n	8003b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9303      	str	r3, [sp, #12]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f80e 	bl	8003b9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b82:	69f8      	ldr	r0, [r7, #28]
 8003b84:	f000 f89c 	bl	8003cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e002      	b.n	8003b94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b94:	69bb      	ldr	r3, [r7, #24]
	}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b088      	sub	sp, #32
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	21a5      	movs	r1, #165	@ 0xa5
 8003bb8:	f001 fdf6 	bl	80057a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f023 0307 	bic.w	r3, r3, #7
 8003bd4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	617b      	str	r3, [r7, #20]
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01f      	beq.n	8003c3e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	e012      	b.n	8003c2a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	7819      	ldrb	r1, [r3, #0]
 8003c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	3334      	adds	r3, #52	@ 0x34
 8003c14:	460a      	mov	r2, r1
 8003c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	3301      	adds	r3, #1
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	d9e9      	bls.n	8003c04 <prvInitialiseNewTask+0x66>
 8003c30:	e000      	b.n	8003c34 <prvInitialiseNewTask+0x96>
			{
				break;
 8003c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c3c:	e003      	b.n	8003c46 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	2b37      	cmp	r3, #55	@ 0x37
 8003c4a:	d901      	bls.n	8003c50 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c4c:	2337      	movs	r3, #55	@ 0x37
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c54:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	2200      	movs	r2, #0
 8003c60:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	3304      	adds	r3, #4
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff f966 	bl	8002f38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff f961 	bl	8002f38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	68f9      	ldr	r1, [r7, #12]
 8003c9e:	69b8      	ldr	r0, [r7, #24]
 8003ca0:	f001 f93e 	bl	8004f20 <pxPortInitialiseStack>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb6:	bf00      	nop
 8003cb8:	3720      	adds	r7, #32
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cc8:	f001 fa5e 	bl	8005188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d84 <prvAddNewTaskToReadyList+0xc4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d84 <prvAddNewTaskToReadyList+0xc4>)
 8003cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d88 <prvAddNewTaskToReadyList+0xc8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cde:	4a2a      	ldr	r2, [pc, #168]	@ (8003d88 <prvAddNewTaskToReadyList+0xc8>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ce4:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <prvAddNewTaskToReadyList+0xc4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d110      	bne.n	8003d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cec:	f000 fc1e 	bl	800452c <prvInitialiseTaskLists>
 8003cf0:	e00d      	b.n	8003d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cf2:	4b26      	ldr	r3, [pc, #152]	@ (8003d8c <prvAddNewTaskToReadyList+0xcc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d109      	bne.n	8003d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cfa:	4b23      	ldr	r3, [pc, #140]	@ (8003d88 <prvAddNewTaskToReadyList+0xc8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d802      	bhi.n	8003d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d08:	4a1f      	ldr	r2, [pc, #124]	@ (8003d88 <prvAddNewTaskToReadyList+0xc8>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <prvAddNewTaskToReadyList+0xd0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a1e      	ldr	r2, [pc, #120]	@ (8003d90 <prvAddNewTaskToReadyList+0xd0>)
 8003d16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <prvAddNewTaskToReadyList+0xd0>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d24:	4b1b      	ldr	r3, [pc, #108]	@ (8003d94 <prvAddNewTaskToReadyList+0xd4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d903      	bls.n	8003d34 <prvAddNewTaskToReadyList+0x74>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <prvAddNewTaskToReadyList+0xd4>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4a15      	ldr	r2, [pc, #84]	@ (8003d98 <prvAddNewTaskToReadyList+0xd8>)
 8003d42:	441a      	add	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7ff f901 	bl	8002f52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d50:	f001 fa4c 	bl	80051ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d54:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <prvAddNewTaskToReadyList+0xcc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00e      	beq.n	8003d7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <prvAddNewTaskToReadyList+0xc8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d207      	bcs.n	8003d7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <prvAddNewTaskToReadyList+0xdc>)
 8003d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000d0c 	.word	0x20000d0c
 8003d88:	20000838 	.word	0x20000838
 8003d8c:	20000d18 	.word	0x20000d18
 8003d90:	20000d28 	.word	0x20000d28
 8003d94:	20000d14 	.word	0x20000d14
 8003d98:	2000083c 	.word	0x2000083c
 8003d9c:	e000ed04 	.word	0xe000ed04

08003da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003db2:	4b14      	ldr	r3, [pc, #80]	@ (8003e04 <vTaskDelay+0x64>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00b      	beq.n	8003dd2 <vTaskDelay+0x32>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60bb      	str	r3, [r7, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dd2:	f000 f883 	bl	8003edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fcf3 	bl	80047c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dde:	f000 f88b 	bl	8003ef8 <xTaskResumeAll>
 8003de2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d107      	bne.n	8003dfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003dea:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <vTaskDelay+0x68>)
 8003dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000d34 	.word	0x20000d34
 8003e08:	e000ed04 	.word	0xe000ed04

08003e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08a      	sub	sp, #40	@ 0x28
 8003e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e1a:	463a      	mov	r2, r7
 8003e1c:	1d39      	adds	r1, r7, #4
 8003e1e:	f107 0308 	add.w	r3, r7, #8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f834 	bl	8002e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	9202      	str	r2, [sp, #8]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	2300      	movs	r3, #0
 8003e38:	460a      	mov	r2, r1
 8003e3a:	4922      	ldr	r1, [pc, #136]	@ (8003ec4 <vTaskStartScheduler+0xb8>)
 8003e3c:	4822      	ldr	r0, [pc, #136]	@ (8003ec8 <vTaskStartScheduler+0xbc>)
 8003e3e:	f7ff fe09 	bl	8003a54 <xTaskCreateStatic>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a21      	ldr	r2, [pc, #132]	@ (8003ecc <vTaskStartScheduler+0xc0>)
 8003e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e48:	4b20      	ldr	r3, [pc, #128]	@ (8003ecc <vTaskStartScheduler+0xc0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d002      	beq.n	8003e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e50:	2301      	movs	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e001      	b.n	8003e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e60:	f000 fd04 	bl	800486c <xTimerCreateTimerTask>
 8003e64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d116      	bne.n	8003e9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	613b      	str	r3, [r7, #16]
}
 8003e7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <vTaskStartScheduler+0xc4>)
 8003e82:	f04f 32ff 	mov.w	r2, #4294967295
 8003e86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e88:	4b12      	ldr	r3, [pc, #72]	@ (8003ed4 <vTaskStartScheduler+0xc8>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e8e:	4b12      	ldr	r3, [pc, #72]	@ (8003ed8 <vTaskStartScheduler+0xcc>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e94:	f001 f8d4 	bl	8005040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e98:	e00f      	b.n	8003eba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d10b      	bne.n	8003eba <vTaskStartScheduler+0xae>
	__asm volatile
 8003ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	60fb      	str	r3, [r7, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	e7fd      	b.n	8003eb6 <vTaskStartScheduler+0xaa>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08005854 	.word	0x08005854
 8003ec8:	080044fd 	.word	0x080044fd
 8003ecc:	20000d30 	.word	0x20000d30
 8003ed0:	20000d2c 	.word	0x20000d2c
 8003ed4:	20000d18 	.word	0x20000d18
 8003ed8:	20000d10 	.word	0x20000d10

08003edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <vTaskSuspendAll+0x18>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	4a03      	ldr	r2, [pc, #12]	@ (8003ef4 <vTaskSuspendAll+0x18>)
 8003ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	20000d34 	.word	0x20000d34

08003ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f06:	4b42      	ldr	r3, [pc, #264]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <xTaskResumeAll+0x2e>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f26:	f001 f92f 	bl	8005188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f2a:	4b39      	ldr	r3, [pc, #228]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	4a37      	ldr	r2, [pc, #220]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <xTaskResumeAll+0x118>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d162      	bne.n	8004002 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f3c:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <xTaskResumeAll+0x11c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d05e      	beq.n	8004002 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f44:	e02f      	b.n	8003fa6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f46:	4b34      	ldr	r3, [pc, #208]	@ (8004018 <xTaskResumeAll+0x120>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	3318      	adds	r3, #24
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff f85a 	bl	800300c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff f855 	bl	800300c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f66:	4b2d      	ldr	r3, [pc, #180]	@ (800401c <xTaskResumeAll+0x124>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d903      	bls.n	8003f76 <xTaskResumeAll+0x7e>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <xTaskResumeAll+0x124>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <xTaskResumeAll+0x128>)
 8003f84:	441a      	add	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7fe ffe0 	bl	8002f52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f96:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <xTaskResumeAll+0x12c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d302      	bcc.n	8003fa6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003fa0:	4b21      	ldr	r3, [pc, #132]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <xTaskResumeAll+0x120>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1cb      	bne.n	8003f46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003fb4:	f000 fb58 	bl	8004668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800402c <xTaskResumeAll+0x134>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fc4:	f000 f846 	bl	8004054 <xTaskIncrementTick>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003fce:	4b16      	ldr	r3, [pc, #88]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f1      	bne.n	8003fc4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <xTaskResumeAll+0x134>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fe6:	4b10      	ldr	r3, [pc, #64]	@ (8004028 <xTaskResumeAll+0x130>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <xTaskResumeAll+0x138>)
 8003ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004002:	f001 f8f3 	bl	80051ec <vPortExitCritical>

	return xAlreadyYielded;
 8004006:	68bb      	ldr	r3, [r7, #8]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3710      	adds	r7, #16
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000d34 	.word	0x20000d34
 8004014:	20000d0c 	.word	0x20000d0c
 8004018:	20000ccc 	.word	0x20000ccc
 800401c:	20000d14 	.word	0x20000d14
 8004020:	2000083c 	.word	0x2000083c
 8004024:	20000838 	.word	0x20000838
 8004028:	20000d20 	.word	0x20000d20
 800402c:	20000d1c 	.word	0x20000d1c
 8004030:	e000ed04 	.word	0xe000ed04

08004034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800403a:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <xTaskGetTickCount+0x1c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004040:	687b      	ldr	r3, [r7, #4]
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	20000d10 	.word	0x20000d10

08004054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405e:	4b4f      	ldr	r3, [pc, #316]	@ (800419c <xTaskIncrementTick+0x148>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8090 	bne.w	8004188 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004068:	4b4d      	ldr	r3, [pc, #308]	@ (80041a0 <xTaskIncrementTick+0x14c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004070:	4a4b      	ldr	r2, [pc, #300]	@ (80041a0 <xTaskIncrementTick+0x14c>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d121      	bne.n	80040c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800407c:	4b49      	ldr	r3, [pc, #292]	@ (80041a4 <xTaskIncrementTick+0x150>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	603b      	str	r3, [r7, #0]
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	e7fd      	b.n	800409a <xTaskIncrementTick+0x46>
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	4b40      	ldr	r3, [pc, #256]	@ (80041a8 <xTaskIncrementTick+0x154>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3e      	ldr	r2, [pc, #248]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	4a3e      	ldr	r2, [pc, #248]	@ (80041a8 <xTaskIncrementTick+0x154>)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b3e      	ldr	r3, [pc, #248]	@ (80041ac <xTaskIncrementTick+0x158>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	4a3c      	ldr	r2, [pc, #240]	@ (80041ac <xTaskIncrementTick+0x158>)
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	f000 fad4 	bl	8004668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040c0:	4b3b      	ldr	r3, [pc, #236]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d349      	bcc.n	800415e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ca:	4b36      	ldr	r3, [pc, #216]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d4:	4b36      	ldr	r3, [pc, #216]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040d6:	f04f 32ff 	mov.w	r2, #4294967295
 80040da:	601a      	str	r2, [r3, #0]
					break;
 80040dc:	e03f      	b.n	800415e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040de:	4b31      	ldr	r3, [pc, #196]	@ (80041a4 <xTaskIncrementTick+0x150>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d203      	bcs.n	80040fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040f6:	4a2e      	ldr	r2, [pc, #184]	@ (80041b0 <xTaskIncrementTick+0x15c>)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040fc:	e02f      	b.n	800415e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe ff82 	bl	800300c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	2b00      	cmp	r3, #0
 800410e:	d004      	beq.n	800411a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3318      	adds	r3, #24
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe ff79 	bl	800300c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411e:	4b25      	ldr	r3, [pc, #148]	@ (80041b4 <xTaskIncrementTick+0x160>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d903      	bls.n	800412e <xTaskIncrementTick+0xda>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	4a22      	ldr	r2, [pc, #136]	@ (80041b4 <xTaskIncrementTick+0x160>)
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <xTaskIncrementTick+0x164>)
 800413c:	441a      	add	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f7fe ff04 	bl	8002f52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414e:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <xTaskIncrementTick+0x168>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	429a      	cmp	r2, r3
 8004156:	d3b8      	bcc.n	80040ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800415c:	e7b5      	b.n	80040ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <xTaskIncrementTick+0x168>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004164:	4914      	ldr	r1, [pc, #80]	@ (80041b8 <xTaskIncrementTick+0x164>)
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d901      	bls.n	800417a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004176:	2301      	movs	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800417a:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <xTaskIncrementTick+0x16c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e004      	b.n	8004192 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004188:	4b0e      	ldr	r3, [pc, #56]	@ (80041c4 <xTaskIncrementTick+0x170>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <xTaskIncrementTick+0x170>)
 8004190:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004192:	697b      	ldr	r3, [r7, #20]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000d34 	.word	0x20000d34
 80041a0:	20000d10 	.word	0x20000d10
 80041a4:	20000cc4 	.word	0x20000cc4
 80041a8:	20000cc8 	.word	0x20000cc8
 80041ac:	20000d24 	.word	0x20000d24
 80041b0:	20000d2c 	.word	0x20000d2c
 80041b4:	20000d14 	.word	0x20000d14
 80041b8:	2000083c 	.word	0x2000083c
 80041bc:	20000838 	.word	0x20000838
 80041c0:	20000d20 	.word	0x20000d20
 80041c4:	20000d1c 	.word	0x20000d1c

080041c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041ce:	4b28      	ldr	r3, [pc, #160]	@ (8004270 <vTaskSwitchContext+0xa8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041d6:	4b27      	ldr	r3, [pc, #156]	@ (8004274 <vTaskSwitchContext+0xac>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041dc:	e042      	b.n	8004264 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80041de:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <vTaskSwitchContext+0xac>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e4:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <vTaskSwitchContext+0xb0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e011      	b.n	8004210 <vTaskSwitchContext+0x48>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <vTaskSwitchContext+0x42>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	607b      	str	r3, [r7, #4]
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	e7fd      	b.n	8004206 <vTaskSwitchContext+0x3e>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	491a      	ldr	r1, [pc, #104]	@ (800427c <vTaskSwitchContext+0xb4>)
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0e3      	beq.n	80041ec <vTaskSwitchContext+0x24>
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4a13      	ldr	r2, [pc, #76]	@ (800427c <vTaskSwitchContext+0xb4>)
 8004230:	4413      	add	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3308      	adds	r3, #8
 8004246:	429a      	cmp	r2, r3
 8004248:	d104      	bne.n	8004254 <vTaskSwitchContext+0x8c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4a09      	ldr	r2, [pc, #36]	@ (8004280 <vTaskSwitchContext+0xb8>)
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4a06      	ldr	r2, [pc, #24]	@ (8004278 <vTaskSwitchContext+0xb0>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6013      	str	r3, [r2, #0]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000d34 	.word	0x20000d34
 8004274:	20000d20 	.word	0x20000d20
 8004278:	20000d14 	.word	0x20000d14
 800427c:	2000083c 	.word	0x2000083c
 8004280:	20000838 	.word	0x20000838

08004284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042ac:	4b07      	ldr	r3, [pc, #28]	@ (80042cc <vTaskPlaceOnEventList+0x48>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3318      	adds	r3, #24
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fe fe70 	bl	8002f9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ba:	2101      	movs	r1, #1
 80042bc:	6838      	ldr	r0, [r7, #0]
 80042be:	f000 fa81 	bl	80047c4 <prvAddCurrentTaskToDelayedList>
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000838 	.word	0x20000838

080042d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	617b      	str	r3, [r7, #20]
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	e7fd      	b.n	80042f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <vTaskPlaceOnEventListRestricted+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3318      	adds	r3, #24
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7fe fe25 	bl	8002f52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	68b8      	ldr	r0, [r7, #8]
 8004318:	f000 fa54 	bl	80047c4 <prvAddCurrentTaskToDelayedList>
	}
 800431c:	bf00      	nop
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000838 	.word	0x20000838

08004328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	60fb      	str	r3, [r7, #12]
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	e7fd      	b.n	8004352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	3318      	adds	r3, #24
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fe56 	bl	800300c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004360:	4b1d      	ldr	r3, [pc, #116]	@ (80043d8 <xTaskRemoveFromEventList+0xb0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11d      	bne.n	80043a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3304      	adds	r3, #4
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fe4d 	bl	800300c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	4b19      	ldr	r3, [pc, #100]	@ (80043dc <xTaskRemoveFromEventList+0xb4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d903      	bls.n	8004386 <xTaskRemoveFromEventList+0x5e>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <xTaskRemoveFromEventList+0xb4>)
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4a13      	ldr	r2, [pc, #76]	@ (80043e0 <xTaskRemoveFromEventList+0xb8>)
 8004394:	441a      	add	r2, r3
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3304      	adds	r3, #4
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f7fe fdd8 	bl	8002f52 <vListInsertEnd>
 80043a2:	e005      	b.n	80043b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3318      	adds	r3, #24
 80043a8:	4619      	mov	r1, r3
 80043aa:	480e      	ldr	r0, [pc, #56]	@ (80043e4 <xTaskRemoveFromEventList+0xbc>)
 80043ac:	f7fe fdd1 	bl	8002f52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b4:	4b0c      	ldr	r3, [pc, #48]	@ (80043e8 <xTaskRemoveFromEventList+0xc0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d905      	bls.n	80043ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <xTaskRemoveFromEventList+0xc4>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e001      	b.n	80043ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043ce:	697b      	ldr	r3, [r7, #20]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20000d34 	.word	0x20000d34
 80043dc:	20000d14 	.word	0x20000d14
 80043e0:	2000083c 	.word	0x2000083c
 80043e4:	20000ccc 	.word	0x20000ccc
 80043e8:	20000838 	.word	0x20000838
 80043ec:	20000d20 	.word	0x20000d20

080043f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <vTaskInternalSetTimeOutState+0x24>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004400:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <vTaskInternalSetTimeOutState+0x28>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	20000d24 	.word	0x20000d24
 8004418:	20000d10 	.word	0x20000d10

0800441c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	613b      	str	r3, [r7, #16]
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10b      	bne.n	8004462 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	60fb      	str	r3, [r7, #12]
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	e7fd      	b.n	800445e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004462:	f000 fe91 	bl	8005188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004466:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <xTaskCheckForTimeOut+0xc0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d102      	bne.n	8004486 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	e023      	b.n	80044ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <xTaskCheckForTimeOut+0xc4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d007      	beq.n	80044a2 <xTaskCheckForTimeOut+0x86>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	429a      	cmp	r2, r3
 800449a:	d302      	bcc.n	80044a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800449c:	2301      	movs	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e015      	b.n	80044ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d20b      	bcs.n	80044c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ff99 	bl	80043f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e004      	b.n	80044ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044ce:	f000 fe8d 	bl	80051ec <vPortExitCritical>

	return xReturn;
 80044d2:	69fb      	ldr	r3, [r7, #28]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000d10 	.word	0x20000d10
 80044e0:	20000d24 	.word	0x20000d24

080044e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044e8:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <vTaskMissedYield+0x14>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000d20 	.word	0x20000d20

080044fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004504:	f000 f852 	bl	80045ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004508:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <prvIdleTask+0x28>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d9f9      	bls.n	8004504 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004510:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <prvIdleTask+0x2c>)
 8004512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004520:	e7f0      	b.n	8004504 <prvIdleTask+0x8>
 8004522:	bf00      	nop
 8004524:	2000083c 	.word	0x2000083c
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004532:	2300      	movs	r3, #0
 8004534:	607b      	str	r3, [r7, #4]
 8004536:	e00c      	b.n	8004552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4a12      	ldr	r2, [pc, #72]	@ (800458c <prvInitialiseTaskLists+0x60>)
 8004544:	4413      	add	r3, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fcd6 	bl	8002ef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3301      	adds	r3, #1
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b37      	cmp	r3, #55	@ 0x37
 8004556:	d9ef      	bls.n	8004538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004558:	480d      	ldr	r0, [pc, #52]	@ (8004590 <prvInitialiseTaskLists+0x64>)
 800455a:	f7fe fccd 	bl	8002ef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800455e:	480d      	ldr	r0, [pc, #52]	@ (8004594 <prvInitialiseTaskLists+0x68>)
 8004560:	f7fe fcca 	bl	8002ef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004564:	480c      	ldr	r0, [pc, #48]	@ (8004598 <prvInitialiseTaskLists+0x6c>)
 8004566:	f7fe fcc7 	bl	8002ef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800456a:	480c      	ldr	r0, [pc, #48]	@ (800459c <prvInitialiseTaskLists+0x70>)
 800456c:	f7fe fcc4 	bl	8002ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004570:	480b      	ldr	r0, [pc, #44]	@ (80045a0 <prvInitialiseTaskLists+0x74>)
 8004572:	f7fe fcc1 	bl	8002ef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <prvInitialiseTaskLists+0x78>)
 8004578:	4a05      	ldr	r2, [pc, #20]	@ (8004590 <prvInitialiseTaskLists+0x64>)
 800457a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <prvInitialiseTaskLists+0x7c>)
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <prvInitialiseTaskLists+0x68>)
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	2000083c 	.word	0x2000083c
 8004590:	20000c9c 	.word	0x20000c9c
 8004594:	20000cb0 	.word	0x20000cb0
 8004598:	20000ccc 	.word	0x20000ccc
 800459c:	20000ce0 	.word	0x20000ce0
 80045a0:	20000cf8 	.word	0x20000cf8
 80045a4:	20000cc4 	.word	0x20000cc4
 80045a8:	20000cc8 	.word	0x20000cc8

080045ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b2:	e019      	b.n	80045e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045b4:	f000 fde8 	bl	8005188 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <prvCheckTasksWaitingTermination+0x50>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fd21 	bl	800300c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <prvCheckTasksWaitingTermination+0x54>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004600 <prvCheckTasksWaitingTermination+0x54>)
 80045d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <prvCheckTasksWaitingTermination+0x58>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	4a0a      	ldr	r2, [pc, #40]	@ (8004604 <prvCheckTasksWaitingTermination+0x58>)
 80045dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045de:	f000 fe05 	bl	80051ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f810 	bl	8004608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045e8:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <prvCheckTasksWaitingTermination+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e1      	bne.n	80045b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000ce0 	.word	0x20000ce0
 8004600:	20000d0c 	.word	0x20000d0c
 8004604:	20000cf4 	.word	0x20000cf4

08004608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461e:	4618      	mov	r0, r3
 8004620:	f000 ffa2 	bl	8005568 <vPortFree>
				vPortFree( pxTCB );
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 ff9f 	bl	8005568 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800462a:	e019      	b.n	8004660 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004632:	2b01      	cmp	r3, #1
 8004634:	d103      	bne.n	800463e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 ff96 	bl	8005568 <vPortFree>
	}
 800463c:	e010      	b.n	8004660 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004644:	2b02      	cmp	r3, #2
 8004646:	d00b      	beq.n	8004660 <prvDeleteTCB+0x58>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <prvDeleteTCB+0x54>
	}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <prvResetNextTaskUnblockTime+0x38>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004678:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <prvResetNextTaskUnblockTime+0x3c>)
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004680:	e008      	b.n	8004694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004682:	4b07      	ldr	r3, [pc, #28]	@ (80046a0 <prvResetNextTaskUnblockTime+0x38>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <prvResetNextTaskUnblockTime+0x3c>)
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000cc4 	.word	0x20000cc4
 80046a4:	20000d2c 	.word	0x20000d2c

080046a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <xTaskGetSchedulerState+0x34>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d102      	bne.n	80046bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046b6:	2301      	movs	r3, #1
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	e008      	b.n	80046ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <xTaskGetSchedulerState+0x38>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046c4:	2302      	movs	r3, #2
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	e001      	b.n	80046ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046ca:	2300      	movs	r3, #0
 80046cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046ce:	687b      	ldr	r3, [r7, #4]
	}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000d18 	.word	0x20000d18
 80046e0:	20000d34 	.word	0x20000d34

080046e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d058      	beq.n	80047ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046fa:	4b2f      	ldr	r3, [pc, #188]	@ (80047b8 <xTaskPriorityDisinherit+0xd4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	429a      	cmp	r2, r3
 8004702:	d00b      	beq.n	800471c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	e7fd      	b.n	8004718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60bb      	str	r3, [r7, #8]
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004740:	1e5a      	subs	r2, r3, #1
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474e:	429a      	cmp	r2, r3
 8004750:	d02c      	beq.n	80047ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d128      	bne.n	80047ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe fc54 	bl	800300c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477c:	4b0f      	ldr	r3, [pc, #60]	@ (80047bc <xTaskPriorityDisinherit+0xd8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d903      	bls.n	800478c <xTaskPriorityDisinherit+0xa8>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <xTaskPriorityDisinherit+0xd8>)
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4a09      	ldr	r2, [pc, #36]	@ (80047c0 <xTaskPriorityDisinherit+0xdc>)
 800479a:	441a      	add	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f7fe fbd5 	bl	8002f52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047a8:	2301      	movs	r3, #1
 80047aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047ac:	697b      	ldr	r3, [r7, #20]
	}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000838 	.word	0x20000838
 80047bc:	20000d14 	.word	0x20000d14
 80047c0:	2000083c 	.word	0x2000083c

080047c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <prvAddCurrentTaskToDelayedList+0x90>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d4:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x94>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3304      	adds	r3, #4
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fe fc16 	bl	800300c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d10a      	bne.n	80047fe <prvAddCurrentTaskToDelayedList+0x3a>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d007      	beq.n	80047fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4819      	ldr	r0, [pc, #100]	@ (800485c <prvAddCurrentTaskToDelayedList+0x98>)
 80047f8:	f7fe fbab 	bl	8002f52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047fc:	e026      	b.n	800484c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4413      	add	r3, r2
 8004804:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004806:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x94>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	429a      	cmp	r2, r3
 8004814:	d209      	bcs.n	800482a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004816:	4b12      	ldr	r3, [pc, #72]	@ (8004860 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b0f      	ldr	r3, [pc, #60]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x94>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f7fe fbb9 	bl	8002f9a <vListInsert>
}
 8004828:	e010      	b.n	800484c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800482a:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <prvAddCurrentTaskToDelayedList+0xa0>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b0a      	ldr	r3, [pc, #40]	@ (8004858 <prvAddCurrentTaskToDelayedList+0x94>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3304      	adds	r3, #4
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f7fe fbaf 	bl	8002f9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800483c:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <prvAddCurrentTaskToDelayedList+0xa4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d202      	bcs.n	800484c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004846:	4a08      	ldr	r2, [pc, #32]	@ (8004868 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	20000d10 	.word	0x20000d10
 8004858:	20000838 	.word	0x20000838
 800485c:	20000cf8 	.word	0x20000cf8
 8004860:	20000cc8 	.word	0x20000cc8
 8004864:	20000cc4 	.word	0x20000cc4
 8004868:	20000d2c 	.word	0x20000d2c

0800486c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	@ 0x28
 8004870:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004876:	f000 fb13 	bl	8004ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800487a:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <xTimerCreateTimerTask+0x84>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d021      	beq.n	80048c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004886:	2300      	movs	r3, #0
 8004888:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800488a:	1d3a      	adds	r2, r7, #4
 800488c:	f107 0108 	add.w	r1, r7, #8
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fb15 	bl	8002ec4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	9202      	str	r2, [sp, #8]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	2302      	movs	r3, #2
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	460a      	mov	r2, r1
 80048ac:	4911      	ldr	r1, [pc, #68]	@ (80048f4 <xTimerCreateTimerTask+0x88>)
 80048ae:	4812      	ldr	r0, [pc, #72]	@ (80048f8 <xTimerCreateTimerTask+0x8c>)
 80048b0:	f7ff f8d0 	bl	8003a54 <xTaskCreateStatic>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4a11      	ldr	r2, [pc, #68]	@ (80048fc <xTimerCreateTimerTask+0x90>)
 80048b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048ba:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <xTimerCreateTimerTask+0x90>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	613b      	str	r3, [r7, #16]
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048e4:	697b      	ldr	r3, [r7, #20]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000d68 	.word	0x20000d68
 80048f4:	0800585c 	.word	0x0800585c
 80048f8:	08004a39 	.word	0x08004a39
 80048fc:	20000d6c 	.word	0x20000d6c

08004900 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <xTimerGenericCommand+0x30>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004930:	4b19      	ldr	r3, [pc, #100]	@ (8004998 <xTimerGenericCommand+0x98>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d02a      	beq.n	800498e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b05      	cmp	r3, #5
 8004948:	dc18      	bgt.n	800497c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800494a:	f7ff fead 	bl	80046a8 <xTaskGetSchedulerState>
 800494e:	4603      	mov	r3, r0
 8004950:	2b02      	cmp	r3, #2
 8004952:	d109      	bne.n	8004968 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004954:	4b10      	ldr	r3, [pc, #64]	@ (8004998 <xTimerGenericCommand+0x98>)
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	f107 0110 	add.w	r1, r7, #16
 800495c:	2300      	movs	r3, #0
 800495e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004960:	f7fe fc88 	bl	8003274 <xQueueGenericSend>
 8004964:	6278      	str	r0, [r7, #36]	@ 0x24
 8004966:	e012      	b.n	800498e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004968:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <xTimerGenericCommand+0x98>)
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	f107 0110 	add.w	r1, r7, #16
 8004970:	2300      	movs	r3, #0
 8004972:	2200      	movs	r2, #0
 8004974:	f7fe fc7e 	bl	8003274 <xQueueGenericSend>
 8004978:	6278      	str	r0, [r7, #36]	@ 0x24
 800497a:	e008      	b.n	800498e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <xTimerGenericCommand+0x98>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	f107 0110 	add.w	r1, r7, #16
 8004984:	2300      	movs	r3, #0
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	f7fe fd76 	bl	8003478 <xQueueGenericSendFromISR>
 800498c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004990:	4618      	mov	r0, r3
 8004992:	3728      	adds	r7, #40	@ 0x28
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000d68 	.word	0x20000d68

0800499c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a6:	4b23      	ldr	r3, [pc, #140]	@ (8004a34 <prvProcessExpiredTimer+0x98>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fe fb29 	bl	800300c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d023      	beq.n	8004a10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	18d1      	adds	r1, r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	6978      	ldr	r0, [r7, #20]
 80049d6:	f000 f8d5 	bl	8004b84 <prvInsertTimerInActiveList>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049e0:	2300      	movs	r3, #0
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	2100      	movs	r1, #0
 80049ea:	6978      	ldr	r0, [r7, #20]
 80049ec:	f7ff ff88 	bl	8004900 <xTimerGenericCommand>
 80049f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d114      	bne.n	8004a22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	60fb      	str	r3, [r7, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	4798      	blx	r3
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000d60 	.word	0x20000d60

08004a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f859 	bl	8004afc <prvGetNextExpireTime>
 8004a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f805 	bl	8004a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a56:	f000 f8d7 	bl	8004c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a5a:	bf00      	nop
 8004a5c:	e7f0      	b.n	8004a40 <prvTimerTask+0x8>
	...

08004a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a6a:	f7ff fa37 	bl	8003edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f866 	bl	8004b44 <prvSampleTimeNow>
 8004a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d130      	bne.n	8004ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <prvProcessTimerOrBlockTask+0x3c>
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d806      	bhi.n	8004a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a8e:	f7ff fa33 	bl	8003ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff81 	bl	800499c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a9a:	e024      	b.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004aa2:	4b13      	ldr	r3, [pc, #76]	@ (8004af0 <prvProcessTimerOrBlockTask+0x90>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <prvProcessTimerOrBlockTask+0x50>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <prvProcessTimerOrBlockTask+0x52>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8004af4 <prvProcessTimerOrBlockTask+0x94>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f7fe ff93 	bl	80039ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ac6:	f7ff fa17 	bl	8003ef8 <xTaskResumeAll>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10a      	bne.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <prvProcessTimerOrBlockTask+0x98>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
}
 8004ae0:	e001      	b.n	8004ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ae2:	f7ff fa09 	bl	8003ef8 <xTaskResumeAll>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000d64 	.word	0x20000d64
 8004af4:	20000d68 	.word	0x20000d68
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b04:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <prvGetNextExpireTime+0x44>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <prvGetNextExpireTime+0x16>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	e000      	b.n	8004b14 <prvGetNextExpireTime+0x18>
 8004b12:	2200      	movs	r2, #0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <prvGetNextExpireTime+0x44>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e001      	b.n	8004b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000d60 	.word	0x20000d60

08004b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b4c:	f7ff fa72 	bl	8004034 <xTaskGetTickCount>
 8004b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b52:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <prvSampleTimeNow+0x3c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d205      	bcs.n	8004b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b5c:	f000 f93a 	bl	8004dd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	@ (8004b80 <prvSampleTimeNow+0x3c>)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b74:	68fb      	ldr	r3, [r7, #12]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000d70 	.word	0x20000d70

08004b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d812      	bhi.n	8004bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad2      	subs	r2, r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d302      	bcc.n	8004bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e01b      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bbe:	4b10      	ldr	r3, [pc, #64]	@ (8004c00 <prvInsertTimerInActiveList+0x7c>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4610      	mov	r0, r2
 8004bca:	f7fe f9e6 	bl	8002f9a <vListInsert>
 8004bce:	e012      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d206      	bcs.n	8004be6 <prvInsertTimerInActiveList+0x62>
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d302      	bcc.n	8004be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e007      	b.n	8004bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004be6:	4b07      	ldr	r3, [pc, #28]	@ (8004c04 <prvInsertTimerInActiveList+0x80>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fe f9d2 	bl	8002f9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bf6:	697b      	ldr	r3, [r7, #20]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000d64 	.word	0x20000d64
 8004c04:	20000d60 	.word	0x20000d60

08004c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	@ 0x38
 8004c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0e:	e0ce      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da19      	bge.n	8004c4a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	3304      	adds	r3, #4
 8004c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c40:	6850      	ldr	r0, [r2, #4]
 8004c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f2c0 80ae 	blt.w	8004dae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe f9d2 	bl	800300c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c68:	463b      	mov	r3, r7
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff6a 	bl	8004b44 <prvSampleTimeNow>
 8004c70:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	f200 8097 	bhi.w	8004da8 <prvProcessReceivedCommands+0x1a0>
 8004c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c80 <prvProcessReceivedCommands+0x78>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004ca9 	.word	0x08004ca9
 8004c88:	08004ca9 	.word	0x08004ca9
 8004c8c:	08004d1f 	.word	0x08004d1f
 8004c90:	08004d33 	.word	0x08004d33
 8004c94:	08004d7f 	.word	0x08004d7f
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004ca9 	.word	0x08004ca9
 8004ca0:	08004d1f 	.word	0x08004d1f
 8004ca4:	08004d33 	.word	0x08004d33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	18d1      	adds	r1, r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cc8:	f7ff ff5c 	bl	8004b84 <prvInsertTimerInActiveList>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d06c      	beq.n	8004dac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d061      	beq.n	8004dac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	441a      	add	r2, r3
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cfa:	f7ff fe01 	bl	8004900 <xTimerGenericCommand>
 8004cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d152      	bne.n	8004dac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61bb      	str	r3, [r7, #24]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d30:	e03d      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10b      	bne.n	8004d6a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	617b      	str	r3, [r7, #20]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	18d1      	adds	r1, r2, r3
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d78:	f7ff ff04 	bl	8004b84 <prvInsertTimerInActiveList>
					break;
 8004d7c:	e017      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d103      	bne.n	8004d94 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d8e:	f000 fbeb 	bl	8005568 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d92:	e00c      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004da6:	e002      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <prvProcessReceivedCommands+0x1a6>
					break;
 8004dac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <prvProcessReceivedCommands+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	1d39      	adds	r1, r7, #4
 8004db4:	2200      	movs	r2, #0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fbfc 	bl	80035b4 <xQueueReceive>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f47f af26 	bne.w	8004c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3730      	adds	r7, #48	@ 0x30
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000d68 	.word	0x20000d68

08004dd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dda:	e049      	b.n	8004e70 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3304      	adds	r3, #4
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fe f909 	bl	800300c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02f      	beq.n	8004e70 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90e      	bls.n	8004e40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe f8ae 	bl	8002f9a <vListInsert>
 8004e3e:	e017      	b.n	8004e70 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e40:	2300      	movs	r3, #0
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	2300      	movs	r3, #0
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff fd58 	bl	8004900 <xTimerGenericCommand>
 8004e50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10b      	bne.n	8004e70 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	603b      	str	r3, [r7, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	bf00      	nop
 8004e6e:	e7fd      	b.n	8004e6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e70:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1b0      	bne.n	8004ddc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e7a:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <prvSwitchTimerLists+0xc8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a04      	ldr	r2, [pc, #16]	@ (8004e98 <prvSwitchTimerLists+0xc4>)
 8004e86:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e88:	4a04      	ldr	r2, [pc, #16]	@ (8004e9c <prvSwitchTimerLists+0xc8>)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6013      	str	r3, [r2, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000d60 	.word	0x20000d60
 8004e9c:	20000d64 	.word	0x20000d64

08004ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ea6:	f000 f96f 	bl	8005188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d120      	bne.n	8004ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eb2:	4814      	ldr	r0, [pc, #80]	@ (8004f04 <prvCheckForValidListAndQueue+0x64>)
 8004eb4:	f7fe f820 	bl	8002ef8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004eb8:	4813      	ldr	r0, [pc, #76]	@ (8004f08 <prvCheckForValidListAndQueue+0x68>)
 8004eba:	f7fe f81d 	bl	8002ef8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	@ (8004f0c <prvCheckForValidListAndQueue+0x6c>)
 8004ec0:	4a10      	ldr	r2, [pc, #64]	@ (8004f04 <prvCheckForValidListAndQueue+0x64>)
 8004ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <prvCheckForValidListAndQueue+0x70>)
 8004ec6:	4a10      	ldr	r2, [pc, #64]	@ (8004f08 <prvCheckForValidListAndQueue+0x68>)
 8004ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	4b11      	ldr	r3, [pc, #68]	@ (8004f14 <prvCheckForValidListAndQueue+0x74>)
 8004ed0:	4a11      	ldr	r2, [pc, #68]	@ (8004f18 <prvCheckForValidListAndQueue+0x78>)
 8004ed2:	2110      	movs	r1, #16
 8004ed4:	200a      	movs	r0, #10
 8004ed6:	f7fe f92d 	bl	8003134 <xQueueGenericCreateStatic>
 8004eda:	4603      	mov	r3, r0
 8004edc:	4a08      	ldr	r2, [pc, #32]	@ (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d005      	beq.n	8004ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <prvCheckForValidListAndQueue+0x60>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	490b      	ldr	r1, [pc, #44]	@ (8004f1c <prvCheckForValidListAndQueue+0x7c>)
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fe fd52 	bl	8003998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ef4:	f000 f97a 	bl	80051ec <vPortExitCritical>
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000d68 	.word	0x20000d68
 8004f04:	20000d38 	.word	0x20000d38
 8004f08:	20000d4c 	.word	0x20000d4c
 8004f0c:	20000d60 	.word	0x20000d60
 8004f10:	20000d64 	.word	0x20000d64
 8004f14:	20000e14 	.word	0x20000e14
 8004f18:	20000d74 	.word	0x20000d74
 8004f1c:	08005864 	.word	0x08005864

08004f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f50:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <pxPortInitialiseStack+0x64>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b14      	subs	r3, #20
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f06f 0202 	mvn.w	r2, #2
 8004f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b20      	subs	r3, #32
 8004f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	08004f89 	.word	0x08004f89

08004f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f92:	4b13      	ldr	r3, [pc, #76]	@ (8004fe0 <prvTaskExitError+0x58>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d00b      	beq.n	8004fb4 <prvTaskExitError+0x2c>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60fb      	str	r3, [r7, #12]
}
 8004fae:	bf00      	nop
 8004fb0:	bf00      	nop
 8004fb2:	e7fd      	b.n	8004fb0 <prvTaskExitError+0x28>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	60bb      	str	r3, [r7, #8]
}
 8004fc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fc8:	bf00      	nop
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0fc      	beq.n	8004fca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	2000000c 	.word	0x2000000c
	...

08004ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ff0:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <pxCurrentTCBConst2>)
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	6808      	ldr	r0, [r1, #0]
 8004ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	f380 8809 	msr	PSP, r0
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f380 8811 	msr	BASEPRI, r0
 800500a:	4770      	bx	lr
 800500c:	f3af 8000 	nop.w

08005010 <pxCurrentTCBConst2>:
 8005010:	20000838 	.word	0x20000838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop

08005018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005018:	4808      	ldr	r0, [pc, #32]	@ (800503c <prvPortStartFirstTask+0x24>)
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f380 8808 	msr	MSP, r0
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8814 	msr	CONTROL, r0
 800502a:	b662      	cpsie	i
 800502c:	b661      	cpsie	f
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	df00      	svc	0
 8005038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800503a:	bf00      	nop
 800503c:	e000ed08 	.word	0xe000ed08

08005040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005046:	4b47      	ldr	r3, [pc, #284]	@ (8005164 <xPortStartScheduler+0x124>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a47      	ldr	r2, [pc, #284]	@ (8005168 <xPortStartScheduler+0x128>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10b      	bne.n	8005068 <xPortStartScheduler+0x28>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005068:	4b3e      	ldr	r3, [pc, #248]	@ (8005164 <xPortStartScheduler+0x124>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a3f      	ldr	r2, [pc, #252]	@ (800516c <xPortStartScheduler+0x12c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10b      	bne.n	800508a <xPortStartScheduler+0x4a>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60fb      	str	r3, [r7, #12]
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	e7fd      	b.n	8005086 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800508a:	4b39      	ldr	r3, [pc, #228]	@ (8005170 <xPortStartScheduler+0x130>)
 800508c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	22ff      	movs	r2, #255	@ 0xff
 800509a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4b31      	ldr	r3, [pc, #196]	@ (8005174 <xPortStartScheduler+0x134>)
 80050b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050b2:	4b31      	ldr	r3, [pc, #196]	@ (8005178 <xPortStartScheduler+0x138>)
 80050b4:	2207      	movs	r2, #7
 80050b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050b8:	e009      	b.n	80050ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005178 <xPortStartScheduler+0x138>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3b01      	subs	r3, #1
 80050c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005178 <xPortStartScheduler+0x138>)
 80050c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d0ef      	beq.n	80050ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050da:	4b27      	ldr	r3, [pc, #156]	@ (8005178 <xPortStartScheduler+0x138>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1c3 0307 	rsb	r3, r3, #7
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d00b      	beq.n	80050fe <xPortStartScheduler+0xbe>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	60bb      	str	r3, [r7, #8]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005178 <xPortStartScheduler+0x138>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	021b      	lsls	r3, r3, #8
 8005104:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <xPortStartScheduler+0x138>)
 8005106:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <xPortStartScheduler+0x138>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005110:	4a19      	ldr	r2, [pc, #100]	@ (8005178 <xPortStartScheduler+0x138>)
 8005112:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	b2da      	uxtb	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800511c:	4b17      	ldr	r3, [pc, #92]	@ (800517c <xPortStartScheduler+0x13c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a16      	ldr	r2, [pc, #88]	@ (800517c <xPortStartScheduler+0x13c>)
 8005122:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005126:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <xPortStartScheduler+0x13c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a13      	ldr	r2, [pc, #76]	@ (800517c <xPortStartScheduler+0x13c>)
 800512e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005132:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005134:	f000 f8da 	bl	80052ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005138:	4b11      	ldr	r3, [pc, #68]	@ (8005180 <xPortStartScheduler+0x140>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800513e:	f000 f8f9 	bl	8005334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <xPortStartScheduler+0x144>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0f      	ldr	r2, [pc, #60]	@ (8005184 <xPortStartScheduler+0x144>)
 8005148:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800514c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800514e:	f7ff ff63 	bl	8005018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005152:	f7ff f839 	bl	80041c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005156:	f7ff ff17 	bl	8004f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	e000ed00 	.word	0xe000ed00
 8005168:	410fc271 	.word	0x410fc271
 800516c:	410fc270 	.word	0x410fc270
 8005170:	e000e400 	.word	0xe000e400
 8005174:	20000e64 	.word	0x20000e64
 8005178:	20000e68 	.word	0x20000e68
 800517c:	e000ed20 	.word	0xe000ed20
 8005180:	2000000c 	.word	0x2000000c
 8005184:	e000ef34 	.word	0xe000ef34

08005188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
	__asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
}
 80051a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051a2:	4b10      	ldr	r3, [pc, #64]	@ (80051e4 <vPortEnterCritical+0x5c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	4a0e      	ldr	r2, [pc, #56]	@ (80051e4 <vPortEnterCritical+0x5c>)
 80051aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ac:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <vPortEnterCritical+0x5c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d110      	bne.n	80051d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b4:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <vPortEnterCritical+0x60>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	e7fd      	b.n	80051d2 <vPortEnterCritical+0x4a>
	}
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	e000ed04 	.word	0xe000ed04

080051ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <vPortExitCritical+0x50>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <vPortExitCritical+0x26>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	607b      	str	r3, [r7, #4]
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	e7fd      	b.n	800520e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <vPortExitCritical+0x50>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	4a08      	ldr	r2, [pc, #32]	@ (800523c <vPortExitCritical+0x50>)
 800521a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vPortExitCritical+0x50>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <vPortExitCritical+0x44>
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f383 8811 	msr	BASEPRI, r3
}
 800522e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	2000000c 	.word	0x2000000c

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f01e 0f10 	tst.w	lr, #16
 8005250:	bf08      	it	eq
 8005252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005260:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005264:	f380 8811 	msr	BASEPRI, r0
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f7fe ffaa 	bl	80041c8 <vTaskSwitchContext>
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f380 8811 	msr	BASEPRI, r0
 800527c:	bc09      	pop	{r0, r3}
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005286:	f01e 0f10 	tst.w	lr, #16
 800528a:	bf08      	it	eq
 800528c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005290:	f380 8809 	msr	PSP, r0
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst>:
 80052a0:	20000838 	.word	0x20000838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
}
 80052c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c2:	f7fe fec7 	bl	8004054 <xTaskIncrementTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <xPortSysTickHandler+0x40>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	2300      	movs	r3, #0
 80052d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f383 8811 	msr	BASEPRI, r3
}
 80052de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <vPortSetupTimerInterrupt+0x34>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <vPortSetupTimerInterrupt+0x38>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <vPortSetupTimerInterrupt+0x3c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0a      	ldr	r2, [pc, #40]	@ (800532c <vPortSetupTimerInterrupt+0x40>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	4a09      	ldr	r2, [pc, #36]	@ (8005330 <vPortSetupTimerInterrupt+0x44>)
 800530a:	3b01      	subs	r3, #1
 800530c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530e:	4b04      	ldr	r3, [pc, #16]	@ (8005320 <vPortSetupTimerInterrupt+0x34>)
 8005310:	2207      	movs	r2, #7
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e010 	.word	0xe000e010
 8005324:	e000e018 	.word	0xe000e018
 8005328:	20000000 	.word	0x20000000
 800532c:	10624dd3 	.word	0x10624dd3
 8005330:	e000e014 	.word	0xe000e014

08005334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005334:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005344 <vPortEnableVFP+0x10>
 8005338:	6801      	ldr	r1, [r0, #0]
 800533a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800533e:	6001      	str	r1, [r0, #0]
 8005340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005342:	bf00      	nop
 8005344:	e000ed88 	.word	0xe000ed88

08005348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800534e:	f3ef 8305 	mrs	r3, IPSR
 8005352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b0f      	cmp	r3, #15
 8005358:	d915      	bls.n	8005386 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800535a:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <vPortValidateInterruptPriority+0x74>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005364:	4b16      	ldr	r3, [pc, #88]	@ (80053c0 <vPortValidateInterruptPriority+0x78>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	7afa      	ldrb	r2, [r7, #11]
 800536a:	429a      	cmp	r2, r3
 800536c:	d20b      	bcs.n	8005386 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005386:	4b0f      	ldr	r3, [pc, #60]	@ (80053c4 <vPortValidateInterruptPriority+0x7c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800538e:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <vPortValidateInterruptPriority+0x80>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90b      	bls.n	80053ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	603b      	str	r3, [r7, #0]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <vPortValidateInterruptPriority+0x62>
	}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000e3f0 	.word	0xe000e3f0
 80053c0:	20000e64 	.word	0x20000e64
 80053c4:	e000ed0c 	.word	0xe000ed0c
 80053c8:	20000e68 	.word	0x20000e68

080053cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053d8:	f7fe fd80 	bl	8003edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005550 <pvPortMalloc+0x184>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053e4:	f000 f924 	bl	8005630 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005554 <pvPortMalloc+0x188>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f040 8095 	bne.w	8005520 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053fc:	2208      	movs	r2, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d015      	beq.n	800543a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	3308      	adds	r3, #8
 8005416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <pvPortMalloc+0x6e>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	617b      	str	r3, [r7, #20]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d06f      	beq.n	8005520 <pvPortMalloc+0x154>
 8005440:	4b45      	ldr	r3, [pc, #276]	@ (8005558 <pvPortMalloc+0x18c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	429a      	cmp	r2, r3
 8005448:	d86a      	bhi.n	8005520 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800544a:	4b44      	ldr	r3, [pc, #272]	@ (800555c <pvPortMalloc+0x190>)
 800544c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800544e:	4b43      	ldr	r3, [pc, #268]	@ (800555c <pvPortMalloc+0x190>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005454:	e004      	b.n	8005460 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	429a      	cmp	r2, r3
 8005468:	d903      	bls.n	8005472 <pvPortMalloc+0xa6>
 800546a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f1      	bne.n	8005456 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005472:	4b37      	ldr	r3, [pc, #220]	@ (8005550 <pvPortMalloc+0x184>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005478:	429a      	cmp	r2, r3
 800547a:	d051      	beq.n	8005520 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2208      	movs	r2, #8
 8005482:	4413      	add	r3, r2
 8005484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	1ad2      	subs	r2, r2, r3
 8005496:	2308      	movs	r3, #8
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	429a      	cmp	r2, r3
 800549c:	d920      	bls.n	80054e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800549e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4413      	add	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <pvPortMalloc+0xfc>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054da:	69b8      	ldr	r0, [r7, #24]
 80054dc:	f000 f90a 	bl	80056f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <pvPortMalloc+0x18c>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <pvPortMalloc+0x18c>)
 80054ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <pvPortMalloc+0x18c>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005560 <pvPortMalloc+0x194>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d203      	bcs.n	8005502 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054fa:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <pvPortMalloc+0x18c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a18      	ldr	r2, [pc, #96]	@ (8005560 <pvPortMalloc+0x194>)
 8005500:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <pvPortMalloc+0x188>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	431a      	orrs	r2, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005516:	4b13      	ldr	r3, [pc, #76]	@ (8005564 <pvPortMalloc+0x198>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3301      	adds	r3, #1
 800551c:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <pvPortMalloc+0x198>)
 800551e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005520:	f7fe fcea 	bl	8003ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <pvPortMalloc+0x17a>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	60fb      	str	r3, [r7, #12]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <pvPortMalloc+0x176>
	return pvReturn;
 8005546:	69fb      	ldr	r3, [r7, #28]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	@ 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20004a74 	.word	0x20004a74
 8005554:	20004a88 	.word	0x20004a88
 8005558:	20004a78 	.word	0x20004a78
 800555c:	20004a6c 	.word	0x20004a6c
 8005560:	20004a7c 	.word	0x20004a7c
 8005564:	20004a80 	.word	0x20004a80

08005568 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d04f      	beq.n	800561a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800557a:	2308      	movs	r3, #8
 800557c:	425b      	negs	r3, r3
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4413      	add	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	4b25      	ldr	r3, [pc, #148]	@ (8005624 <vPortFree+0xbc>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <vPortFree+0x46>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	60fb      	str	r3, [r7, #12]
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop
 80055ac:	e7fd      	b.n	80055aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <vPortFree+0x66>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	60bb      	str	r3, [r7, #8]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <vPortFree+0xbc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01e      	beq.n	800561a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11a      	bne.n	800561a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <vPortFree+0xbc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	401a      	ands	r2, r3
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055f4:	f7fe fc72 	bl	8003edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005628 <vPortFree+0xc0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4413      	add	r3, r2
 8005602:	4a09      	ldr	r2, [pc, #36]	@ (8005628 <vPortFree+0xc0>)
 8005604:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005606:	6938      	ldr	r0, [r7, #16]
 8005608:	f000 f874 	bl	80056f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800560c:	4b07      	ldr	r3, [pc, #28]	@ (800562c <vPortFree+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a06      	ldr	r2, [pc, #24]	@ (800562c <vPortFree+0xc4>)
 8005614:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005616:	f7fe fc6f 	bl	8003ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20004a88 	.word	0x20004a88
 8005628:	20004a78 	.word	0x20004a78
 800562c:	20004a84 	.word	0x20004a84

08005630 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005636:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800563a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800563c:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <prvHeapInit+0xac>)
 800563e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3307      	adds	r3, #7
 800564e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	4a1f      	ldr	r2, [pc, #124]	@ (80056dc <prvHeapInit+0xac>)
 8005660:	4413      	add	r3, r2
 8005662:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005668:	4a1d      	ldr	r2, [pc, #116]	@ (80056e0 <prvHeapInit+0xb0>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800566e:	4b1c      	ldr	r3, [pc, #112]	@ (80056e0 <prvHeapInit+0xb0>)
 8005670:	2200      	movs	r2, #0
 8005672:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	4413      	add	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800567c:	2208      	movs	r2, #8
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a15      	ldr	r2, [pc, #84]	@ (80056e4 <prvHeapInit+0xb4>)
 8005690:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <prvHeapInit+0xb4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2200      	movs	r2, #0
 8005698:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <prvHeapInit+0xb4>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056b0:	4b0c      	ldr	r3, [pc, #48]	@ (80056e4 <prvHeapInit+0xb4>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <prvHeapInit+0xb8>)
 80056be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	4a09      	ldr	r2, [pc, #36]	@ (80056ec <prvHeapInit+0xbc>)
 80056c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056c8:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <prvHeapInit+0xc0>)
 80056ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056ce:	601a      	str	r2, [r3, #0]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	20000e6c 	.word	0x20000e6c
 80056e0:	20004a6c 	.word	0x20004a6c
 80056e4:	20004a74 	.word	0x20004a74
 80056e8:	20004a7c 	.word	0x20004a7c
 80056ec:	20004a78 	.word	0x20004a78
 80056f0:	20004a88 	.word	0x20004a88

080056f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056fc:	4b28      	ldr	r3, [pc, #160]	@ (80057a0 <prvInsertBlockIntoFreeList+0xac>)
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e002      	b.n	8005708 <prvInsertBlockIntoFreeList+0x14>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d8f7      	bhi.n	8005702 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4413      	add	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d108      	bne.n	8005736 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	441a      	add	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d118      	bne.n	800577c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d00d      	beq.n	8005772 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	e008      	b.n	8005784 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e003      	b.n	8005784 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d002      	beq.n	8005792 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20004a6c 	.word	0x20004a6c
 80057a4:	20004a74 	.word	0x20004a74

080057a8 <memset>:
 80057a8:	4402      	add	r2, r0
 80057aa:	4603      	mov	r3, r0
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d100      	bne.n	80057b2 <memset+0xa>
 80057b0:	4770      	bx	lr
 80057b2:	f803 1b01 	strb.w	r1, [r3], #1
 80057b6:	e7f9      	b.n	80057ac <memset+0x4>

080057b8 <__libc_init_array>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4d0d      	ldr	r5, [pc, #52]	@ (80057f0 <__libc_init_array+0x38>)
 80057bc:	4c0d      	ldr	r4, [pc, #52]	@ (80057f4 <__libc_init_array+0x3c>)
 80057be:	1b64      	subs	r4, r4, r5
 80057c0:	10a4      	asrs	r4, r4, #2
 80057c2:	2600      	movs	r6, #0
 80057c4:	42a6      	cmp	r6, r4
 80057c6:	d109      	bne.n	80057dc <__libc_init_array+0x24>
 80057c8:	4d0b      	ldr	r5, [pc, #44]	@ (80057f8 <__libc_init_array+0x40>)
 80057ca:	4c0c      	ldr	r4, [pc, #48]	@ (80057fc <__libc_init_array+0x44>)
 80057cc:	f000 f826 	bl	800581c <_init>
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	2600      	movs	r6, #0
 80057d6:	42a6      	cmp	r6, r4
 80057d8:	d105      	bne.n	80057e6 <__libc_init_array+0x2e>
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e0:	4798      	blx	r3
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7ee      	b.n	80057c4 <__libc_init_array+0xc>
 80057e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ea:	4798      	blx	r3
 80057ec:	3601      	adds	r6, #1
 80057ee:	e7f2      	b.n	80057d6 <__libc_init_array+0x1e>
 80057f0:	08005894 	.word	0x08005894
 80057f4:	08005894 	.word	0x08005894
 80057f8:	08005894 	.word	0x08005894
 80057fc:	08005898 	.word	0x08005898

08005800 <memcpy>:
 8005800:	440a      	add	r2, r1
 8005802:	4291      	cmp	r1, r2
 8005804:	f100 33ff 	add.w	r3, r0, #4294967295
 8005808:	d100      	bne.n	800580c <memcpy+0xc>
 800580a:	4770      	bx	lr
 800580c:	b510      	push	{r4, lr}
 800580e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005816:	4291      	cmp	r1, r2
 8005818:	d1f9      	bne.n	800580e <memcpy+0xe>
 800581a:	bd10      	pop	{r4, pc}

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
