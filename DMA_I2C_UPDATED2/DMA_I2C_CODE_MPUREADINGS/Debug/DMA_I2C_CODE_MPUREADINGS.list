
DMA_I2C_CODE_MPUREADINGS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08006114  08006114  00007114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006280  08006280  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006288  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000005c  080062e4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080062e4  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1a0  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a58  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00014c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bc  00000000  00000000  00015668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015cb3  00000000  00000000  00015e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d744  00000000  00000000  0002bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087aa5  00000000  00000000  0003921b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0cc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  000c0d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000c3b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060fc 	.word	0x080060fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080060fc 	.word	0x080060fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Debug_UART_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Debug_UART_Print(const char *message)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fe29 	bl	80001e0 <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <Debug_UART_Print+0x28>)
 800059a:	f004 fd3f 	bl	800501c <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000012c 	.word	0x2000012c

080005ac <MPU6050_Init>:
/* Initialize the MPU6050 */
void MPU6050_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	71fb      	strb	r3, [r7, #7]
    if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1,
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	226b      	movs	r2, #107	@ 0x6b
 80005c8:	21d0      	movs	r1, #208	@ 0xd0
 80005ca:	4808      	ldr	r0, [pc, #32]	@ (80005ec <MPU6050_Init+0x40>)
 80005cc:	f001 fc78 	bl	8001ec0 <HAL_I2C_Mem_Write>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <MPU6050_Init+0x32>
                          I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY) == HAL_OK)
    {
        Debug_UART_Print("MPU6050 Initialized Successfully\r\n");
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MPU6050_Init+0x44>)
 80005d8:	f7ff ffd2 	bl	8000580 <Debug_UART_Print>
    }
    else
    {
        Debug_UART_Print("MPU6050 Initialization Failed\r\n");
    }
}
 80005dc:	e002      	b.n	80005e4 <MPU6050_Init+0x38>
        Debug_UART_Print("MPU6050 Initialization Failed\r\n");
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <MPU6050_Init+0x48>)
 80005e0:	f7ff ffce 	bl	8000580 <Debug_UART_Print>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000078 	.word	0x20000078
 80005f0:	08006114 	.word	0x08006114
 80005f4:	08006138 	.word	0x08006138

080005f8 <MPU6050_Read>:

/* Start I2C Read using DMA */
void MPU6050_Read(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
    dma_transfer_complete = 0;  // Reset flag before starting DMA transfer
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MPU6050_Read+0x38>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    Debug_UART_Print("Starting I2C DMA Read...\r\n");
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <MPU6050_Read+0x3c>)
 8000606:	f7ff ffbb 	bl	8000580 <Debug_UART_Print>

    if (HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H,
 800060a:	230e      	movs	r3, #14
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <MPU6050_Read+0x40>)
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2301      	movs	r3, #1
 8000614:	223b      	movs	r2, #59	@ 0x3b
 8000616:	21d0      	movs	r1, #208	@ 0xd0
 8000618:	4808      	ldr	r0, [pc, #32]	@ (800063c <MPU6050_Read+0x44>)
 800061a:	f001 fd4b 	bl	80020b4 <HAL_I2C_Mem_Read_DMA>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d002      	beq.n	800062a <MPU6050_Read+0x32>
                             I2C_MEMADD_SIZE_8BIT, mpu6050Data, DATA_LENGTH) != HAL_OK)
    {
        Debug_UART_Print("I2C DMA Read Failed!\r\n");
 8000624:	4806      	ldr	r0, [pc, #24]	@ (8000640 <MPU6050_Read+0x48>)
 8000626:	f7ff ffab 	bl	8000580 <Debug_UART_Print>
    }
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200001e2 	.word	0x200001e2
 8000634:	08006158 	.word	0x08006158
 8000638:	200001d4 	.word	0x200001d4
 800063c:	20000078 	.word	0x20000078
 8000640:	08006174 	.word	0x08006174

08000644 <HAL_I2C_MemRxCpltCallback>:

/* DMA Completion Callback */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a08      	ldr	r2, [pc, #32]	@ (8000674 <HAL_I2C_MemRxCpltCallback+0x30>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d109      	bne.n	800066a <HAL_I2C_MemRxCpltCallback+0x26>
    {
        Debug_UART_Print("DMA Transfer Complete!\r\n");
 8000656:	4808      	ldr	r0, [pc, #32]	@ (8000678 <HAL_I2C_MemRxCpltCallback+0x34>)
 8000658:	f7ff ff92 	bl	8000580 <Debug_UART_Print>
        dma_transfer_complete = 1;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <HAL_I2C_MemRxCpltCallback+0x38>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  // Toggle LED (if available)
 8000662:	2101      	movs	r1, #1
 8000664:	4806      	ldr	r0, [pc, #24]	@ (8000680 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8000666:	f001 fab6 	bl	8001bd6 <HAL_GPIO_TogglePin>
    }
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40005400 	.word	0x40005400
 8000678:	0800618c 	.word	0x0800618c
 800067c:	200001e2 	.word	0x200001e2
 8000680:	40020400 	.word	0x40020400

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b09d      	sub	sp, #116	@ 0x74
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fbb3 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f859 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f943 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 8000696:	f000 f919 	bl	80008cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800069a:	f000 f8ed 	bl	8000878 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800069e:	f000 f8bd 	bl	800081c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Debug_UART_Print("System Initialized!\r\n");
 80006a2:	4822      	ldr	r0, [pc, #136]	@ (800072c <main+0xa8>)
 80006a4:	f7ff ff6c 	bl	8000580 <Debug_UART_Print>

  MPU6050_Init();
 80006a8:	f7ff ff80 	bl	80005ac <MPU6050_Init>

  while (1)
  {
      MPU6050_Read();  // Start DMA Read
 80006ac:	f7ff ffa4 	bl	80005f8 <MPU6050_Read>
      Debug_UART_Print("Waiting for DMA Completion...\r\n");
 80006b0:	481f      	ldr	r0, [pc, #124]	@ (8000730 <main+0xac>)
 80006b2:	f7ff ff65 	bl	8000580 <Debug_UART_Print>

      // Wait for DMA to complete
      while (!dma_transfer_complete)
 80006b6:	e002      	b.n	80006be <main+0x3a>
      {
          HAL_Delay(10);  // Small delay to prevent CPU blocking
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fc0d 	bl	8000ed8 <HAL_Delay>
      while (!dma_transfer_complete)
 80006be:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <main+0xb0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f7      	beq.n	80006b8 <main+0x34>
      }

      Debug_UART_Print("Processing Sensor Data...\r\n");
 80006c8:	481b      	ldr	r0, [pc, #108]	@ (8000738 <main+0xb4>)
 80006ca:	f7ff ff59 	bl	8000580 <Debug_UART_Print>

      // Process Data (Example: Send via UART)
      char msg[100];
      snprintf(msg, sizeof(msg), "AccelX: %d, AccelY: %d, AccelZ: %d\r\n",
               (int16_t)(mpu6050Data[0] << 8 | mpu6050Data[1]),
 80006ce:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <main+0xb8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b19      	ldr	r3, [pc, #100]	@ (800073c <main+0xb8>)
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
      snprintf(msg, sizeof(msg), "AccelX: %d, AccelY: %d, AccelZ: %d\r\n",
 80006e0:	461c      	mov	r4, r3
               (int16_t)(mpu6050Data[2] << 8 | mpu6050Data[3]),
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <main+0xb8>)
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	021b      	lsls	r3, r3, #8
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <main+0xb8>)
 80006ec:	78db      	ldrb	r3, [r3, #3]
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b21b      	sxth	r3, r3
      snprintf(msg, sizeof(msg), "AccelX: %d, AccelY: %d, AccelZ: %d\r\n",
 80006f4:	4619      	mov	r1, r3
               (int16_t)(mpu6050Data[4] << 8 | mpu6050Data[5]));
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <main+0xb8>)
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	021b      	lsls	r3, r3, #8
 80006fc:	b21a      	sxth	r2, r3
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <main+0xb8>)
 8000700:	795b      	ldrb	r3, [r3, #5]
 8000702:	b21b      	sxth	r3, r3
 8000704:	4313      	orrs	r3, r2
 8000706:	b21b      	sxth	r3, r3
      snprintf(msg, sizeof(msg), "AccelX: %d, AccelY: %d, AccelZ: %d\r\n",
 8000708:	1d38      	adds	r0, r7, #4
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	4623      	mov	r3, r4
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <main+0xbc>)
 8000712:	2164      	movs	r1, #100	@ 0x64
 8000714:	f005 f83e 	bl	8005794 <sniprintf>

      Debug_UART_Print(msg);
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff30 	bl	8000580 <Debug_UART_Print>

      HAL_Delay(500);  // Delay before next read
 8000720:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000724:	f000 fbd8 	bl	8000ed8 <HAL_Delay>
  {
 8000728:	e7c0      	b.n	80006ac <main+0x28>
 800072a:	bf00      	nop
 800072c:	080061a8 	.word	0x080061a8
 8000730:	080061c0 	.word	0x080061c0
 8000734:	200001e2 	.word	0x200001e2
 8000738:	080061e0 	.word	0x080061e0
 800073c:	200001d4 	.word	0x200001d4
 8000740:	080061fc 	.word	0x080061fc

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	@ 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	@ 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 f852 	bl	80057fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	4a28      	ldr	r2, [pc, #160]	@ (8000814 <SystemClock_Config+0xd0>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
 8000778:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <SystemClock_Config+0xd0>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000790:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <SystemClock_Config+0xd4>)
 8000792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000796:	6013      	str	r3, [r2, #0]
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ac:	2310      	movs	r3, #16
 80007ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b8:	2310      	movs	r3, #16
 80007ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c2:	2304      	movs	r3, #4
 80007c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c6:	2307      	movs	r3, #7
 80007c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 ff3c 	bl	800464c <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007da:	f000 f90d 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 f99e 	bl	8004b3c <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000806:	f000 f8f7 	bl	80009f8 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	@ 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	40007000 	.word	0x40007000

0800081c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_I2C1_Init+0x50>)
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <MX_I2C1_Init+0x54>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_I2C1_Init+0x50>)
 8000828:	4a12      	ldr	r2, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x58>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_I2C1_Init+0x50>)
 800083a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_I2C1_Init+0x50>)
 800085a:	f001 f9d7 	bl	8001c0c <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f8c8 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000078 	.word	0x20000078
 8000870:	40005400 	.word	0x40005400
 8000874:	000186a0 	.word	0x000186a0

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f004 fb64 	bl	8004f7c <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f89d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000012c 	.word	0x2000012c
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_DMA_Init+0x4c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <MX_DMA_Init+0x4c>)
 80008dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_DMA_Init+0x4c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	200b      	movs	r0, #11
 80008f4:	f000 fbef 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008f8:	200b      	movs	r0, #11
 80008fa:	f000 fc08 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2011      	movs	r0, #17
 8000904:	f000 fbe7 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000908:	2011      	movs	r0, #17
 800090a:	f000 fc00 	bl	800110e <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a2c      	ldr	r2, [pc, #176]	@ (80009ec <MX_GPIO_Init+0xd0>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a25      	ldr	r2, [pc, #148]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b23      	ldr	r3, [pc, #140]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a1e      	ldr	r2, [pc, #120]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_GPIO_Init+0xd0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <MX_GPIO_Init+0xd4>)
 80009a8:	f001 f8fc 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <MX_GPIO_Init+0xd8>)
 80009c4:	f000 ff6a 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c8:	2320      	movs	r3, #32
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_GPIO_Init+0xd4>)
 80009e0:	f000 ff5c 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020800 	.word	0x40020800

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a39      	ldr	r2, [pc, #228]	@ (8000b58 <HAL_I2C_MspInit+0x104>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d16c      	bne.n	8000b50 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b38      	ldr	r3, [pc, #224]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a37      	ldr	r2, [pc, #220]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	482c      	ldr	r0, [pc, #176]	@ (8000b60 <HAL_I2C_MspInit+0x10c>)
 8000ab0:	f000 fef4 	bl	800189c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a27      	ldr	r2, [pc, #156]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac4:	4b25      	ldr	r3, [pc, #148]	@ (8000b5c <HAL_I2C_MspInit+0x108>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ad0:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000ad2:	4a25      	ldr	r2, [pc, #148]	@ (8000b68 <HAL_I2C_MspInit+0x114>)
 8000ad4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000ad8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b04:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000b06:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b0c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b14:	4813      	ldr	r0, [pc, #76]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b16:	f000 fb15 	bl	8001144 <HAL_DMA_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8000b20:	f7ff ff6a 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_I2C_MspInit+0x110>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	201f      	movs	r0, #31
 8000b36:	f000 face 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b3a:	201f      	movs	r0, #31
 8000b3c:	f000 fae7 	bl	800110e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2020      	movs	r0, #32
 8000b46:	f000 fac6 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b4a:	2020      	movs	r0, #32
 8000b4c:	f000 fadf 	bl	800110e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400
 8000b64:	200000cc 	.word	0x200000cc
 8000b68:	40026010 	.word	0x40026010

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a30      	ldr	r2, [pc, #192]	@ (8000c4c <HAL_UART_MspInit+0xe0>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d15a      	bne.n	8000c44 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b2f      	ldr	r3, [pc, #188]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	4a2e      	ldr	r2, [pc, #184]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a27      	ldr	r2, [pc, #156]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <HAL_UART_MspInit+0xe4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	481c      	ldr	r0, [pc, #112]	@ (8000c54 <HAL_UART_MspInit+0xe8>)
 8000be2:	f000 fe5b 	bl	800189c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000be8:	4a1c      	ldr	r2, [pc, #112]	@ (8000c5c <HAL_UART_MspInit+0xf0>)
 8000bea:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bf2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bf6:	2240      	movs	r2, #64	@ 0x40
 8000bf8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c00:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c06:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c2a:	f000 fa8b 	bl	8001144 <HAL_DMA_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c34:	f7ff fee0 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c3e:	4a06      	ldr	r2, [pc, #24]	@ (8000c58 <HAL_UART_MspInit+0xec>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000
 8000c58:	20000174 	.word	0x20000174
 8000c5c:	400260a0 	.word	0x400260a0

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8ef 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <DMA1_Stream0_IRQHandler+0x10>)
 8000cc6:	f000 fb65 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000cc 	.word	0x200000cc

08000cd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <DMA1_Stream6_IRQHandler+0x10>)
 8000cda:	f000 fb5b 	bl	8001394 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000174 	.word	0x20000174

08000ce8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <I2C1_EV_IRQHandler+0x10>)
 8000cee:	f001 fb71 	bl	80023d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000078 	.word	0x20000078

08000cfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <I2C1_ER_IRQHandler+0x10>)
 8000d02:	f001 fcba 	bl	800267a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000078 	.word	0x20000078

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f004 fd64 	bl	800580c <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20018000 	.word	0x20018000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200001e4 	.word	0x200001e4
 8000d78:	20000338 	.word	0x20000338

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fd23 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc57 	bl	8000684 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de4:	08006288 	.word	0x08006288
  ldr r2, =_sbss
 8000de8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dec:	20000334 	.word	0x20000334

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fdec 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001e8 	.word	0x200001e8

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001e8 	.word	0x200001e8

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff feb6 	bl	8000ec0 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e099      	b.n	8001294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001180:	e00f      	b.n	80011a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001182:	f7ff fe9d 	bl	8000ec0 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b05      	cmp	r3, #5
 800118e:	d908      	bls.n	80011a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2220      	movs	r2, #32
 8001194:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2203      	movs	r2, #3
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e078      	b.n	8001294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e8      	bne.n	8001182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	4b38      	ldr	r3, [pc, #224]	@ (800129c <HAL_DMA_Init+0x158>)
 80011bc:	4013      	ands	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d107      	bne.n	800120c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	4313      	orrs	r3, r2
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4313      	orrs	r3, r2
 800120a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f023 0307 	bic.w	r3, r3, #7
 8001222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	4313      	orrs	r3, r2
 800122c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001232:	2b04      	cmp	r3, #4
 8001234:	d117      	bne.n	8001266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4313      	orrs	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00e      	beq.n	8001266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 faab 	bl	80017a4 <DMA_CheckFifoParam>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001262:	2301      	movs	r3, #1
 8001264:	e016      	b.n	8001294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 fa62 	bl	8001738 <DMA_CalcBaseAndBitshift>
 8001274:	4603      	mov	r3, r0
 8001276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127c:	223f      	movs	r2, #63	@ 0x3f
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	f010803f 	.word	0xf010803f

080012a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d101      	bne.n	80012c6 <HAL_DMA_Start_IT+0x26>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e040      	b.n	8001348 <HAL_DMA_Start_IT+0xa8>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12f      	bne.n	800133a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2202      	movs	r2, #2
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f9f4 	bl	80016dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012f8:	223f      	movs	r2, #63	@ 0x3f
 80012fa:	409a      	lsls	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0216 	orr.w	r2, r2, #22
 800130e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0208 	orr.w	r2, r2, #8
 8001326:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e005      	b.n	8001346 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001342:	2302      	movs	r3, #2
 8001344:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001346:	7dfb      	ldrb	r3, [r7, #23]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d004      	beq.n	800136e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00c      	b.n	8001388 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0201 	bic.w	r2, r2, #1
 8001384:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013a0:	4b8e      	ldr	r3, [pc, #568]	@ (80015dc <HAL_DMA_IRQHandler+0x248>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a8e      	ldr	r2, [pc, #568]	@ (80015e0 <HAL_DMA_IRQHandler+0x24c>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0a9b      	lsrs	r3, r3, #10
 80013ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013be:	2208      	movs	r2, #8
 80013c0:	409a      	lsls	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d01a      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0204 	bic.w	r2, r2, #4
 80013e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ec:	2208      	movs	r2, #8
 80013ee:	409a      	lsls	r2, r3
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	2201      	movs	r2, #1
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001422:	2201      	movs	r2, #1
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800143a:	2204      	movs	r2, #4
 800143c:	409a      	lsls	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001458:	2204      	movs	r2, #4
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001464:	f043 0204 	orr.w	r2, r3, #4
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	2210      	movs	r2, #16
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d043      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d03c      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	2210      	movs	r2, #16
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d108      	bne.n	80014c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d024      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
 80014c2:	e01f      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01b      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
 80014d4:	e016      	b.n	8001504 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0208 	bic.w	r2, r2, #8
 80014f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001508:	2220      	movs	r2, #32
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 808f 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8087 	beq.w	8001634 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152a:	2220      	movs	r2, #32
 800152c:	409a      	lsls	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b05      	cmp	r3, #5
 800153c:	d136      	bne.n	80015ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0216 	bic.w	r2, r2, #22
 800154c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800155c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	2b00      	cmp	r3, #0
 8001564:	d103      	bne.n	800156e <HAL_DMA_IRQHandler+0x1da>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0208 	bic.w	r2, r2, #8
 800157c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001582:	223f      	movs	r2, #63	@ 0x3f
 8001584:	409a      	lsls	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d07e      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
        }
        return;
 80015aa:	e079      	b.n	80016a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d031      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
 80015d8:	e02c      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
 80015da:	bf00      	nop
 80015dc:	20000000 	.word	0x20000000
 80015e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d023      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	4798      	blx	r3
 80015f4:	e01e      	b.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10f      	bne.n	8001624 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0210 	bic.w	r2, r2, #16
 8001612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d032      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d022      	beq.n	800168e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2205      	movs	r2, #5
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0201 	bic.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3301      	adds	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	429a      	cmp	r2, r3
 800166a:	d307      	bcc.n	800167c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f2      	bne.n	8001660 <HAL_DMA_IRQHandler+0x2cc>
 800167a:	e000      	b.n	800167e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800167c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e000      	b.n	80016a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016a0:	bf00      	nop
    }
  }
}
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80016f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b40      	cmp	r3, #64	@ 0x40
 8001708:	d108      	bne.n	800171c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800171a:	e007      	b.n	800172c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	60da      	str	r2, [r3, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	3b10      	subs	r3, #16
 8001748:	4a14      	ldr	r2, [pc, #80]	@ (800179c <DMA_CalcBaseAndBitshift+0x64>)
 800174a:	fba2 2303 	umull	r2, r3, r2, r3
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001752:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <DMA_CalcBaseAndBitshift+0x68>)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d909      	bls.n	800177a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	1d1a      	adds	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	659a      	str	r2, [r3, #88]	@ 0x58
 8001778:	e007      	b.n	800178a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001782:	f023 0303 	bic.w	r3, r3, #3
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	aaaaaaab 	.word	0xaaaaaaab
 80017a0:	0800623c 	.word	0x0800623c

080017a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11f      	bne.n	80017fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d856      	bhi.n	8001872 <DMA_CheckFifoParam+0xce>
 80017c4:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <DMA_CheckFifoParam+0x28>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017ef 	.word	0x080017ef
 80017d4:	080017dd 	.word	0x080017dd
 80017d8:	08001873 	.word	0x08001873
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d046      	beq.n	8001876 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ec:	e043      	b.n	8001876 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017f6:	d140      	bne.n	800187a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017fc:	e03d      	b.n	800187a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001806:	d121      	bne.n	800184c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d837      	bhi.n	800187e <DMA_CheckFifoParam+0xda>
 800180e:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <DMA_CheckFifoParam+0x70>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001825 	.word	0x08001825
 8001818:	0800182b 	.word	0x0800182b
 800181c:	08001825 	.word	0x08001825
 8001820:	0800183d 	.word	0x0800183d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
      break;
 8001828:	e030      	b.n	800188c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d025      	beq.n	8001882 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800183a:	e022      	b.n	8001882 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001844:	d11f      	bne.n	8001886 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800184a:	e01c      	b.n	8001886 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d903      	bls.n	800185a <DMA_CheckFifoParam+0xb6>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b03      	cmp	r3, #3
 8001856:	d003      	beq.n	8001860 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001858:	e018      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	73fb      	strb	r3, [r7, #15]
      break;
 800185e:	e015      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      break;
 8001870:	e00b      	b.n	800188a <DMA_CheckFifoParam+0xe6>
      break;
 8001872:	bf00      	nop
 8001874:	e00a      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;
 8001876:	bf00      	nop
 8001878:	e008      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;
 800187a:	bf00      	nop
 800187c:	e006      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
 8001880:	e004      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
 8001884:	e002      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;   
 8001886:	bf00      	nop
 8001888:	e000      	b.n	800188c <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
    }
  } 
  
  return status; 
 800188c:	7bfb      	ldrb	r3, [r7, #15]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	e159      	b.n	8001b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f040 8148 	bne.w	8001b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d005      	beq.n	80018ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d130      	bne.n	8001950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001924:	2201      	movs	r2, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0201 	and.w	r2, r3, #1
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b03      	cmp	r3, #3
 800195a:	d017      	beq.n	800198c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d123      	bne.n	80019e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	08da      	lsrs	r2, r3, #3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3208      	adds	r2, #8
 80019a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	69b9      	ldr	r1, [r7, #24]
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a2 	beq.w	8001b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b57      	ldr	r3, [pc, #348]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a56      	ldr	r2, [pc, #344]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b54      	ldr	r3, [pc, #336]	@ (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3e:	4a52      	ldr	r2, [pc, #328]	@ (8001b88 <HAL_GPIO_Init+0x2ec>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x202>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_GPIO_Init+0x2f4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x1fe>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a47      	ldr	r2, [pc, #284]	@ (8001b94 <HAL_GPIO_Init+0x2f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x1fa>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a46      	ldr	r2, [pc, #280]	@ (8001b98 <HAL_GPIO_Init+0x2fc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x1f6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a45      	ldr	r2, [pc, #276]	@ (8001b9c <HAL_GPIO_Init+0x300>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x1f2>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e008      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a8e:	2307      	movs	r3, #7
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e004      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_GPIO_Init+0x204>
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	f002 0203 	and.w	r2, r2, #3
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab0:	4935      	ldr	r1, [pc, #212]	@ (8001b88 <HAL_GPIO_Init+0x2ec>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abe:	4b38      	ldr	r3, [pc, #224]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b12:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b36:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba0 <HAL_GPIO_Init+0x304>)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	f67f aea2 	bls.w	80018b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40013c00 	.word	0x40013c00

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc0:	e003      	b.n	8001bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	041a      	lsls	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	619a      	str	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be8:	887a      	ldrh	r2, [r7, #2]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4013      	ands	r3, r2
 8001bee:	041a      	lsls	r2, r3, #16
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	887b      	ldrh	r3, [r7, #2]
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e12b      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe ff0e 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	@ 0x24
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c70:	f003 f95c 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a81      	ldr	r2, [pc, #516]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d807      	bhi.n	8001c90 <HAL_I2C_Init+0x84>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a80      	ldr	r2, [pc, #512]	@ (8001e84 <HAL_I2C_Init+0x278>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x92>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a7d      	ldr	r2, [pc, #500]	@ (8001e88 <HAL_I2C_Init+0x27c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0e7      	b.n	8001e76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a78      	ldr	r2, [pc, #480]	@ (8001e8c <HAL_I2C_Init+0x280>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_I2C_Init+0xd4>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	e009      	b.n	8001cf4 <HAL_I2C_Init+0xe8>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a69      	ldr	r2, [pc, #420]	@ (8001e90 <HAL_I2C_Init+0x284>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	495c      	ldr	r1, [pc, #368]	@ (8001e80 <HAL_I2C_Init+0x274>)
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d819      	bhi.n	8001d48 <HAL_I2C_Init+0x13c>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d22:	1c59      	adds	r1, r3, #1
 8001d24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d28:	400b      	ands	r3, r1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_I2C_Init+0x138>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e59      	subs	r1, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d42:	e051      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d44:	2304      	movs	r3, #4
 8001d46:	e04f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d111      	bne.n	8001d74 <HAL_I2C_Init+0x168>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e58      	subs	r0, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	440b      	add	r3, r1
 8001d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d62:	3301      	adds	r3, #1
 8001d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	e012      	b.n	8001d9a <HAL_I2C_Init+0x18e>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf0c      	ite	eq
 8001d94:	2301      	moveq	r3, #1
 8001d96:	2300      	movne	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Init+0x196>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e022      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10e      	bne.n	8001dc8 <HAL_I2C_Init+0x1bc>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e58      	subs	r0, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc6:	e00f      	b.n	8001de8 <HAL_I2C_Init+0x1dc>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	0099      	lsls	r1, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6809      	ldr	r1, [r1, #0]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6911      	ldr	r1, [r2, #16]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68d2      	ldr	r2, [r2, #12]
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	001e847f 	.word	0x001e847f
 8001e88:	003d08ff 	.word	0x003d08ff
 8001e8c:	431bde83 	.word	0x431bde83
 8001e90:	10624dd3 	.word	0x10624dd3

08001e94 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea6:	2b80      	cmp	r3, #128	@ 0x80
 8001ea8:	d103      	bne.n	8001eb2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eda:	f7fe fff1 	bl	8000ec0 <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	f040 80d9 	bne.w	80020a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2319      	movs	r3, #25
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	496d      	ldr	r1, [pc, #436]	@ (80020ac <HAL_I2C_Mem_Write+0x1ec>)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f002 f981 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e0cc      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_I2C_Mem_Write+0x56>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e0c5      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d007      	beq.n	8001f3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2221      	movs	r2, #33	@ 0x21
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	@ 0x40
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a4d      	ldr	r2, [pc, #308]	@ (80020b0 <HAL_I2C_Mem_Write+0x1f0>)
 8001f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f7e:	88f8      	ldrh	r0, [r7, #6]
 8001f80:	893a      	ldrh	r2, [r7, #8]
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f001 fdf4 	bl	8003b7c <I2C_RequestMemoryWrite>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d052      	beq.n	8002040 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e081      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f002 fa46 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d107      	bne.n	8001fc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e06b      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fce:	781a      	ldrb	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_I2C_Mem_Write+0x180>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d017      	beq.n	8002040 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1aa      	bne.n	8001f9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f002 fa39 	bl	80044c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800206e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e016      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e000      	b.n	80020a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020a0:	2302      	movs	r3, #2
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	00100002 	.word	0x00100002
 80020b0:	ffff0000 	.word	0xffff0000

080020b4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	@ 0x30
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ce:	f7fe fef7 	bl	8000ec0 <HAL_GetTick>
 80020d2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	f040 8172 	bne.w	80023ca <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80020e6:	4b93      	ldr	r3, [pc, #588]	@ (8002334 <HAL_I2C_Mem_Read_DMA+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	4a92      	ldr	r2, [pc, #584]	@ (8002338 <HAL_I2C_Mem_Read_DMA+0x284>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a1a      	lsrs	r2, r3, #8
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009a      	lsls	r2, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3b01      	subs	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d112      	bne.n	8002132 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f043 0220 	orr.w	r2, r3, #32
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800212e:	2302      	movs	r3, #2
 8002130:	e14c      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d0df      	beq.n	8002100 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_I2C_Mem_Read_DMA+0x9a>
 800214a:	2302      	movs	r3, #2
 800214c:	e13e      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d007      	beq.n	8002174 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2222      	movs	r2, #34	@ 0x22
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a62      	ldr	r2, [pc, #392]	@ (800233c <HAL_I2C_Mem_Read_DMA+0x288>)
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80021b6:	897a      	ldrh	r2, [r7, #10]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80cc 	beq.w	8002370 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02d      	beq.n	800223c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	4a56      	ldr	r2, [pc, #344]	@ (8002340 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80021e6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ec:	4a55      	ldr	r2, [pc, #340]	@ (8002344 <HAL_I2C_Mem_Read_DMA+0x290>)
 80021ee:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	2200      	movs	r2, #0
 80021fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	2200      	movs	r2, #0
 8002206:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220c:	2200      	movs	r2, #0
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3310      	adds	r3, #16
 800221a:	4619      	mov	r1, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	461a      	mov	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002226:	f7ff f83b 	bl	80012a0 <HAL_DMA_Start_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 8087 	bne.w	8002348 <HAL_I2C_Mem_Read_DMA+0x294>
 800223a:	e013      	b.n	8002264 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b3      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002264:	88f8      	ldrh	r0, [r7, #6]
 8002266:	893a      	ldrh	r2, [r7, #8]
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2323      	movs	r3, #35	@ 0x23
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4603      	mov	r3, r0
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 fd17 	bl	8003ca8 <I2C_RequestMemoryRead>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f863 	bl	8001350 <HAL_DMA_Abort_IT>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	2200      	movs	r2, #0
 8002296:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022a6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e081      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d108      	bne.n	80022e2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	e007      	b.n	80022f2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	e049      	b.n	80023c6 <HAL_I2C_Mem_Read_DMA+0x312>
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	14f8b589 	.word	0x14f8b589
 800233c:	ffff0000 	.word	0xffff0000
 8002340:	08003e79 	.word	0x08003e79
 8002344:	08004037 	.word	0x08004037
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	f043 0210 	orr.w	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e02d      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002370:	88f8      	ldrh	r0, [r7, #6]
 8002372:	893a      	ldrh	r2, [r7, #8]
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2323      	movs	r3, #35	@ 0x23
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4603      	mov	r3, r0
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f001 fc91 	bl	8003ca8 <I2C_RequestMemoryRead>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01d      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	@ 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b10      	cmp	r3, #16
 8002402:	d003      	beq.n	800240c <HAL_I2C_EV_IRQHandler+0x38>
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b40      	cmp	r3, #64	@ 0x40
 8002408:	f040 80b1 	bne.w	800256e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_I2C_EV_IRQHandler+0x6e>
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800242c:	d003      	beq.n	8002436 <HAL_I2C_EV_IRQHandler+0x62>
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002434:	d101      	bne.n	800243a <HAL_I2C_EV_IRQHandler+0x66>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x68>
 800243a:	2300      	movs	r3, #0
 800243c:	2b01      	cmp	r3, #1
 800243e:	f000 8114 	beq.w	800266a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x90>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f002 f8dd 	bl	8004616 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fd70 	bl	8002f42 <I2C_Master_SB>
 8002462:	e083      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_I2C_EV_IRQHandler+0xac>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fde8 	bl	800304e <I2C_Master_ADD10>
 800247e:	e075      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_I2C_EV_IRQHandler+0xc8>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fe04 	bl	80030a2 <I2C_Master_ADDR>
 800249a:	e067      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024b4:	f000 80db 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x10a>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x10a>
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f9cc 	bl	8002874 <I2C_MasterTransmit_TXE>
 80024dc:	e046      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80c2 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80bc 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024f6:	7bbb      	ldrb	r3, [r7, #14]
 80024f8:	2b21      	cmp	r3, #33	@ 0x21
 80024fa:	d103      	bne.n	8002504 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fa55 	bl	80029ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002502:	e0b4      	b.n	800266e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b40      	cmp	r3, #64	@ 0x40
 8002508:	f040 80b1 	bne.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fac3 	bl	8002a98 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002512:	e0ac      	b.n	800266e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002522:	f000 80a4 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0x178>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_I2C_EV_IRQHandler+0x178>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d103      	bne.n	800254c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fb3f 	bl	8002bc8 <I2C_MasterReceive_RXNE>
 800254a:	e00f      	b.n	800256c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 808b 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8085 	beq.w	800266e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 fbf7 	bl	8002d58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800256a:	e080      	b.n	800266e <HAL_I2C_EV_IRQHandler+0x29a>
 800256c:	e07f      	b.n	800266e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d004      	beq.n	8002580 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e007      	b.n	8002590 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_I2C_EV_IRQHandler+0x1ea>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00c      	beq.n	80025be <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 ffc2 	bl	8003540 <I2C_Slave_ADDR>
 80025bc:	e05a      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_I2C_EV_IRQHandler+0x206>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fffc 	bl	80035d0 <I2C_Slave_STOPF>
 80025d8:	e04c      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	2b21      	cmp	r3, #33	@ 0x21
 80025de:	d002      	beq.n	80025e6 <HAL_I2C_EV_IRQHandler+0x212>
 80025e0:	7bbb      	ldrb	r3, [r7, #14]
 80025e2:	2b29      	cmp	r3, #41	@ 0x29
 80025e4:	d120      	bne.n	8002628 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x238>
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_I2C_EV_IRQHandler+0x238>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fedd 	bl	80033c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800260a:	e032      	b.n	8002672 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d02d      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x29e>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800261c:	2b00      	cmp	r3, #0
 800261e:	d028      	beq.n	8002672 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 ff0c 	bl	800343e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002626:	e024      	b.n	8002672 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00d      	beq.n	800264e <HAL_I2C_EV_IRQHandler+0x27a>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_I2C_EV_IRQHandler+0x27a>
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 ff1a 	bl	8003480 <I2C_SlaveReceive_RXNE>
 800264c:	e012      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00d      	beq.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 ff4a 	bl	80034fc <I2C_SlaveReceive_BTF>
 8002668:	e004      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800266a:	bf00      	nop
 800266c:	e002      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800266e:	bf00      	nop
 8002670:	e000      	b.n	8002674 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002672:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b08a      	sub	sp, #40	@ 0x28
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800269c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00d      	beq.n	80026c4 <HAL_I2C_ER_IRQHandler+0x4a>
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_I2C_ER_IRQHandler+0x70>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80026e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03e      	beq.n	8002772 <HAL_I2C_ER_IRQHandler+0xf8>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d039      	beq.n	8002772 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002718:	7ebb      	ldrb	r3, [r7, #26]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d112      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xca>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10f      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xca>
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b21      	cmp	r3, #33	@ 0x21
 8002728:	d008      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b29      	cmp	r3, #41	@ 0x29
 800272e:	d005      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0xc2>
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b28      	cmp	r3, #40	@ 0x28
 8002734:	d106      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b21      	cmp	r3, #33	@ 0x21
 800273a:	d103      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 f877 	bl	8003830 <I2C_Slave_AF>
 8002742:	e016      	b.n	8002772 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800274c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d002      	beq.n	8002762 <HAL_I2C_ER_IRQHandler+0xe8>
 800275c:	7efb      	ldrb	r3, [r7, #27]
 800275e:	2b40      	cmp	r3, #64	@ 0x40
 8002760:	d107      	bne.n	8002772 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002770:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_ER_IRQHandler+0x11e>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002796:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f001 f8b4 	bl	8003918 <I2C_ITError>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	@ 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
 8002814:	4613      	mov	r3, r2
 8002816:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002882:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800288a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d150      	bne.n	800293c <I2C_MasterTransmit_TXE+0xc8>
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b21      	cmp	r3, #33	@ 0x21
 800289e:	d14d      	bne.n	800293c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d01d      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d01a      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028b2:	d016      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2211      	movs	r2, #17
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff6c 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e0:	e060      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002900:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	d107      	bne.n	800292c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff87 	bl	8002838 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800292a:	e03b      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff3f 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293a:	e033      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b21      	cmp	r3, #33	@ 0x21
 8002940:	d005      	beq.n	800294e <I2C_MasterTransmit_TXE+0xda>
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b40      	cmp	r3, #64	@ 0x40
 8002946:	d12d      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b22      	cmp	r3, #34	@ 0x22
 800294c:	d12a      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002966:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002968:	e01c      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d103      	bne.n	800297e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f88e 	bl	8002a98 <I2C_MemoryTransmit_TXE_BTF>
}
 800297c:	e012      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80029a2:	e7ff      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b21      	cmp	r3, #33	@ 0x21
 80029c4:	d164      	bne.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029f4:	e04c      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d01d      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d01a      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a08:	d016      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2211      	movs	r2, #17
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fec1 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a36:	e02b      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d107      	bne.n	8002a82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fedc 	bl	8002838 <HAL_I2C_MemTxCpltCallback>
}
 8002a80:	e006      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe94 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11d      	bne.n	8002aec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10b      	bne.n	8002ad0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002ace:	e077      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	121b      	asrs	r3, r3, #8
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aea:	e069      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10b      	bne.n	8002b0c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b0a:	e059      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d152      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b22      	cmp	r3, #34	@ 0x22
 8002b18:	d10d      	bne.n	8002b36 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b28:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b34:	e044      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b21      	cmp	r3, #33	@ 0x21
 8002b44:	d112      	bne.n	8002b6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b6a:	e029      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d124      	bne.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b21      	cmp	r3, #33	@ 0x21
 8002b7a:	d121      	bne.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b8a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe40 	bl	8002838 <HAL_I2C_MemTxCpltCallback>
}
 8002bb8:	e002      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff f96a 	bl	8001e94 <I2C_Flush_DR>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b22      	cmp	r3, #34	@ 0x22
 8002bda:	f040 80b9 	bne.w	8002d50 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d921      	bls.n	8002c36 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	f040 8096 	bne.w	8002d50 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c32:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c34:	e08c      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d07f      	beq.n	8002d3e <I2C_MasterReceive_RXNE+0x176>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <I2C_MasterReceive_RXNE+0x82>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d179      	bne.n	8002d3e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 fc82 	bl	8004554 <I2C_WaitOnSTOPRequestThroughIT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d14c      	bne.n	8002cf0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	d10a      	bne.n	8002cc6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd fcc0 	bl	8000644 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cc4:	e044      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d002      	beq.n	8002cda <I2C_MasterReceive_RXNE+0x112>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d103      	bne.n	8002ce2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce0:	e002      	b.n	8002ce8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2212      	movs	r2, #18
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fd6f 	bl	80027cc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cee:	e02f      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cfe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fd88 	bl	800284c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d3c:	e008      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4c:	605a      	str	r2, [r3, #4]
}
 8002d4e:	e7ff      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d11b      	bne.n	8002da8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002da6:	e0c8      	b.n	8002f3a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d129      	bne.n	8002e06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00a      	beq.n	8002dde <I2C_MasterReceive_BTF+0x86>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d007      	beq.n	8002dde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e04:	e099      	b.n	8002f3a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	f040 8081 	bne.w	8002f14 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d002      	beq.n	8002e1e <I2C_MasterReceive_BTF+0xc6>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d108      	bne.n	8002e30 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e019      	b.n	8002e64 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <I2C_MasterReceive_BTF+0xe4>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d108      	bne.n	8002e4e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e00a      	b.n	8002e64 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d007      	beq.n	8002e64 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ebe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d10a      	bne.n	8002eea <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fbae 	bl	8000644 <HAL_I2C_MemRxCpltCallback>
}
 8002ee8:	e027      	b.n	8002f3a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d002      	beq.n	8002efe <I2C_MasterReceive_BTF+0x1a6>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d103      	bne.n	8002f06 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f04:	e002      	b.n	8002f0c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2212      	movs	r2, #18
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fc5d 	bl	80027cc <HAL_I2C_MasterRxCpltCallback>
}
 8002f12:	e012      	b.n	8002f3a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d117      	bne.n	8002f86 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f6e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f70:	e067      	b.n	8003042 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
}
 8002f84:	e05d      	b.n	8003042 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f8e:	d133      	bne.n	8002ff8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b21      	cmp	r3, #33	@ 0x21
 8002f9a:	d109      	bne.n	8002fb0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fac:	611a      	str	r2, [r3, #16]
 8002fae:	e008      	b.n	8002fc2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d004      	beq.n	8002fd4 <I2C_Master_SB+0x92>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d032      	beq.n	8003042 <I2C_Master_SB+0x100>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d02d      	beq.n	8003042 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ff4:	605a      	str	r2, [r3, #4]
}
 8002ff6:	e024      	b.n	8003042 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10e      	bne.n	800301e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	b29b      	uxth	r3, r3
 8003006:	11db      	asrs	r3, r3, #7
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0306 	and.w	r3, r3, #6
 800300e:	b2db      	uxtb	r3, r3
 8003010:	f063 030f 	orn	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
}
 800301c:	e011      	b.n	8003042 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10d      	bne.n	8003042 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	b29b      	uxth	r3, r3
 800302c:	11db      	asrs	r3, r3, #7
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0306 	and.w	r3, r3, #6
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f063 030e 	orn	r3, r3, #14
 800303a:	b2da      	uxtb	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	611a      	str	r2, [r3, #16]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305a:	b2da      	uxtb	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <I2C_Master_ADD10+0x26>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d108      	bne.n	8003086 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00c      	beq.n	8003096 <I2C_Master_ADD10+0x48>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003094:	605a      	str	r2, [r3, #4]
  }
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b091      	sub	sp, #68	@ 0x44
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b22      	cmp	r3, #34	@ 0x22
 80030ca:	f040 8169 	bne.w	80033a0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10f      	bne.n	80030f6 <I2C_Master_ADDR+0x54>
 80030d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030da:	2b40      	cmp	r3, #64	@ 0x40
 80030dc:	d10b      	bne.n	80030f6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f4:	e160      	b.n	80033b8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <I2C_Master_ADDR+0x98>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003106:	d118      	bne.n	800313a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003108:	2300      	movs	r3, #0
 800310a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800312c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	651a      	str	r2, [r3, #80]	@ 0x50
 8003138:	e13e      	b.n	80033b8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d113      	bne.n	800316c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003144:	2300      	movs	r3, #0
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003158:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e115      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 808a 	bne.w	800328c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800317e:	d137      	bne.n	80031f0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319e:	d113      	bne.n	80031c8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	e0e7      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c8:	2300      	movs	r3, #0
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e0d3      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d02e      	beq.n	8003254 <I2C_Master_ADDR+0x1b2>
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d02b      	beq.n	8003254 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d102      	bne.n	8003208 <I2C_Master_ADDR+0x166>
 8003202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003204:	2b01      	cmp	r3, #1
 8003206:	d125      	bne.n	8003254 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	2b04      	cmp	r3, #4
 800320c:	d00e      	beq.n	800322c <I2C_Master_ADDR+0x18a>
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	2b02      	cmp	r3, #2
 8003212:	d00b      	beq.n	800322c <I2C_Master_ADDR+0x18a>
 8003214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003216:	2b10      	cmp	r3, #16
 8003218:	d008      	beq.n	800322c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e007      	b.n	800323c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800323a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	e0a1      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003262:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e085      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d14d      	bne.n	8003332 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	2b04      	cmp	r3, #4
 800329a:	d016      	beq.n	80032ca <I2C_Master_ADDR+0x228>
 800329c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d013      	beq.n	80032ca <I2C_Master_ADDR+0x228>
 80032a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d010      	beq.n	80032ca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e007      	b.n	80032da <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032d8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e8:	d117      	bne.n	800331a <I2C_Master_ADDR+0x278>
 80032ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032f0:	d00b      	beq.n	800330a <I2C_Master_ADDR+0x268>
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d008      	beq.n	800330a <I2C_Master_ADDR+0x268>
 80032f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d005      	beq.n	800330a <I2C_Master_ADDR+0x268>
 80032fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003300:	2b10      	cmp	r3, #16
 8003302:	d002      	beq.n	800330a <I2C_Master_ADDR+0x268>
 8003304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003306:	2b20      	cmp	r3, #32
 8003308:	d107      	bne.n	800331a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003318:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	e032      	b.n	8003398 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003340:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003350:	d117      	bne.n	8003382 <I2C_Master_ADDR+0x2e0>
 8003352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003354:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003358:	d00b      	beq.n	8003372 <I2C_Master_ADDR+0x2d0>
 800335a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335c:	2b01      	cmp	r3, #1
 800335e:	d008      	beq.n	8003372 <I2C_Master_ADDR+0x2d0>
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	2b08      	cmp	r3, #8
 8003364:	d005      	beq.n	8003372 <I2C_Master_ADDR+0x2d0>
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	2b10      	cmp	r3, #16
 800336a:	d002      	beq.n	8003372 <I2C_Master_ADDR+0x2d0>
 800336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336e:	2b20      	cmp	r3, #32
 8003370:	d107      	bne.n	8003382 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003380:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800339e:	e00b      	b.n	80033b8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	e7ff      	b.n	80033b8 <I2C_Master_ADDR+0x316>
 80033b8:	bf00      	nop
 80033ba:	3744      	adds	r7, #68	@ 0x44
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02b      	beq.n	8003436 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d114      	bne.n	8003436 <I2C_SlaveTransmit_TXE+0x72>
 800340c:	7bfb      	ldrb	r3, [r7, #15]
 800340e:	2b29      	cmp	r3, #41	@ 0x29
 8003410:	d111      	bne.n	8003436 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003420:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2221      	movs	r2, #33	@ 0x21
 8003426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2228      	movs	r2, #40	@ 0x28
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff f9d5 	bl	80027e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d011      	beq.n	8003474 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	781a      	ldrb	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02c      	beq.n	80034f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d114      	bne.n	80034f4 <I2C_SlaveReceive_RXNE+0x74>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ce:	d111      	bne.n	80034f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2222      	movs	r2, #34	@ 0x22
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2228      	movs	r2, #40	@ 0x28
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff f980 	bl	80027f4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800355a:	2b28      	cmp	r3, #40	@ 0x28
 800355c:	d125      	bne.n	80035aa <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800356c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	81bb      	strh	r3, [r7, #12]
 800358c:	e002      	b.n	8003594 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800359c:	89ba      	ldrh	r2, [r7, #12]
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	4619      	mov	r1, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff f930 	bl	8002808 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035a8:	e00e      	b.n	80035c8 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035f0:	2300      	movs	r3, #0
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362c:	d172      	bne.n	8003714 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b22      	cmp	r3, #34	@ 0x22
 8003632:	d002      	beq.n	800363a <I2C_Slave_STOPF+0x6a>
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b2a      	cmp	r3, #42	@ 0x2a
 8003638:	d135      	bne.n	80036a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f818 	bl	80016a8 <HAL_DMA_GetState>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d049      	beq.n	8003712 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	4a69      	ldr	r2, [pc, #420]	@ (8003828 <I2C_Slave_STOPF+0x258>)
 8003684:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fe60 	bl	8001350 <HAL_DMA_Abort_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03d      	beq.n	8003712 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a0:	4610      	mov	r0, r2
 80036a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a4:	e035      	b.n	8003712 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd ffe2 	bl	80016a8 <HAL_DMA_GetState>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d014      	beq.n	8003714 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ee:	4a4e      	ldr	r2, [pc, #312]	@ (8003828 <I2C_Slave_STOPF+0x258>)
 80036f0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fe2a 	bl	8001350 <HAL_DMA_Abort_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800370c:	4610      	mov	r0, r2
 800370e:	4798      	blx	r3
 8003710:	e000      	b.n	8003714 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003712:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03e      	beq.n	800379c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d112      	bne.n	8003752 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d112      	bne.n	8003786 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f8b7 	bl	8003918 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037aa:	e039      	b.n	8003820 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b0:	d109      	bne.n	80037c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2228      	movs	r2, #40	@ 0x28
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff f817 	bl	80027f4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b28      	cmp	r3, #40	@ 0x28
 80037d0:	d111      	bne.n	80037f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a15      	ldr	r2, [pc, #84]	@ (800382c <I2C_Slave_STOPF+0x25c>)
 80037d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff f818 	bl	8002824 <HAL_I2C_ListenCpltCallback>
}
 80037f4:	e014      	b.n	8003820 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	2b22      	cmp	r3, #34	@ 0x22
 80037fc:	d002      	beq.n	8003804 <I2C_Slave_STOPF+0x234>
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b22      	cmp	r3, #34	@ 0x22
 8003802:	d10d      	bne.n	8003820 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe ffea 	bl	80027f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	080040b1 	.word	0x080040b1
 800382c:	ffff0000 	.word	0xffff0000

08003830 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003844:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b08      	cmp	r3, #8
 800384a:	d002      	beq.n	8003852 <I2C_Slave_AF+0x22>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b20      	cmp	r3, #32
 8003850:	d129      	bne.n	80038a6 <I2C_Slave_AF+0x76>
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b28      	cmp	r3, #40	@ 0x28
 8003856:	d126      	bne.n	80038a6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a2e      	ldr	r2, [pc, #184]	@ (8003914 <I2C_Slave_AF+0xe4>)
 800385c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800386c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003876:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003886:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe ffc0 	bl	8002824 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038a4:	e031      	b.n	800390a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b21      	cmp	r3, #33	@ 0x21
 80038aa:	d129      	bne.n	8003900 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a19      	ldr	r2, [pc, #100]	@ (8003914 <I2C_Slave_AF+0xe4>)
 80038b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2221      	movs	r2, #33	@ 0x21
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038d6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fe face 	bl	8001e94 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fe ff71 	bl	80027e0 <HAL_I2C_SlaveTxCpltCallback>
}
 80038fe:	e004      	b.n	800390a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003908:	615a      	str	r2, [r3, #20]
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	ffff0000 	.word	0xffff0000

08003918 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003926:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800392e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003930:	7bbb      	ldrb	r3, [r7, #14]
 8003932:	2b10      	cmp	r3, #16
 8003934:	d002      	beq.n	800393c <I2C_ITError+0x24>
 8003936:	7bbb      	ldrb	r3, [r7, #14]
 8003938:	2b40      	cmp	r3, #64	@ 0x40
 800393a:	d10a      	bne.n	8003952 <I2C_ITError+0x3a>
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b22      	cmp	r3, #34	@ 0x22
 8003940:	d107      	bne.n	8003952 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003950:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003958:	2b28      	cmp	r3, #40	@ 0x28
 800395a:	d107      	bne.n	800396c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2228      	movs	r2, #40	@ 0x28
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800396a:	e015      	b.n	8003998 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397a:	d00a      	beq.n	8003992 <I2C_ITError+0x7a>
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b60      	cmp	r3, #96	@ 0x60
 8003980:	d007      	beq.n	8003992 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a6:	d162      	bne.n	8003a6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d020      	beq.n	8003a08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <I2C_ITError+0x25c>)
 80039cc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd fcbc 	bl	8001350 <HAL_DMA_Abort_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8089 	beq.w	8003af2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a02:	4610      	mov	r0, r2
 8003a04:	4798      	blx	r3
 8003a06:	e074      	b.n	8003af2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	4a59      	ldr	r2, [pc, #356]	@ (8003b74 <I2C_ITError+0x25c>)
 8003a0e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd fc9b 	bl	8001350 <HAL_DMA_Abort_IT>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d068      	beq.n	8003af2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2a:	2b40      	cmp	r3, #64	@ 0x40
 8003a2c:	d10b      	bne.n	8003a46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4798      	blx	r3
 8003a6c:	e041      	b.n	8003af2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b60      	cmp	r3, #96	@ 0x60
 8003a78:	d125      	bne.n	8003ac6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a92:	2b40      	cmp	r3, #64	@ 0x40
 8003a94:	d10b      	bne.n	8003aae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0201 	bic.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fece 	bl	8002860 <HAL_I2C_AbortCpltCallback>
 8003ac4:	e015      	b.n	8003af2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d10b      	bne.n	8003aec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fe fead 	bl	800284c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10e      	bne.n	8003b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d104      	bne.n	8003b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d113      	bne.n	8003b6c <I2C_ITError+0x254>
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b28      	cmp	r3, #40	@ 0x28
 8003b48:	d110      	bne.n	8003b6c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <I2C_ITError+0x260>)
 8003b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fe5c 	bl	8002824 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	080040b1 	.word	0x080040b1
 8003b78:	ffff0000 	.word	0xffff0000

08003b7c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	817b      	strh	r3, [r7, #10]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	813b      	strh	r3, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 fb24 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bcc:	d103      	bne.n	8003bd6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e05f      	b.n	8003c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bda:	897b      	ldrh	r3, [r7, #10]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	492d      	ldr	r1, [pc, #180]	@ (8003ca4 <I2C_RequestMemoryWrite+0x128>)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fb7f 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e04c      	b.n	8003c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c18:	6a39      	ldr	r1, [r7, #32]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fc0a 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00d      	beq.n	8003c42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d107      	bne.n	8003c3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e02b      	b.n	8003c9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	e021      	b.n	8003c98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c54:	893b      	ldrh	r3, [r7, #8]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c64:	6a39      	ldr	r1, [r7, #32]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fbe4 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00d      	beq.n	8003c8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d107      	bne.n	8003c8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e005      	b.n	8003c9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8e:	893b      	ldrh	r3, [r7, #8]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	00010002 	.word	0x00010002

08003ca8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	813b      	strh	r3, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fa86 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d08:	d103      	bne.n	8003d12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0aa      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d16:	897b      	ldrh	r3, [r7, #10]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	4952      	ldr	r1, [pc, #328]	@ (8003e74 <I2C_RequestMemoryRead+0x1cc>)
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fae1 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e097      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb6c 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e076      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d84:	893b      	ldrh	r3, [r7, #8]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]
 8003d8e:	e021      	b.n	8003dd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	6a39      	ldr	r1, [r7, #32]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 fb46 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d107      	bne.n	8003dc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e050      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dca:	893b      	ldrh	r3, [r7, #8]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd6:	6a39      	ldr	r1, [r7, #32]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fb2b 	bl	8004434 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d107      	bne.n	8003dfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e035      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f9ef 	bl	8004200 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e36:	d103      	bne.n	8003e40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e013      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e44:	897b      	ldrh	r3, [r7, #10]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	6a3a      	ldr	r2, [r7, #32]
 8003e58:	4906      	ldr	r1, [pc, #24]	@ (8003e74 <I2C_RequestMemoryRead+0x1cc>)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 fa4a 	bl	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	00010002 	.word	0x00010002

08003e78 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e84:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e94:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	2200      	movs	r2, #0
 8003eba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003ed2:	2b21      	cmp	r3, #33	@ 0x21
 8003ed4:	d007      	beq.n	8003ee6 <I2C_DMAXferCplt+0x6e>
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003edc:	2b22      	cmp	r3, #34	@ 0x22
 8003ede:	d131      	bne.n	8003f44 <I2C_DMAXferCplt+0xcc>
 8003ee0:	7cbb      	ldrb	r3, [r7, #18]
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d12e      	bne.n	8003f44 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b29      	cmp	r3, #41	@ 0x29
 8003f00:	d10a      	bne.n	8003f18 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2228      	movs	r2, #40	@ 0x28
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7fe fc65 	bl	80027e0 <HAL_I2C_SlaveTxCpltCallback>
 8003f16:	e00c      	b.n	8003f32 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1c:	d109      	bne.n	8003f32 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2222      	movs	r2, #34	@ 0x22
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2228      	movs	r2, #40	@ 0x28
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7fe fc61 	bl	80027f4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f40:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f42:	e074      	b.n	800402e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d06e      	beq.n	800402e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f68:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f80:	d009      	beq.n	8003f96 <I2C_DMAXferCplt+0x11e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d006      	beq.n	8003f96 <I2C_DMAXferCplt+0x11e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f8e:	d002      	beq.n	8003f96 <I2C_DMAXferCplt+0x11e>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d107      	bne.n	8003fa6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fa4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fb4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003fd4:	6978      	ldr	r0, [r7, #20]
 8003fd6:	f7fe fc39 	bl	800284c <HAL_I2C_ErrorCallback>
}
 8003fda:	e028      	b.n	800402e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d10a      	bne.n	8004006 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7fc fb20 	bl	8000644 <HAL_I2C_MemRxCpltCallback>
}
 8004004:	e013      	b.n	800402e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d002      	beq.n	800401a <I2C_DMAXferCplt+0x1a2>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b20      	cmp	r3, #32
 8004018:	d103      	bne.n	8004022 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004020:	e002      	b.n	8004028 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2212      	movs	r2, #18
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004028:	6978      	ldr	r0, [r7, #20]
 800402a:	f7fe fbcf 	bl	80027cc <HAL_I2C_MasterRxCpltCallback>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	2200      	movs	r2, #0
 8004052:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	2200      	movs	r2, #0
 8004062:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7fd fb2d 	bl	80016c4 <HAL_DMA_GetError>
 800406a:	4603      	mov	r3, r0
 800406c:	2b02      	cmp	r3, #2
 800406e:	d01b      	beq.n	80040a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7fe fbd2 	bl	800284c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80040ca:	4b4b      	ldr	r3, [pc, #300]	@ (80041f8 <I2C_DMAAbort+0x148>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	08db      	lsrs	r3, r3, #3
 80040d0:	4a4a      	ldr	r2, [pc, #296]	@ (80041fc <I2C_DMAAbort+0x14c>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0a1a      	lsrs	r2, r3, #8
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	00da      	lsls	r2, r3, #3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	f043 0220 	orr.w	r2, r3, #32
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80040f6:	e00a      	b.n	800410e <I2C_DMAAbort+0x5e>
    }
    count--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800410c:	d0ea      	beq.n	80040e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	2200      	movs	r2, #0
 800411c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412a:	2200      	movs	r2, #0
 800412c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2200      	movs	r2, #0
 8004142:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004150:	2200      	movs	r2, #0
 8004152:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	2200      	movs	r2, #0
 8004162:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0201 	bic.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b60      	cmp	r3, #96	@ 0x60
 800417e:	d10e      	bne.n	800419e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f7fe fb62 	bl	8002860 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800419c:	e027      	b.n	80041ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041a4:	2b28      	cmp	r3, #40	@ 0x28
 80041a6:	d117      	bne.n	80041d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2228      	movs	r2, #40	@ 0x28
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80041d6:	e007      	b.n	80041e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7fe fb2f 	bl	800284c <HAL_I2C_ErrorCallback>
}
 80041ee:	bf00      	nop
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000
 80041fc:	14f8b589 	.word	0x14f8b589

08004200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004210:	e048      	b.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d044      	beq.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fc fe51 	bl	8000ec0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d139      	bne.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b01      	cmp	r3, #1
 8004238:	d10d      	bne.n	8004256 <I2C_WaitOnFlagUntilTimeout+0x56>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	e00c      	b.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	43da      	mvns	r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	d116      	bne.n	80042a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	f043 0220 	orr.w	r2, r3, #32
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e023      	b.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10d      	bne.n	80042ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	43da      	mvns	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	e00c      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	43da      	mvns	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4013      	ands	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d093      	beq.n	8004212 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004302:	e071      	b.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004312:	d123      	bne.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004322:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800432c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e067      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d041      	beq.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004364:	f7fc fdac 	bl	8000ec0 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d302      	bcc.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d136      	bne.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10c      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e00b      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d4:	f043 0220 	orr.w	r2, r3, #32
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e021      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10c      	bne.n	800440c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	43da      	mvns	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4013      	ands	r3, r2
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e00b      	b.n	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	f47f af6d 	bne.w	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004440:	e034      	b.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f8b8 	bl	80045b8 <I2C_IsAcknowledgeFailed>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e034      	b.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d028      	beq.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fc fd31 	bl	8000ec0 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d11d      	bne.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d016      	beq.n	80044ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e007      	b.n	80044bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	d1c3      	bne.n	8004442 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d0:	e034      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 f870 	bl	80045b8 <I2C_IsAcknowledgeFailed>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e034      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e8:	d028      	beq.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ea:	f7fc fce9 	bl	8000ec0 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d302      	bcc.n	8004500 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11d      	bne.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b04      	cmp	r3, #4
 800450c:	d016      	beq.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e007      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d1c3      	bne.n	80044d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	08db      	lsrs	r3, r3, #3
 8004566:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	0a1a      	lsrs	r2, r3, #8
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3b01      	subs	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f043 0220 	orr.w	r2, r3, #32
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e008      	b.n	80045a4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800459c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045a0:	d0e9      	beq.n	8004576 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000000 	.word	0x20000000
 80045b4:	14f8b589 	.word	0x14f8b589

080045b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ce:	d11b      	bne.n	8004608 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	f043 0204 	orr.w	r2, r3, #4
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004626:	d103      	bne.n	8004630 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800462e:	e007      	b.n	8004640 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004638:	d102      	bne.n	8004640 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2208      	movs	r2, #8
 800463e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e267      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800466a:	4b88      	ldr	r3, [pc, #544]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4b85      	ldr	r3, [pc, #532]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b82      	ldr	r3, [pc, #520]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b7e      	ldr	r3, [pc, #504]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e242      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b76      	ldr	r3, [pc, #472]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a75      	ldr	r2, [pc, #468]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b70      	ldr	r3, [pc, #448]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6f      	ldr	r2, [pc, #444]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b6d      	ldr	r3, [pc, #436]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6c      	ldr	r2, [pc, #432]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b69      	ldr	r3, [pc, #420]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a68      	ldr	r2, [pc, #416]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b66      	ldr	r3, [pc, #408]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fc fbdc 	bl	8000ec0 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800470c:	f7fc fbd8 	bl	8000ec0 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	@ 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e207      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b5b      	ldr	r3, [pc, #364]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc fbc8 	bl	8000ec0 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fc fbc4 	bl	8000ec0 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	@ 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f3      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b51      	ldr	r3, [pc, #324]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004762:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b47      	ldr	r3, [pc, #284]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b44      	ldr	r3, [pc, #272]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b41      	ldr	r3, [pc, #260]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c7      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b3b      	ldr	r3, [pc, #236]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4937      	ldr	r1, [pc, #220]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b34      	ldr	r3, [pc, #208]	@ (8004890 <HAL_RCC_OscConfig+0x244>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fc fb7d 	bl	8000ec0 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fc fb79 	bl	8000ec0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a8      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4925      	ldr	r1, [pc, #148]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <HAL_RCC_OscConfig+0x244>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fc fb5c 	bl	8000ec0 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480c:	f7fc fb58 	bl	8000ec0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e187      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b1b      	ldr	r3, [pc, #108]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d036      	beq.n	80048a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x248>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fc fb3c 	bl	8000ec0 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fc fb38 	bl	8000ec0 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e167      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_OscConfig+0x240>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e01b      	b.n	80048a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <HAL_RCC_OscConfig+0x248>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fc fb25 	bl	8000ec0 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e00e      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800487a:	f7fc fb21 	bl	8000ec0 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d907      	bls.n	8004898 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e150      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
 800488c:	40023800 	.word	0x40023800
 8004890:	42470000 	.word	0x42470000
 8004894:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ea      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8097 	beq.w	80049e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b81      	ldr	r3, [pc, #516]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b7d      	ldr	r3, [pc, #500]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	4a7c      	ldr	r2, [pc, #496]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048d2:	4b7a      	ldr	r3, [pc, #488]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b77      	ldr	r3, [pc, #476]	@ (8004ac0 <HAL_RCC_OscConfig+0x474>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d118      	bne.n	8004920 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ee:	4b74      	ldr	r3, [pc, #464]	@ (8004ac0 <HAL_RCC_OscConfig+0x474>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a73      	ldr	r2, [pc, #460]	@ (8004ac0 <HAL_RCC_OscConfig+0x474>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fc fae1 	bl	8000ec0 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004902:	f7fc fadd 	bl	8000ec0 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e10c      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac0 <HAL_RCC_OscConfig+0x474>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x2ea>
 8004928:	4b64      	ldr	r3, [pc, #400]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a63      	ldr	r2, [pc, #396]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
 8004934:	e01c      	b.n	8004970 <HAL_RCC_OscConfig+0x324>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b05      	cmp	r3, #5
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x30c>
 800493e:	4b5f      	ldr	r3, [pc, #380]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004942:	4a5e      	ldr	r2, [pc, #376]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6713      	str	r3, [r2, #112]	@ 0x70
 800494a:	4b5c      	ldr	r3, [pc, #368]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494e:	4a5b      	ldr	r2, [pc, #364]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6713      	str	r3, [r2, #112]	@ 0x70
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0x324>
 8004958:	4b58      	ldr	r3, [pc, #352]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800495c:	4a57      	ldr	r2, [pc, #348]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6713      	str	r3, [r2, #112]	@ 0x70
 8004964:	4b55      	ldr	r3, [pc, #340]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004968:	4a54      	ldr	r2, [pc, #336]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 800496a:	f023 0304 	bic.w	r3, r3, #4
 800496e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fc faa2 	bl	8000ec0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	e00a      	b.n	8004996 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fc fa9e 	bl	8000ec0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0cb      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004996:	4b49      	ldr	r3, [pc, #292]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ee      	beq.n	8004980 <HAL_RCC_OscConfig+0x334>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a4:	f7fc fa8c 	bl	8000ec0 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fc fa88 	bl	8000ec0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0b5      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c2:	4b3e      	ldr	r3, [pc, #248]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ee      	bne.n	80049ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d4:	4b39      	ldr	r3, [pc, #228]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	4a38      	ldr	r2, [pc, #224]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80049da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80a1 	beq.w	8004b2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ea:	4b34      	ldr	r3, [pc, #208]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d05c      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d141      	bne.n	8004a82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fe:	4b31      	ldr	r3, [pc, #196]	@ (8004ac4 <HAL_RCC_OscConfig+0x478>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fc fa5c 	bl	8000ec0 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fc fa58 	bl	8000ec0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e087      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1e:	4b27      	ldr	r3, [pc, #156]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	3b01      	subs	r3, #1
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4c:	061b      	lsls	r3, r3, #24
 8004a4e:	491b      	ldr	r1, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <HAL_RCC_OscConfig+0x478>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5a:	f7fc fa31 	bl	8000ec0 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc fa2d 	bl	8000ec0 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e05c      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x416>
 8004a80:	e054      	b.n	8004b2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a82:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <HAL_RCC_OscConfig+0x478>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fc fa1a 	bl	8000ec0 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fc fa16 	bl	8000ec0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e045      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa2:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_RCC_OscConfig+0x470>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x444>
 8004aae:	e03d      	b.n	8004b2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d107      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e038      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d028      	beq.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d121      	bne.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d11a      	bne.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004afe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	3b01      	subs	r3, #1
 8004b12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc f948 	bl	8000ec0 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc f944 	bl	8000ec0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	@ (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	@ (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	@ (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fc f8a8 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	08006224 	.word	0x08006224
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d0c:	b094      	sub	sp, #80	@ 0x50
 8004d0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d20:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 030c 	and.w	r3, r3, #12
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x40>
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	f200 80e1 	bhi.w	8004ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0x34>
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d003      	beq.n	8004d42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d3a:	e0db      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3c:	4b73      	ldr	r3, [pc, #460]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d40:	e0db      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d42:	4b73      	ldr	r3, [pc, #460]	@ (8004f10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d46:	e0d8      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d48:	4b6f      	ldr	r3, [pc, #444]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d52:	4b6d      	ldr	r3, [pc, #436]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d063      	beq.n	8004e26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	2200      	movs	r2, #0
 8004d66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d72:	2300      	movs	r3, #0
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f04f 0000 	mov.w	r0, #0
 8004d82:	f04f 0100 	mov.w	r1, #0
 8004d86:	0159      	lsls	r1, r3, #5
 8004d88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8c:	0150      	lsls	r0, r2, #5
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4621      	mov	r1, r4
 8004d94:	1a51      	subs	r1, r2, r1
 8004d96:	6139      	str	r1, [r7, #16]
 8004d98:	4629      	mov	r1, r5
 8004d9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dac:	4659      	mov	r1, fp
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004db6:	4651      	mov	r1, sl
 8004db8:	018a      	lsls	r2, r1, #6
 8004dba:	4651      	mov	r1, sl
 8004dbc:	ebb2 0801 	subs.w	r8, r2, r1
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	eb63 0901 	sbc.w	r9, r3, r1
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dda:	4690      	mov	r8, r2
 8004ddc:	4699      	mov	r9, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	eb18 0303 	adds.w	r3, r8, r3
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	462b      	mov	r3, r5
 8004de8:	eb49 0303 	adc.w	r3, r9, r3
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	024b      	lsls	r3, r1, #9
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e04:	4621      	mov	r1, r4
 8004e06:	024a      	lsls	r2, r1, #9
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e0e:	2200      	movs	r2, #0
 8004e10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e18:	f7fb fa3a 	bl	8000290 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e24:	e058      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e26:	4b38      	ldr	r3, [pc, #224]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	099b      	lsrs	r3, r3, #6
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	4611      	mov	r1, r2
 8004e32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e40:	4642      	mov	r2, r8
 8004e42:	464b      	mov	r3, r9
 8004e44:	f04f 0000 	mov.w	r0, #0
 8004e48:	f04f 0100 	mov.w	r1, #0
 8004e4c:	0159      	lsls	r1, r3, #5
 8004e4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e52:	0150      	lsls	r0, r2, #5
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4641      	mov	r1, r8
 8004e5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e78:	ebb2 040a 	subs.w	r4, r2, sl
 8004e7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	00eb      	lsls	r3, r5, #3
 8004e8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e8e:	00e2      	lsls	r2, r4, #3
 8004e90:	4614      	mov	r4, r2
 8004e92:	461d      	mov	r5, r3
 8004e94:	4643      	mov	r3, r8
 8004e96:	18e3      	adds	r3, r4, r3
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	028b      	lsls	r3, r1, #10
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb8:	4621      	mov	r1, r4
 8004eba:	028a      	lsls	r2, r1, #10
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	61fa      	str	r2, [r7, #28]
 8004ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ecc:	f7fb f9e0 	bl	8000290 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3750      	adds	r7, #80	@ 0x50
 8004f00:	46bd      	mov	sp, r7
 8004f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	007a1200 	.word	0x007a1200

08004f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f18:	4b03      	ldr	r3, [pc, #12]	@ (8004f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	20000000 	.word	0x20000000

08004f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f30:	f7ff fff0 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f34:	4602      	mov	r2, r0
 8004f36:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	0a9b      	lsrs	r3, r3, #10
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	4903      	ldr	r1, [pc, #12]	@ (8004f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	08006234 	.word	0x08006234

08004f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f58:	f7ff ffdc 	bl	8004f14 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	0b5b      	lsrs	r3, r3, #13
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	4903      	ldr	r1, [pc, #12]	@ (8004f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6a:	5ccb      	ldrb	r3, [r1, r3]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40023800 	.word	0x40023800
 8004f78:	08006234 	.word	0x08006234

08004f7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fb fde2 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	@ 0x24
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f973 	bl	80052ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695a      	ldr	r2, [r3, #20]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b08a      	sub	sp, #40	@ 0x28
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b20      	cmp	r3, #32
 800503a:	d175      	bne.n	8005128 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_UART_Transmit+0x2c>
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e06e      	b.n	800512a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2221      	movs	r2, #33	@ 0x21
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800505a:	f7fb ff31 	bl	8000ec0 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005074:	d108      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	e003      	b.n	8005090 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005090:	e02e      	b.n	80050f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2200      	movs	r2, #0
 800509a:	2180      	movs	r1, #128	@ 0x80
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f848 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e03a      	b.n	800512a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3302      	adds	r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	e007      	b.n	80050e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1cb      	bne.n	8005092 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2200      	movs	r2, #0
 8005102:	2140      	movs	r1, #64	@ 0x40
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f814 	bl	8005132 <UART_WaitOnFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e006      	b.n	800512a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005142:	e03b      	b.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514a:	d037      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514c:	f7fb feb8 	bl	8000ec0 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	6a3a      	ldr	r2, [r7, #32]
 8005158:	429a      	cmp	r2, r3
 800515a:	d302      	bcc.n	8005162 <UART_WaitOnFlagUntilTimeout+0x30>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e03a      	b.n	80051dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d020      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d01d      	beq.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b08      	cmp	r3, #8
 800518c:	d116      	bne.n	80051bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f81d 	bl	80051e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2208      	movs	r2, #8
 80051ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e00f      	b.n	80051dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d0b4      	beq.n	8005144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b095      	sub	sp, #84	@ 0x54
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800520c:	643a      	str	r2, [r7, #64]	@ 0x40
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	2b01      	cmp	r3, #1
 800525a:	d119      	bne.n	8005290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	60bb      	str	r3, [r7, #8]
   return(result);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0310 	bic.w	r3, r3, #16
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527c:	61ba      	str	r2, [r7, #24]
 800527e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	613b      	str	r3, [r7, #16]
   return(result);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800529e:	bf00      	nop
 80052a0:	3754      	adds	r7, #84	@ 0x54
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b0:	b0c0      	sub	sp, #256	@ 0x100
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c8:	68d9      	ldr	r1, [r3, #12]
 80052ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	ea40 0301 	orr.w	r3, r0, r1
 80052d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	431a      	orrs	r2, r3
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005304:	f021 010c 	bic.w	r1, r1, #12
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005312:	430b      	orrs	r3, r1
 8005314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005326:	6999      	ldr	r1, [r3, #24]
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	ea40 0301 	orr.w	r3, r0, r1
 8005332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b8f      	ldr	r3, [pc, #572]	@ (8005578 <UART_SetConfig+0x2cc>)
 800533c:	429a      	cmp	r2, r3
 800533e:	d005      	beq.n	800534c <UART_SetConfig+0xa0>
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b8d      	ldr	r3, [pc, #564]	@ (800557c <UART_SetConfig+0x2d0>)
 8005348:	429a      	cmp	r2, r3
 800534a:	d104      	bne.n	8005356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7ff fe02 	bl	8004f54 <HAL_RCC_GetPCLK2Freq>
 8005350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005354:	e003      	b.n	800535e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005356:	f7ff fde9 	bl	8004f2c <HAL_RCC_GetPCLK1Freq>
 800535a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005368:	f040 810c 	bne.w	8005584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800536c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005370:	2200      	movs	r2, #0
 8005372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800537a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800537e:	4622      	mov	r2, r4
 8005380:	462b      	mov	r3, r5
 8005382:	1891      	adds	r1, r2, r2
 8005384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005386:	415b      	adcs	r3, r3
 8005388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800538a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800538e:	4621      	mov	r1, r4
 8005390:	eb12 0801 	adds.w	r8, r2, r1
 8005394:	4629      	mov	r1, r5
 8005396:	eb43 0901 	adc.w	r9, r3, r1
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ae:	4690      	mov	r8, r2
 80053b0:	4699      	mov	r9, r3
 80053b2:	4623      	mov	r3, r4
 80053b4:	eb18 0303 	adds.w	r3, r8, r3
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053bc:	462b      	mov	r3, r5
 80053be:	eb49 0303 	adc.w	r3, r9, r3
 80053c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053da:	460b      	mov	r3, r1
 80053dc:	18db      	adds	r3, r3, r3
 80053de:	653b      	str	r3, [r7, #80]	@ 0x50
 80053e0:	4613      	mov	r3, r2
 80053e2:	eb42 0303 	adc.w	r3, r2, r3
 80053e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053f0:	f7fa ff4e 	bl	8000290 <__aeabi_uldivmod>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4b61      	ldr	r3, [pc, #388]	@ (8005580 <UART_SetConfig+0x2d4>)
 80053fa:	fba3 2302 	umull	r2, r3, r3, r2
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	011c      	lsls	r4, r3, #4
 8005402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800540c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005414:	4642      	mov	r2, r8
 8005416:	464b      	mov	r3, r9
 8005418:	1891      	adds	r1, r2, r2
 800541a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800541c:	415b      	adcs	r3, r3
 800541e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005424:	4641      	mov	r1, r8
 8005426:	eb12 0a01 	adds.w	sl, r2, r1
 800542a:	4649      	mov	r1, r9
 800542c:	eb43 0b01 	adc.w	fp, r3, r1
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800543c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005444:	4692      	mov	sl, r2
 8005446:	469b      	mov	fp, r3
 8005448:	4643      	mov	r3, r8
 800544a:	eb1a 0303 	adds.w	r3, sl, r3
 800544e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005452:	464b      	mov	r3, r9
 8005454:	eb4b 0303 	adc.w	r3, fp, r3
 8005458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800546c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005470:	460b      	mov	r3, r1
 8005472:	18db      	adds	r3, r3, r3
 8005474:	643b      	str	r3, [r7, #64]	@ 0x40
 8005476:	4613      	mov	r3, r2
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	647b      	str	r3, [r7, #68]	@ 0x44
 800547e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005486:	f7fa ff03 	bl	8000290 <__aeabi_uldivmod>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4611      	mov	r1, r2
 8005490:	4b3b      	ldr	r3, [pc, #236]	@ (8005580 <UART_SetConfig+0x2d4>)
 8005492:	fba3 2301 	umull	r2, r3, r3, r1
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2264      	movs	r2, #100	@ 0x64
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	1acb      	subs	r3, r1, r3
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054a6:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <UART_SetConfig+0x2d4>)
 80054a8:	fba3 2302 	umull	r2, r3, r3, r2
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054b4:	441c      	add	r4, r3
 80054b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054c8:	4642      	mov	r2, r8
 80054ca:	464b      	mov	r3, r9
 80054cc:	1891      	adds	r1, r2, r2
 80054ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054d0:	415b      	adcs	r3, r3
 80054d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054d8:	4641      	mov	r1, r8
 80054da:	1851      	adds	r1, r2, r1
 80054dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80054de:	4649      	mov	r1, r9
 80054e0:	414b      	adcs	r3, r1
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054f0:	4659      	mov	r1, fp
 80054f2:	00cb      	lsls	r3, r1, #3
 80054f4:	4651      	mov	r1, sl
 80054f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054fa:	4651      	mov	r1, sl
 80054fc:	00ca      	lsls	r2, r1, #3
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	4603      	mov	r3, r0
 8005504:	4642      	mov	r2, r8
 8005506:	189b      	adds	r3, r3, r2
 8005508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800550c:	464b      	mov	r3, r9
 800550e:	460a      	mov	r2, r1
 8005510:	eb42 0303 	adc.w	r3, r2, r3
 8005514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800552c:	460b      	mov	r3, r1
 800552e:	18db      	adds	r3, r3, r3
 8005530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005532:	4613      	mov	r3, r2
 8005534:	eb42 0303 	adc.w	r3, r2, r3
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800553e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005542:	f7fa fea5 	bl	8000290 <__aeabi_uldivmod>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <UART_SetConfig+0x2d4>)
 800554c:	fba3 1302 	umull	r1, r3, r3, r2
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	2164      	movs	r1, #100	@ 0x64
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	3332      	adds	r3, #50	@ 0x32
 800555e:	4a08      	ldr	r2, [pc, #32]	@ (8005580 <UART_SetConfig+0x2d4>)
 8005560:	fba2 2303 	umull	r2, r3, r2, r3
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	f003 0207 	and.w	r2, r3, #7
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4422      	add	r2, r4
 8005572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005574:	e106      	b.n	8005784 <UART_SetConfig+0x4d8>
 8005576:	bf00      	nop
 8005578:	40011000 	.word	0x40011000
 800557c:	40011400 	.word	0x40011400
 8005580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005588:	2200      	movs	r2, #0
 800558a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800558e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005596:	4642      	mov	r2, r8
 8005598:	464b      	mov	r3, r9
 800559a:	1891      	adds	r1, r2, r2
 800559c:	6239      	str	r1, [r7, #32]
 800559e:	415b      	adcs	r3, r3
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055a6:	4641      	mov	r1, r8
 80055a8:	1854      	adds	r4, r2, r1
 80055aa:	4649      	mov	r1, r9
 80055ac:	eb43 0501 	adc.w	r5, r3, r1
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	00eb      	lsls	r3, r5, #3
 80055ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055be:	00e2      	lsls	r2, r4, #3
 80055c0:	4614      	mov	r4, r2
 80055c2:	461d      	mov	r5, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	18e3      	adds	r3, r4, r3
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055cc:	464b      	mov	r3, r9
 80055ce:	eb45 0303 	adc.w	r3, r5, r3
 80055d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055f2:	4629      	mov	r1, r5
 80055f4:	008b      	lsls	r3, r1, #2
 80055f6:	4621      	mov	r1, r4
 80055f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055fc:	4621      	mov	r1, r4
 80055fe:	008a      	lsls	r2, r1, #2
 8005600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005604:	f7fa fe44 	bl	8000290 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4b60      	ldr	r3, [pc, #384]	@ (8005790 <UART_SetConfig+0x4e4>)
 800560e:	fba3 2302 	umull	r2, r3, r3, r2
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	011c      	lsls	r4, r3, #4
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	1891      	adds	r1, r2, r2
 800562e:	61b9      	str	r1, [r7, #24]
 8005630:	415b      	adcs	r3, r3
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005638:	4641      	mov	r1, r8
 800563a:	1851      	adds	r1, r2, r1
 800563c:	6139      	str	r1, [r7, #16]
 800563e:	4649      	mov	r1, r9
 8005640:	414b      	adcs	r3, r1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005650:	4659      	mov	r1, fp
 8005652:	00cb      	lsls	r3, r1, #3
 8005654:	4651      	mov	r1, sl
 8005656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800565a:	4651      	mov	r1, sl
 800565c:	00ca      	lsls	r2, r1, #3
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	4603      	mov	r3, r0
 8005664:	4642      	mov	r2, r8
 8005666:	189b      	adds	r3, r3, r2
 8005668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800566c:	464b      	mov	r3, r9
 800566e:	460a      	mov	r2, r1
 8005670:	eb42 0303 	adc.w	r3, r2, r3
 8005674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005684:	f04f 0200 	mov.w	r2, #0
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005690:	4649      	mov	r1, r9
 8005692:	008b      	lsls	r3, r1, #2
 8005694:	4641      	mov	r1, r8
 8005696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569a:	4641      	mov	r1, r8
 800569c:	008a      	lsls	r2, r1, #2
 800569e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056a2:	f7fa fdf5 	bl	8000290 <__aeabi_uldivmod>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	4b38      	ldr	r3, [pc, #224]	@ (8005790 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 2301 	umull	r2, r3, r3, r1
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2264      	movs	r2, #100	@ 0x64
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	1acb      	subs	r3, r1, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	@ 0x32
 80056c0:	4a33      	ldr	r2, [pc, #204]	@ (8005790 <UART_SetConfig+0x4e4>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056cc:	441c      	add	r4, r3
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80056d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80056d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056dc:	4642      	mov	r2, r8
 80056de:	464b      	mov	r3, r9
 80056e0:	1891      	adds	r1, r2, r2
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	415b      	adcs	r3, r3
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056ec:	4641      	mov	r1, r8
 80056ee:	1851      	adds	r1, r2, r1
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	4649      	mov	r1, r9
 80056f4:	414b      	adcs	r3, r1
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005704:	4659      	mov	r1, fp
 8005706:	00cb      	lsls	r3, r1, #3
 8005708:	4651      	mov	r1, sl
 800570a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800570e:	4651      	mov	r1, sl
 8005710:	00ca      	lsls	r2, r1, #3
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	4603      	mov	r3, r0
 8005718:	4642      	mov	r2, r8
 800571a:	189b      	adds	r3, r3, r2
 800571c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800571e:	464b      	mov	r3, r9
 8005720:	460a      	mov	r2, r1
 8005722:	eb42 0303 	adc.w	r3, r2, r3
 8005726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	663b      	str	r3, [r7, #96]	@ 0x60
 8005732:	667a      	str	r2, [r7, #100]	@ 0x64
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005740:	4649      	mov	r1, r9
 8005742:	008b      	lsls	r3, r1, #2
 8005744:	4641      	mov	r1, r8
 8005746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800574a:	4641      	mov	r1, r8
 800574c:	008a      	lsls	r2, r1, #2
 800574e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005752:	f7fa fd9d 	bl	8000290 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <UART_SetConfig+0x4e4>)
 800575c:	fba3 1302 	umull	r1, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	2164      	movs	r1, #100	@ 0x64
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	3332      	adds	r3, #50	@ 0x32
 800576e:	4a08      	ldr	r2, [pc, #32]	@ (8005790 <UART_SetConfig+0x4e4>)
 8005770:	fba2 2303 	umull	r2, r3, r2, r3
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	f003 020f 	and.w	r2, r3, #15
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4422      	add	r2, r4
 8005782:	609a      	str	r2, [r3, #8]
}
 8005784:	bf00      	nop
 8005786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800578a:	46bd      	mov	sp, r7
 800578c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005790:	51eb851f 	.word	0x51eb851f

08005794 <sniprintf>:
 8005794:	b40c      	push	{r2, r3}
 8005796:	b530      	push	{r4, r5, lr}
 8005798:	4b17      	ldr	r3, [pc, #92]	@ (80057f8 <sniprintf+0x64>)
 800579a:	1e0c      	subs	r4, r1, #0
 800579c:	681d      	ldr	r5, [r3, #0]
 800579e:	b09d      	sub	sp, #116	@ 0x74
 80057a0:	da08      	bge.n	80057b4 <sniprintf+0x20>
 80057a2:	238b      	movs	r3, #139	@ 0x8b
 80057a4:	602b      	str	r3, [r5, #0]
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	b01d      	add	sp, #116	@ 0x74
 80057ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057b0:	b002      	add	sp, #8
 80057b2:	4770      	bx	lr
 80057b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80057b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057bc:	bf14      	ite	ne
 80057be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057c2:	4623      	moveq	r3, r4
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	9307      	str	r3, [sp, #28]
 80057c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057cc:	9002      	str	r0, [sp, #8]
 80057ce:	9006      	str	r0, [sp, #24]
 80057d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057d6:	ab21      	add	r3, sp, #132	@ 0x84
 80057d8:	a902      	add	r1, sp, #8
 80057da:	4628      	mov	r0, r5
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	f000 f995 	bl	8005b0c <_svfiprintf_r>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	bfbc      	itt	lt
 80057e6:	238b      	movlt	r3, #139	@ 0x8b
 80057e8:	602b      	strlt	r3, [r5, #0]
 80057ea:	2c00      	cmp	r4, #0
 80057ec:	d0dd      	beq.n	80057aa <sniprintf+0x16>
 80057ee:	9b02      	ldr	r3, [sp, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e7d9      	b.n	80057aa <sniprintf+0x16>
 80057f6:	bf00      	nop
 80057f8:	2000000c 	.word	0x2000000c

080057fc <memset>:
 80057fc:	4402      	add	r2, r0
 80057fe:	4603      	mov	r3, r0
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <memset+0xa>
 8005804:	4770      	bx	lr
 8005806:	f803 1b01 	strb.w	r1, [r3], #1
 800580a:	e7f9      	b.n	8005800 <memset+0x4>

0800580c <__errno>:
 800580c:	4b01      	ldr	r3, [pc, #4]	@ (8005814 <__errno+0x8>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	2000000c 	.word	0x2000000c

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	@ (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	@ (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	@ (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	@ (800585c <__libc_init_array+0x44>)
 800582c:	f000 fc66 	bl	80060fc <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	08006280 	.word	0x08006280
 8005854:	08006280 	.word	0x08006280
 8005858:	08006280 	.word	0x08006280
 800585c:	08006284 	.word	0x08006284

08005860 <__retarget_lock_acquire_recursive>:
 8005860:	4770      	bx	lr

08005862 <__retarget_lock_release_recursive>:
 8005862:	4770      	bx	lr

08005864 <_free_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4605      	mov	r5, r0
 8005868:	2900      	cmp	r1, #0
 800586a:	d041      	beq.n	80058f0 <_free_r+0x8c>
 800586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005870:	1f0c      	subs	r4, r1, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	bfb8      	it	lt
 8005876:	18e4      	addlt	r4, r4, r3
 8005878:	f000 f8e0 	bl	8005a3c <__malloc_lock>
 800587c:	4a1d      	ldr	r2, [pc, #116]	@ (80058f4 <_free_r+0x90>)
 800587e:	6813      	ldr	r3, [r2, #0]
 8005880:	b933      	cbnz	r3, 8005890 <_free_r+0x2c>
 8005882:	6063      	str	r3, [r4, #4]
 8005884:	6014      	str	r4, [r2, #0]
 8005886:	4628      	mov	r0, r5
 8005888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800588c:	f000 b8dc 	b.w	8005a48 <__malloc_unlock>
 8005890:	42a3      	cmp	r3, r4
 8005892:	d908      	bls.n	80058a6 <_free_r+0x42>
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	1821      	adds	r1, r4, r0
 8005898:	428b      	cmp	r3, r1
 800589a:	bf01      	itttt	eq
 800589c:	6819      	ldreq	r1, [r3, #0]
 800589e:	685b      	ldreq	r3, [r3, #4]
 80058a0:	1809      	addeq	r1, r1, r0
 80058a2:	6021      	streq	r1, [r4, #0]
 80058a4:	e7ed      	b.n	8005882 <_free_r+0x1e>
 80058a6:	461a      	mov	r2, r3
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	b10b      	cbz	r3, 80058b0 <_free_r+0x4c>
 80058ac:	42a3      	cmp	r3, r4
 80058ae:	d9fa      	bls.n	80058a6 <_free_r+0x42>
 80058b0:	6811      	ldr	r1, [r2, #0]
 80058b2:	1850      	adds	r0, r2, r1
 80058b4:	42a0      	cmp	r0, r4
 80058b6:	d10b      	bne.n	80058d0 <_free_r+0x6c>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	4401      	add	r1, r0
 80058bc:	1850      	adds	r0, r2, r1
 80058be:	4283      	cmp	r3, r0
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	d1e0      	bne.n	8005886 <_free_r+0x22>
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	6053      	str	r3, [r2, #4]
 80058ca:	4408      	add	r0, r1
 80058cc:	6010      	str	r0, [r2, #0]
 80058ce:	e7da      	b.n	8005886 <_free_r+0x22>
 80058d0:	d902      	bls.n	80058d8 <_free_r+0x74>
 80058d2:	230c      	movs	r3, #12
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	e7d6      	b.n	8005886 <_free_r+0x22>
 80058d8:	6820      	ldr	r0, [r4, #0]
 80058da:	1821      	adds	r1, r4, r0
 80058dc:	428b      	cmp	r3, r1
 80058de:	bf04      	itt	eq
 80058e0:	6819      	ldreq	r1, [r3, #0]
 80058e2:	685b      	ldreq	r3, [r3, #4]
 80058e4:	6063      	str	r3, [r4, #4]
 80058e6:	bf04      	itt	eq
 80058e8:	1809      	addeq	r1, r1, r0
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6054      	str	r4, [r2, #4]
 80058ee:	e7ca      	b.n	8005886 <_free_r+0x22>
 80058f0:	bd38      	pop	{r3, r4, r5, pc}
 80058f2:	bf00      	nop
 80058f4:	20000330 	.word	0x20000330

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005938 <sbrk_aligned+0x40>)
 80058fc:	460c      	mov	r4, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	b911      	cbnz	r1, 800590a <sbrk_aligned+0x12>
 8005904:	f000 fba6 	bl	8006054 <_sbrk_r>
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fba1 	bl	8006054 <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d103      	bne.n	800591e <sbrk_aligned+0x26>
 8005916:	f04f 34ff 	mov.w	r4, #4294967295
 800591a:	4620      	mov	r0, r4
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	1cc4      	adds	r4, r0, #3
 8005920:	f024 0403 	bic.w	r4, r4, #3
 8005924:	42a0      	cmp	r0, r4
 8005926:	d0f8      	beq.n	800591a <sbrk_aligned+0x22>
 8005928:	1a21      	subs	r1, r4, r0
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fb92 	bl	8006054 <_sbrk_r>
 8005930:	3001      	adds	r0, #1
 8005932:	d1f2      	bne.n	800591a <sbrk_aligned+0x22>
 8005934:	e7ef      	b.n	8005916 <sbrk_aligned+0x1e>
 8005936:	bf00      	nop
 8005938:	2000032c 	.word	0x2000032c

0800593c <_malloc_r>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	1ccd      	adds	r5, r1, #3
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	2d00      	cmp	r5, #0
 8005950:	4606      	mov	r6, r0
 8005952:	db01      	blt.n	8005958 <_malloc_r+0x1c>
 8005954:	42a9      	cmp	r1, r5
 8005956:	d904      	bls.n	8005962 <_malloc_r+0x26>
 8005958:	230c      	movs	r3, #12
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	2000      	movs	r0, #0
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a38 <_malloc_r+0xfc>
 8005966:	f000 f869 	bl	8005a3c <__malloc_lock>
 800596a:	f8d8 3000 	ldr.w	r3, [r8]
 800596e:	461c      	mov	r4, r3
 8005970:	bb44      	cbnz	r4, 80059c4 <_malloc_r+0x88>
 8005972:	4629      	mov	r1, r5
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff ffbf 	bl	80058f8 <sbrk_aligned>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	4604      	mov	r4, r0
 800597e:	d158      	bne.n	8005a32 <_malloc_r+0xf6>
 8005980:	f8d8 4000 	ldr.w	r4, [r8]
 8005984:	4627      	mov	r7, r4
 8005986:	2f00      	cmp	r7, #0
 8005988:	d143      	bne.n	8005a12 <_malloc_r+0xd6>
 800598a:	2c00      	cmp	r4, #0
 800598c:	d04b      	beq.n	8005a26 <_malloc_r+0xea>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	4639      	mov	r1, r7
 8005992:	4630      	mov	r0, r6
 8005994:	eb04 0903 	add.w	r9, r4, r3
 8005998:	f000 fb5c 	bl	8006054 <_sbrk_r>
 800599c:	4581      	cmp	r9, r0
 800599e:	d142      	bne.n	8005a26 <_malloc_r+0xea>
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	1a6d      	subs	r5, r5, r1
 80059a4:	4629      	mov	r1, r5
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ffa6 	bl	80058f8 <sbrk_aligned>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d03a      	beq.n	8005a26 <_malloc_r+0xea>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	442b      	add	r3, r5
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	f8d8 3000 	ldr.w	r3, [r8]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	bb62      	cbnz	r2, 8005a18 <_malloc_r+0xdc>
 80059be:	f8c8 7000 	str.w	r7, [r8]
 80059c2:	e00f      	b.n	80059e4 <_malloc_r+0xa8>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	1b52      	subs	r2, r2, r5
 80059c8:	d420      	bmi.n	8005a0c <_malloc_r+0xd0>
 80059ca:	2a0b      	cmp	r2, #11
 80059cc:	d917      	bls.n	80059fe <_malloc_r+0xc2>
 80059ce:	1961      	adds	r1, r4, r5
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	6025      	str	r5, [r4, #0]
 80059d4:	bf18      	it	ne
 80059d6:	6059      	strne	r1, [r3, #4]
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	bf08      	it	eq
 80059dc:	f8c8 1000 	streq.w	r1, [r8]
 80059e0:	5162      	str	r2, [r4, r5]
 80059e2:	604b      	str	r3, [r1, #4]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f82f 	bl	8005a48 <__malloc_unlock>
 80059ea:	f104 000b 	add.w	r0, r4, #11
 80059ee:	1d23      	adds	r3, r4, #4
 80059f0:	f020 0007 	bic.w	r0, r0, #7
 80059f4:	1ac2      	subs	r2, r0, r3
 80059f6:	bf1c      	itt	ne
 80059f8:	1a1b      	subne	r3, r3, r0
 80059fa:	50a3      	strne	r3, [r4, r2]
 80059fc:	e7af      	b.n	800595e <_malloc_r+0x22>
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	bf0c      	ite	eq
 8005a04:	f8c8 2000 	streq.w	r2, [r8]
 8005a08:	605a      	strne	r2, [r3, #4]
 8005a0a:	e7eb      	b.n	80059e4 <_malloc_r+0xa8>
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	6864      	ldr	r4, [r4, #4]
 8005a10:	e7ae      	b.n	8005970 <_malloc_r+0x34>
 8005a12:	463c      	mov	r4, r7
 8005a14:	687f      	ldr	r7, [r7, #4]
 8005a16:	e7b6      	b.n	8005986 <_malloc_r+0x4a>
 8005a18:	461a      	mov	r2, r3
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d1fb      	bne.n	8005a18 <_malloc_r+0xdc>
 8005a20:	2300      	movs	r3, #0
 8005a22:	6053      	str	r3, [r2, #4]
 8005a24:	e7de      	b.n	80059e4 <_malloc_r+0xa8>
 8005a26:	230c      	movs	r3, #12
 8005a28:	6033      	str	r3, [r6, #0]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f80c 	bl	8005a48 <__malloc_unlock>
 8005a30:	e794      	b.n	800595c <_malloc_r+0x20>
 8005a32:	6005      	str	r5, [r0, #0]
 8005a34:	e7d6      	b.n	80059e4 <_malloc_r+0xa8>
 8005a36:	bf00      	nop
 8005a38:	20000330 	.word	0x20000330

08005a3c <__malloc_lock>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	@ (8005a44 <__malloc_lock+0x8>)
 8005a3e:	f7ff bf0f 	b.w	8005860 <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000328 	.word	0x20000328

08005a48 <__malloc_unlock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	@ (8005a50 <__malloc_unlock+0x8>)
 8005a4a:	f7ff bf0a 	b.w	8005862 <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000328 	.word	0x20000328

08005a54 <__ssputs_r>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	688e      	ldr	r6, [r1, #8]
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	42be      	cmp	r6, r7
 8005a5e:	680b      	ldr	r3, [r1, #0]
 8005a60:	4682      	mov	sl, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	4690      	mov	r8, r2
 8005a66:	d82d      	bhi.n	8005ac4 <__ssputs_r+0x70>
 8005a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a70:	d026      	beq.n	8005ac0 <__ssputs_r+0x6c>
 8005a72:	6965      	ldr	r5, [r4, #20]
 8005a74:	6909      	ldr	r1, [r1, #16]
 8005a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a7a:	eba3 0901 	sub.w	r9, r3, r1
 8005a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a82:	1c7b      	adds	r3, r7, #1
 8005a84:	444b      	add	r3, r9
 8005a86:	106d      	asrs	r5, r5, #1
 8005a88:	429d      	cmp	r5, r3
 8005a8a:	bf38      	it	cc
 8005a8c:	461d      	movcc	r5, r3
 8005a8e:	0553      	lsls	r3, r2, #21
 8005a90:	d527      	bpl.n	8005ae2 <__ssputs_r+0x8e>
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7ff ff52 	bl	800593c <_malloc_r>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b360      	cbz	r0, 8005af6 <__ssputs_r+0xa2>
 8005a9c:	6921      	ldr	r1, [r4, #16]
 8005a9e:	464a      	mov	r2, r9
 8005aa0:	f000 fae8 	bl	8006074 <memcpy>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	6126      	str	r6, [r4, #16]
 8005ab2:	6165      	str	r5, [r4, #20]
 8005ab4:	444e      	add	r6, r9
 8005ab6:	eba5 0509 	sub.w	r5, r5, r9
 8005aba:	6026      	str	r6, [r4, #0]
 8005abc:	60a5      	str	r5, [r4, #8]
 8005abe:	463e      	mov	r6, r7
 8005ac0:	42be      	cmp	r6, r7
 8005ac2:	d900      	bls.n	8005ac6 <__ssputs_r+0x72>
 8005ac4:	463e      	mov	r6, r7
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	4632      	mov	r2, r6
 8005aca:	4641      	mov	r1, r8
 8005acc:	f000 faa8 	bl	8006020 <memmove>
 8005ad0:	68a3      	ldr	r3, [r4, #8]
 8005ad2:	1b9b      	subs	r3, r3, r6
 8005ad4:	60a3      	str	r3, [r4, #8]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	4433      	add	r3, r6
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2000      	movs	r0, #0
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	f000 fad4 	bl	8006090 <_realloc_r>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1e0      	bne.n	8005ab0 <__ssputs_r+0x5c>
 8005aee:	6921      	ldr	r1, [r4, #16]
 8005af0:	4650      	mov	r0, sl
 8005af2:	f7ff feb7 	bl	8005864 <_free_r>
 8005af6:	230c      	movs	r3, #12
 8005af8:	f8ca 3000 	str.w	r3, [sl]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295
 8005b08:	e7e9      	b.n	8005ade <__ssputs_r+0x8a>
	...

08005b0c <_svfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	4698      	mov	r8, r3
 8005b12:	898b      	ldrh	r3, [r1, #12]
 8005b14:	061b      	lsls	r3, r3, #24
 8005b16:	b09d      	sub	sp, #116	@ 0x74
 8005b18:	4607      	mov	r7, r0
 8005b1a:	460d      	mov	r5, r1
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	d510      	bpl.n	8005b42 <_svfiprintf_r+0x36>
 8005b20:	690b      	ldr	r3, [r1, #16]
 8005b22:	b973      	cbnz	r3, 8005b42 <_svfiprintf_r+0x36>
 8005b24:	2140      	movs	r1, #64	@ 0x40
 8005b26:	f7ff ff09 	bl	800593c <_malloc_r>
 8005b2a:	6028      	str	r0, [r5, #0]
 8005b2c:	6128      	str	r0, [r5, #16]
 8005b2e:	b930      	cbnz	r0, 8005b3e <_svfiprintf_r+0x32>
 8005b30:	230c      	movs	r3, #12
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b01d      	add	sp, #116	@ 0x74
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	616b      	str	r3, [r5, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	2320      	movs	r3, #32
 8005b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b50:	2330      	movs	r3, #48	@ 0x30
 8005b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cf0 <_svfiprintf_r+0x1e4>
 8005b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b5a:	f04f 0901 	mov.w	r9, #1
 8005b5e:	4623      	mov	r3, r4
 8005b60:	469a      	mov	sl, r3
 8005b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b66:	b10a      	cbz	r2, 8005b6c <_svfiprintf_r+0x60>
 8005b68:	2a25      	cmp	r2, #37	@ 0x25
 8005b6a:	d1f9      	bne.n	8005b60 <_svfiprintf_r+0x54>
 8005b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b70:	d00b      	beq.n	8005b8a <_svfiprintf_r+0x7e>
 8005b72:	465b      	mov	r3, fp
 8005b74:	4622      	mov	r2, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ff6b 	bl	8005a54 <__ssputs_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f000 80a7 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b86:	445a      	add	r2, fp
 8005b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 809f 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b94:	2300      	movs	r3, #0
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9e:	f10a 0a01 	add.w	sl, sl, #1
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bac:	4654      	mov	r4, sl
 8005bae:	2205      	movs	r2, #5
 8005bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb4:	484e      	ldr	r0, [pc, #312]	@ (8005cf0 <_svfiprintf_r+0x1e4>)
 8005bb6:	f7fa fb1b 	bl	80001f0 <memchr>
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_svfiprintf_r+0xea>
 8005bbe:	06d0      	lsls	r0, r2, #27
 8005bc0:	bf44      	itt	mi
 8005bc2:	2320      	movmi	r3, #32
 8005bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc8:	0711      	lsls	r1, r2, #28
 8005bca:	bf44      	itt	mi
 8005bcc:	232b      	movmi	r3, #43	@ 0x2b
 8005bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd8:	d015      	beq.n	8005c06 <_svfiprintf_r+0xfa>
 8005bda:	9a07      	ldr	r2, [sp, #28]
 8005bdc:	4654      	mov	r4, sl
 8005bde:	2000      	movs	r0, #0
 8005be0:	f04f 0c0a 	mov.w	ip, #10
 8005be4:	4621      	mov	r1, r4
 8005be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bea:	3b30      	subs	r3, #48	@ 0x30
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d94b      	bls.n	8005c88 <_svfiprintf_r+0x17c>
 8005bf0:	b1b0      	cbz	r0, 8005c20 <_svfiprintf_r+0x114>
 8005bf2:	9207      	str	r2, [sp, #28]
 8005bf4:	e014      	b.n	8005c20 <_svfiprintf_r+0x114>
 8005bf6:	eba0 0308 	sub.w	r3, r0, r8
 8005bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	46a2      	mov	sl, r4
 8005c04:	e7d2      	b.n	8005bac <_svfiprintf_r+0xa0>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbb      	ittet	lt
 8005c12:	425b      	neglt	r3, r3
 8005c14:	f042 0202 	orrlt.w	r2, r2, #2
 8005c18:	9307      	strge	r3, [sp, #28]
 8005c1a:	9307      	strlt	r3, [sp, #28]
 8005c1c:	bfb8      	it	lt
 8005c1e:	9204      	strlt	r2, [sp, #16]
 8005c20:	7823      	ldrb	r3, [r4, #0]
 8005c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c24:	d10a      	bne.n	8005c3c <_svfiprintf_r+0x130>
 8005c26:	7863      	ldrb	r3, [r4, #1]
 8005c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c2a:	d132      	bne.n	8005c92 <_svfiprintf_r+0x186>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	1d1a      	adds	r2, r3, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	9203      	str	r2, [sp, #12]
 8005c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c38:	3402      	adds	r4, #2
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d00 <_svfiprintf_r+0x1f4>
 8005c40:	7821      	ldrb	r1, [r4, #0]
 8005c42:	2203      	movs	r2, #3
 8005c44:	4650      	mov	r0, sl
 8005c46:	f7fa fad3 	bl	80001f0 <memchr>
 8005c4a:	b138      	cbz	r0, 8005c5c <_svfiprintf_r+0x150>
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	eba0 000a 	sub.w	r0, r0, sl
 8005c52:	2240      	movs	r2, #64	@ 0x40
 8005c54:	4082      	lsls	r2, r0
 8005c56:	4313      	orrs	r3, r2
 8005c58:	3401      	adds	r4, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c60:	4824      	ldr	r0, [pc, #144]	@ (8005cf4 <_svfiprintf_r+0x1e8>)
 8005c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c66:	2206      	movs	r2, #6
 8005c68:	f7fa fac2 	bl	80001f0 <memchr>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d036      	beq.n	8005cde <_svfiprintf_r+0x1d2>
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <_svfiprintf_r+0x1ec>)
 8005c72:	bb1b      	cbnz	r3, 8005cbc <_svfiprintf_r+0x1b0>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	3307      	adds	r3, #7
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c82:	4433      	add	r3, r6
 8005c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c86:	e76a      	b.n	8005b5e <_svfiprintf_r+0x52>
 8005c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7a8      	b.n	8005be4 <_svfiprintf_r+0xd8>
 8005c92:	2300      	movs	r3, #0
 8005c94:	3401      	adds	r4, #1
 8005c96:	9305      	str	r3, [sp, #20]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f04f 0c0a 	mov.w	ip, #10
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca4:	3a30      	subs	r2, #48	@ 0x30
 8005ca6:	2a09      	cmp	r2, #9
 8005ca8:	d903      	bls.n	8005cb2 <_svfiprintf_r+0x1a6>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0c6      	beq.n	8005c3c <_svfiprintf_r+0x130>
 8005cae:	9105      	str	r1, [sp, #20]
 8005cb0:	e7c4      	b.n	8005c3c <_svfiprintf_r+0x130>
 8005cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e7f0      	b.n	8005c9e <_svfiprintf_r+0x192>
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cfc <_svfiprintf_r+0x1f0>)
 8005cc4:	a904      	add	r1, sp, #16
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f3af 8000 	nop.w
 8005ccc:	1c42      	adds	r2, r0, #1
 8005cce:	4606      	mov	r6, r0
 8005cd0:	d1d6      	bne.n	8005c80 <_svfiprintf_r+0x174>
 8005cd2:	89ab      	ldrh	r3, [r5, #12]
 8005cd4:	065b      	lsls	r3, r3, #25
 8005cd6:	f53f af2d 	bmi.w	8005b34 <_svfiprintf_r+0x28>
 8005cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cdc:	e72c      	b.n	8005b38 <_svfiprintf_r+0x2c>
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4b05      	ldr	r3, [pc, #20]	@ (8005cfc <_svfiprintf_r+0x1f0>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f000 f879 	bl	8005de0 <_printf_i>
 8005cee:	e7ed      	b.n	8005ccc <_svfiprintf_r+0x1c0>
 8005cf0:	08006244 	.word	0x08006244
 8005cf4:	0800624e 	.word	0x0800624e
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	08005a55 	.word	0x08005a55
 8005d00:	0800624a 	.word	0x0800624a

08005d04 <_printf_common>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	4616      	mov	r6, r2
 8005d0a:	4698      	mov	r8, r3
 8005d0c:	688a      	ldr	r2, [r1, #8]
 8005d0e:	690b      	ldr	r3, [r1, #16]
 8005d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d14:	4293      	cmp	r3, r2
 8005d16:	bfb8      	it	lt
 8005d18:	4613      	movlt	r3, r2
 8005d1a:	6033      	str	r3, [r6, #0]
 8005d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d20:	4607      	mov	r7, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	b10a      	cbz	r2, 8005d2a <_printf_common+0x26>
 8005d26:	3301      	adds	r3, #1
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	0699      	lsls	r1, r3, #26
 8005d2e:	bf42      	ittt	mi
 8005d30:	6833      	ldrmi	r3, [r6, #0]
 8005d32:	3302      	addmi	r3, #2
 8005d34:	6033      	strmi	r3, [r6, #0]
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	f015 0506 	ands.w	r5, r5, #6
 8005d3c:	d106      	bne.n	8005d4c <_printf_common+0x48>
 8005d3e:	f104 0a19 	add.w	sl, r4, #25
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	6832      	ldr	r2, [r6, #0]
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dc26      	bgt.n	8005d9a <_printf_common+0x96>
 8005d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	3b00      	subs	r3, #0
 8005d54:	bf18      	it	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	0692      	lsls	r2, r2, #26
 8005d5a:	d42b      	bmi.n	8005db4 <_printf_common+0xb0>
 8005d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d60:	4641      	mov	r1, r8
 8005d62:	4638      	mov	r0, r7
 8005d64:	47c8      	blx	r9
 8005d66:	3001      	adds	r0, #1
 8005d68:	d01e      	beq.n	8005da8 <_printf_common+0xa4>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	6922      	ldr	r2, [r4, #16]
 8005d6e:	f003 0306 	and.w	r3, r3, #6
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	bf02      	ittt	eq
 8005d76:	68e5      	ldreq	r5, [r4, #12]
 8005d78:	6833      	ldreq	r3, [r6, #0]
 8005d7a:	1aed      	subeq	r5, r5, r3
 8005d7c:	68a3      	ldr	r3, [r4, #8]
 8005d7e:	bf0c      	ite	eq
 8005d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d84:	2500      	movne	r5, #0
 8005d86:	4293      	cmp	r3, r2
 8005d88:	bfc4      	itt	gt
 8005d8a:	1a9b      	subgt	r3, r3, r2
 8005d8c:	18ed      	addgt	r5, r5, r3
 8005d8e:	2600      	movs	r6, #0
 8005d90:	341a      	adds	r4, #26
 8005d92:	42b5      	cmp	r5, r6
 8005d94:	d11a      	bne.n	8005dcc <_printf_common+0xc8>
 8005d96:	2000      	movs	r0, #0
 8005d98:	e008      	b.n	8005dac <_printf_common+0xa8>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	4652      	mov	r2, sl
 8005d9e:	4641      	mov	r1, r8
 8005da0:	4638      	mov	r0, r7
 8005da2:	47c8      	blx	r9
 8005da4:	3001      	adds	r0, #1
 8005da6:	d103      	bne.n	8005db0 <_printf_common+0xac>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db0:	3501      	adds	r5, #1
 8005db2:	e7c6      	b.n	8005d42 <_printf_common+0x3e>
 8005db4:	18e1      	adds	r1, r4, r3
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	2030      	movs	r0, #48	@ 0x30
 8005dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dbe:	4422      	add	r2, r4
 8005dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dc8:	3302      	adds	r3, #2
 8005dca:	e7c7      	b.n	8005d5c <_printf_common+0x58>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4622      	mov	r2, r4
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	47c8      	blx	r9
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d0e6      	beq.n	8005da8 <_printf_common+0xa4>
 8005dda:	3601      	adds	r6, #1
 8005ddc:	e7d9      	b.n	8005d92 <_printf_common+0x8e>
	...

08005de0 <_printf_i>:
 8005de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	7e0f      	ldrb	r7, [r1, #24]
 8005de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005de8:	2f78      	cmp	r7, #120	@ 0x78
 8005dea:	4691      	mov	r9, r2
 8005dec:	4680      	mov	r8, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	469a      	mov	sl, r3
 8005df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005df6:	d807      	bhi.n	8005e08 <_printf_i+0x28>
 8005df8:	2f62      	cmp	r7, #98	@ 0x62
 8005dfa:	d80a      	bhi.n	8005e12 <_printf_i+0x32>
 8005dfc:	2f00      	cmp	r7, #0
 8005dfe:	f000 80d2 	beq.w	8005fa6 <_printf_i+0x1c6>
 8005e02:	2f58      	cmp	r7, #88	@ 0x58
 8005e04:	f000 80b9 	beq.w	8005f7a <_printf_i+0x19a>
 8005e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e10:	e03a      	b.n	8005e88 <_printf_i+0xa8>
 8005e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e16:	2b15      	cmp	r3, #21
 8005e18:	d8f6      	bhi.n	8005e08 <_printf_i+0x28>
 8005e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8005e20 <_printf_i+0x40>)
 8005e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e20:	08005e79 	.word	0x08005e79
 8005e24:	08005e8d 	.word	0x08005e8d
 8005e28:	08005e09 	.word	0x08005e09
 8005e2c:	08005e09 	.word	0x08005e09
 8005e30:	08005e09 	.word	0x08005e09
 8005e34:	08005e09 	.word	0x08005e09
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08005e09 	.word	0x08005e09
 8005e40:	08005e09 	.word	0x08005e09
 8005e44:	08005e09 	.word	0x08005e09
 8005e48:	08005e09 	.word	0x08005e09
 8005e4c:	08005f8d 	.word	0x08005f8d
 8005e50:	08005eb7 	.word	0x08005eb7
 8005e54:	08005f47 	.word	0x08005f47
 8005e58:	08005e09 	.word	0x08005e09
 8005e5c:	08005e09 	.word	0x08005e09
 8005e60:	08005faf 	.word	0x08005faf
 8005e64:	08005e09 	.word	0x08005e09
 8005e68:	08005eb7 	.word	0x08005eb7
 8005e6c:	08005e09 	.word	0x08005e09
 8005e70:	08005e09 	.word	0x08005e09
 8005e74:	08005f4f 	.word	0x08005f4f
 8005e78:	6833      	ldr	r3, [r6, #0]
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6032      	str	r2, [r6, #0]
 8005e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e09d      	b.n	8005fc8 <_printf_i+0x1e8>
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	6820      	ldr	r0, [r4, #0]
 8005e90:	1d19      	adds	r1, r3, #4
 8005e92:	6031      	str	r1, [r6, #0]
 8005e94:	0606      	lsls	r6, r0, #24
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0xbc>
 8005e98:	681d      	ldr	r5, [r3, #0]
 8005e9a:	e003      	b.n	8005ea4 <_printf_i+0xc4>
 8005e9c:	0645      	lsls	r5, r0, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0xb8>
 8005ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	da03      	bge.n	8005eb0 <_printf_i+0xd0>
 8005ea8:	232d      	movs	r3, #45	@ 0x2d
 8005eaa:	426d      	negs	r5, r5
 8005eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb0:	4859      	ldr	r0, [pc, #356]	@ (8006018 <_printf_i+0x238>)
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	e011      	b.n	8005eda <_printf_i+0xfa>
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	0608      	lsls	r0, r1, #24
 8005ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ec0:	d402      	bmi.n	8005ec8 <_printf_i+0xe8>
 8005ec2:	0649      	lsls	r1, r1, #25
 8005ec4:	bf48      	it	mi
 8005ec6:	b2ad      	uxthmi	r5, r5
 8005ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eca:	4853      	ldr	r0, [pc, #332]	@ (8006018 <_printf_i+0x238>)
 8005ecc:	6033      	str	r3, [r6, #0]
 8005ece:	bf14      	ite	ne
 8005ed0:	230a      	movne	r3, #10
 8005ed2:	2308      	moveq	r3, #8
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eda:	6866      	ldr	r6, [r4, #4]
 8005edc:	60a6      	str	r6, [r4, #8]
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	bfa2      	ittt	ge
 8005ee2:	6821      	ldrge	r1, [r4, #0]
 8005ee4:	f021 0104 	bicge.w	r1, r1, #4
 8005ee8:	6021      	strge	r1, [r4, #0]
 8005eea:	b90d      	cbnz	r5, 8005ef0 <_printf_i+0x110>
 8005eec:	2e00      	cmp	r6, #0
 8005eee:	d04b      	beq.n	8005f88 <_printf_i+0x1a8>
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ef6:	fb03 5711 	mls	r7, r3, r1, r5
 8005efa:	5dc7      	ldrb	r7, [r0, r7]
 8005efc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f00:	462f      	mov	r7, r5
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	460d      	mov	r5, r1
 8005f06:	d9f4      	bls.n	8005ef2 <_printf_i+0x112>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d10b      	bne.n	8005f24 <_printf_i+0x144>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07df      	lsls	r7, r3, #31
 8005f10:	d508      	bpl.n	8005f24 <_printf_i+0x144>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	4299      	cmp	r1, r3
 8005f18:	bfde      	ittt	le
 8005f1a:	2330      	movle	r3, #48	@ 0x30
 8005f1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f24:	1b92      	subs	r2, r2, r6
 8005f26:	6122      	str	r2, [r4, #16]
 8005f28:	f8cd a000 	str.w	sl, [sp]
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	aa03      	add	r2, sp, #12
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fee6 	bl	8005d04 <_printf_common>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d14a      	bne.n	8005fd2 <_printf_i+0x1f2>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b004      	add	sp, #16
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	f043 0320 	orr.w	r3, r3, #32
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	4833      	ldr	r0, [pc, #204]	@ (800601c <_printf_i+0x23c>)
 8005f50:	2778      	movs	r7, #120	@ 0x78
 8005f52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6831      	ldr	r1, [r6, #0]
 8005f5a:	061f      	lsls	r7, r3, #24
 8005f5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f60:	d402      	bmi.n	8005f68 <_printf_i+0x188>
 8005f62:	065f      	lsls	r7, r3, #25
 8005f64:	bf48      	it	mi
 8005f66:	b2ad      	uxthmi	r5, r5
 8005f68:	6031      	str	r1, [r6, #0]
 8005f6a:	07d9      	lsls	r1, r3, #31
 8005f6c:	bf44      	itt	mi
 8005f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f72:	6023      	strmi	r3, [r4, #0]
 8005f74:	b11d      	cbz	r5, 8005f7e <_printf_i+0x19e>
 8005f76:	2310      	movs	r3, #16
 8005f78:	e7ac      	b.n	8005ed4 <_printf_i+0xf4>
 8005f7a:	4827      	ldr	r0, [pc, #156]	@ (8006018 <_printf_i+0x238>)
 8005f7c:	e7e9      	b.n	8005f52 <_printf_i+0x172>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	f023 0320 	bic.w	r3, r3, #32
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	e7f6      	b.n	8005f76 <_printf_i+0x196>
 8005f88:	4616      	mov	r6, r2
 8005f8a:	e7bd      	b.n	8005f08 <_printf_i+0x128>
 8005f8c:	6833      	ldr	r3, [r6, #0]
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	6961      	ldr	r1, [r4, #20]
 8005f92:	1d18      	adds	r0, r3, #4
 8005f94:	6030      	str	r0, [r6, #0]
 8005f96:	062e      	lsls	r6, r5, #24
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	d501      	bpl.n	8005fa0 <_printf_i+0x1c0>
 8005f9c:	6019      	str	r1, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <_printf_i+0x1c6>
 8005fa0:	0668      	lsls	r0, r5, #25
 8005fa2:	d5fb      	bpl.n	8005f9c <_printf_i+0x1bc>
 8005fa4:	8019      	strh	r1, [r3, #0]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	4616      	mov	r6, r2
 8005fac:	e7bc      	b.n	8005f28 <_printf_i+0x148>
 8005fae:	6833      	ldr	r3, [r6, #0]
 8005fb0:	1d1a      	adds	r2, r3, #4
 8005fb2:	6032      	str	r2, [r6, #0]
 8005fb4:	681e      	ldr	r6, [r3, #0]
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7fa f918 	bl	80001f0 <memchr>
 8005fc0:	b108      	cbz	r0, 8005fc6 <_printf_i+0x1e6>
 8005fc2:	1b80      	subs	r0, r0, r6
 8005fc4:	6060      	str	r0, [r4, #4]
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fd0:	e7aa      	b.n	8005f28 <_printf_i+0x148>
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	4632      	mov	r2, r6
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4640      	mov	r0, r8
 8005fda:	47d0      	blx	sl
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d0ad      	beq.n	8005f3c <_printf_i+0x15c>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	079b      	lsls	r3, r3, #30
 8005fe4:	d413      	bmi.n	800600e <_printf_i+0x22e>
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	4298      	cmp	r0, r3
 8005fec:	bfb8      	it	lt
 8005fee:	4618      	movlt	r0, r3
 8005ff0:	e7a6      	b.n	8005f40 <_printf_i+0x160>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4632      	mov	r2, r6
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	47d0      	blx	sl
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d09d      	beq.n	8005f3c <_printf_i+0x15c>
 8006000:	3501      	adds	r5, #1
 8006002:	68e3      	ldr	r3, [r4, #12]
 8006004:	9903      	ldr	r1, [sp, #12]
 8006006:	1a5b      	subs	r3, r3, r1
 8006008:	42ab      	cmp	r3, r5
 800600a:	dcf2      	bgt.n	8005ff2 <_printf_i+0x212>
 800600c:	e7eb      	b.n	8005fe6 <_printf_i+0x206>
 800600e:	2500      	movs	r5, #0
 8006010:	f104 0619 	add.w	r6, r4, #25
 8006014:	e7f5      	b.n	8006002 <_printf_i+0x222>
 8006016:	bf00      	nop
 8006018:	08006255 	.word	0x08006255
 800601c:	08006266 	.word	0x08006266

08006020 <memmove>:
 8006020:	4288      	cmp	r0, r1
 8006022:	b510      	push	{r4, lr}
 8006024:	eb01 0402 	add.w	r4, r1, r2
 8006028:	d902      	bls.n	8006030 <memmove+0x10>
 800602a:	4284      	cmp	r4, r0
 800602c:	4623      	mov	r3, r4
 800602e:	d807      	bhi.n	8006040 <memmove+0x20>
 8006030:	1e43      	subs	r3, r0, #1
 8006032:	42a1      	cmp	r1, r4
 8006034:	d008      	beq.n	8006048 <memmove+0x28>
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800603e:	e7f8      	b.n	8006032 <memmove+0x12>
 8006040:	4402      	add	r2, r0
 8006042:	4601      	mov	r1, r0
 8006044:	428a      	cmp	r2, r1
 8006046:	d100      	bne.n	800604a <memmove+0x2a>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800604e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006052:	e7f7      	b.n	8006044 <memmove+0x24>

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d06      	ldr	r5, [pc, #24]	@ (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fa fe56 	bl	8000d10 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000324 	.word	0x20000324

08006074 <memcpy>:
 8006074:	440a      	add	r2, r1
 8006076:	4291      	cmp	r1, r2
 8006078:	f100 33ff 	add.w	r3, r0, #4294967295
 800607c:	d100      	bne.n	8006080 <memcpy+0xc>
 800607e:	4770      	bx	lr
 8006080:	b510      	push	{r4, lr}
 8006082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800608a:	4291      	cmp	r1, r2
 800608c:	d1f9      	bne.n	8006082 <memcpy+0xe>
 800608e:	bd10      	pop	{r4, pc}

08006090 <_realloc_r>:
 8006090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006094:	4680      	mov	r8, r0
 8006096:	4615      	mov	r5, r2
 8006098:	460c      	mov	r4, r1
 800609a:	b921      	cbnz	r1, 80060a6 <_realloc_r+0x16>
 800609c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	4611      	mov	r1, r2
 80060a2:	f7ff bc4b 	b.w	800593c <_malloc_r>
 80060a6:	b92a      	cbnz	r2, 80060b4 <_realloc_r+0x24>
 80060a8:	f7ff fbdc 	bl	8005864 <_free_r>
 80060ac:	2400      	movs	r4, #0
 80060ae:	4620      	mov	r0, r4
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b4:	f000 f81a 	bl	80060ec <_malloc_usable_size_r>
 80060b8:	4285      	cmp	r5, r0
 80060ba:	4606      	mov	r6, r0
 80060bc:	d802      	bhi.n	80060c4 <_realloc_r+0x34>
 80060be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060c2:	d8f4      	bhi.n	80060ae <_realloc_r+0x1e>
 80060c4:	4629      	mov	r1, r5
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7ff fc38 	bl	800593c <_malloc_r>
 80060cc:	4607      	mov	r7, r0
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d0ec      	beq.n	80060ac <_realloc_r+0x1c>
 80060d2:	42b5      	cmp	r5, r6
 80060d4:	462a      	mov	r2, r5
 80060d6:	4621      	mov	r1, r4
 80060d8:	bf28      	it	cs
 80060da:	4632      	movcs	r2, r6
 80060dc:	f7ff ffca 	bl	8006074 <memcpy>
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fbbe 	bl	8005864 <_free_r>
 80060e8:	463c      	mov	r4, r7
 80060ea:	e7e0      	b.n	80060ae <_realloc_r+0x1e>

080060ec <_malloc_usable_size_r>:
 80060ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f0:	1f18      	subs	r0, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bfbc      	itt	lt
 80060f6:	580b      	ldrlt	r3, [r1, r0]
 80060f8:	18c0      	addlt	r0, r0, r3
 80060fa:	4770      	bx	lr

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
