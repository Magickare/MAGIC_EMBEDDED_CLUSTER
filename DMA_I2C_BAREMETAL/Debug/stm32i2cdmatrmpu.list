
stm32i2cdmatrmpu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006c44  08006c44  00007c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d5c  08006d5c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d64  08006d64  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d64  08006d64  00007d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d68  08006d68  00007d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d6c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  08006dd4  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08006dd4  00008344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf95  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de3  00000000  00000000  0001402d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  00015e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000850  00000000  00000000  000168c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cc7  00000000  00000000  00017110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eca0  00000000  00000000  0002ddd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896f3  00000000  00000000  0003ca77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c616a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a8  00000000  00000000  000c61b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c9558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c2c 	.word	0x08006c2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006c2c 	.word	0x08006c2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	b29a      	uxth	r2, r3
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	68b9      	ldr	r1, [r7, #8]
 8000586:	4804      	ldr	r0, [pc, #16]	@ (8000598 <_write+0x28>)
 8000588:	f005 f806 	bl	8005598 <HAL_UART_Transmit>
return len;
 800058c:	687b      	ldr	r3, [r7, #4]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000138 	.word	0x20000138

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc70 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f816 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f900 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f8d6 	bl	800075c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f8aa 	bl	8000708 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b4:	f000 f87a 	bl	80006ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init(&hi2c1);
 80005b8:	4805      	ldr	r0, [pc, #20]	@ (80005d0 <main+0x34>)
 80005ba:	f000 f96b 	bl	8000894 <MPU6050_Init>
  MPU6050_Read_Accel_Gyro_DMA(&hi2c1);
 80005be:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <main+0x34>)
 80005c0:	f000 f99a 	bl	80008f8 <MPU6050_Read_Accel_Gyro_DMA>
  HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c8:	f000 fcce 	bl	8000f68 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x30>
 80005d0:	20000084 	.word	0x20000084

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fd9e 	bl	8006124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <SystemClock_Config+0xd0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a28      	ldr	r2, [pc, #160]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <SystemClock_Config+0xd4>)
 8000622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <SystemClock_Config+0xd4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000648:	2310      	movs	r3, #16
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fab2 	bl	8004bc8 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800066a:	f000 f90d 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fd14 	bl	80050b8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000696:	f000 f8f7 	bl	8000888 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f001 fabd 	bl	8001c68 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f8c8 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000084 	.word	0x20000084
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f004 feda 	bl	80054f8 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f89d 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000138 	.word	0x20000138
 8000758:	40004400 	.word	0x40004400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_DMA_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <MX_DMA_Init+0x4c>)
 800076c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	200b      	movs	r0, #11
 8000784:	f000 fcef 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000788:	200b      	movs	r0, #11
 800078a:	f000 fd08 	bl	800119e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2011      	movs	r0, #17
 8000794:	f000 fce7 	bl	8001166 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000798:	2011      	movs	r0, #17
 800079a:	f000 fd00 	bl	800119e <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a25      	ldr	r2, [pc, #148]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a17      	ldr	r2, [pc, #92]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2120      	movs	r1, #32
 8000836:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_GPIO_Init+0xd4>)
 8000838:	f001 f9fc 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000842:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_GPIO_Init+0xd8>)
 8000854:	f001 f86a 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_GPIO_Init+0xd4>)
 8000870:	f001 f85c 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	@ 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020800 	.word	0x40020800

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <Error_Handler+0x8>

08000894 <MPU6050_Init>:
uint8_t mpu_data[14];
void MPU6050_Init(I2C_HandleTypeDef *hi2c);
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c);


void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af04      	add	r7, sp, #16
 800089a:	6078      	str	r0, [r7, #4]
    uint8_t check, data;


    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 800089c:	2364      	movs	r3, #100	@ 0x64
 800089e:	9302      	str	r3, [sp, #8]
 80008a0:	2301      	movs	r3, #1
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	f107 030f 	add.w	r3, r7, #15
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2301      	movs	r3, #1
 80008ac:	2275      	movs	r2, #117	@ 0x75
 80008ae:	21d0      	movs	r1, #208	@ 0xd0
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f001 fc2d 	bl	8002110 <HAL_I2C_Mem_Read>
    if (check == 0x68) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b68      	cmp	r3, #104	@ 0x68
 80008ba:	d112      	bne.n	80008e2 <MPU6050_Init+0x4e>
        printf("MPU6050 detected successfully!\r\n");
 80008bc:	480c      	ldr	r0, [pc, #48]	@ (80008f0 <MPU6050_Init+0x5c>)
 80008be:	f005 fb51 	bl	8005f64 <puts>


        data = 0x00;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, PWR_MGMT_1, 1, &data, 1, 100);
 80008c6:	2364      	movs	r3, #100	@ 0x64
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2301      	movs	r3, #1
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f107 030e 	add.w	r3, r7, #14
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	2301      	movs	r3, #1
 80008d6:	226b      	movs	r2, #107	@ 0x6b
 80008d8:	21d0      	movs	r1, #208	@ 0xd0
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 fb1e 	bl	8001f1c <HAL_I2C_Mem_Write>
    } else {
        printf("MPU6050 not found!\r\n");
    }
}
 80008e0:	e002      	b.n	80008e8 <MPU6050_Init+0x54>
        printf("MPU6050 not found!\r\n");
 80008e2:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MPU6050_Init+0x60>)
 80008e4:	f005 fb3e 	bl	8005f64 <puts>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	08006c44 	.word	0x08006c44
 80008f4:	08006c64 	.word	0x08006c64

080008f8 <MPU6050_Read_Accel_Gyro_DMA>:
    // Print values to UART
    printf("Accel X: %d, Y: %d, Z: %d | Gyro X: %d, Y: %d, Z: %d\r\n",
           accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);
}

void MPU6050_Read_Accel_Gyro_DMA(I2C_HandleTypeDef *hi2c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
    HAL_I2C_Mem_Read_DMA(hi2c, MPU6050_ADDR, ACCEL_XOUT_H, 1, mpu_data, 14);
 8000900:	230e      	movs	r3, #14
 8000902:	9301      	str	r3, [sp, #4]
 8000904:	4b05      	ldr	r3, [pc, #20]	@ (800091c <MPU6050_Read_Accel_Gyro_DMA+0x24>)
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	223b      	movs	r2, #59	@ 0x3b
 800090c:	21d0      	movs	r1, #208	@ 0xd0
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f001 fe30 	bl	8002574 <HAL_I2C_Mem_Read_DMA>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200001e0 	.word	0x200001e0

08000920 <HAL_I2C_MemRxCpltCallback>:

volatile uint8_t dma_complete = 0;

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000920:	b5b0      	push	{r4, r5, r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af04      	add	r7, sp, #16
 8000926:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <HAL_I2C_MemRxCpltCallback+0xbc>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d150      	bne.n	80009d4 <HAL_I2C_MemRxCpltCallback+0xb4>
        printf("DMA Callback Triggered!\r\n");
 8000932:	482b      	ldr	r0, [pc, #172]	@ (80009e0 <HAL_I2C_MemRxCpltCallback+0xc0>)
 8000934:	f005 fb16 	bl	8005f64 <puts>

        int16_t accel_x = (int16_t)(mpu_data[0] << 8 | mpu_data[1]);
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	b21a      	sxth	r2, r3
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000942:	785b      	ldrb	r3, [r3, #1]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	82fb      	strh	r3, [r7, #22]
        int16_t accel_y = (int16_t)(mpu_data[2] << 8 | mpu_data[3]);
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800094c:	789b      	ldrb	r3, [r3, #2]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	b21a      	sxth	r2, r3
 8000952:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000954:	78db      	ldrb	r3, [r3, #3]
 8000956:	b21b      	sxth	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	82bb      	strh	r3, [r7, #20]
        int16_t accel_z = (int16_t)(mpu_data[4] << 8 | mpu_data[5]);
 800095c:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800095e:	791b      	ldrb	r3, [r3, #4]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000966:	795b      	ldrb	r3, [r3, #5]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	827b      	strh	r3, [r7, #18]

        int16_t gyro_x = (int16_t)(mpu_data[8] << 8 | mpu_data[9]);
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000970:	7a1b      	ldrb	r3, [r3, #8]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000978:	7a5b      	ldrb	r3, [r3, #9]
 800097a:	b21b      	sxth	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	823b      	strh	r3, [r7, #16]
        int16_t gyro_y = (int16_t)(mpu_data[10] << 8 | mpu_data[11]);
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000982:	7a9b      	ldrb	r3, [r3, #10]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b21a      	sxth	r2, r3
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800098a:	7adb      	ldrb	r3, [r3, #11]
 800098c:	b21b      	sxth	r3, r3
 800098e:	4313      	orrs	r3, r2
 8000990:	81fb      	strh	r3, [r7, #14]
        int16_t gyro_z = (int16_t)(mpu_data[12] << 8 | mpu_data[13]);
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 8000994:	7b1b      	ldrb	r3, [r3, #12]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	b21a      	sxth	r2, r3
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <HAL_I2C_MemRxCpltCallback+0xc4>)
 800099c:	7b5b      	ldrb	r3, [r3, #13]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	81bb      	strh	r3, [r7, #12]

        printf("DMA Accel X: %d, Y: %d, Z: %d | Gyro X: %d, Y: %d, Z: %d\r\n",
 80009a4:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80009a8:	f9b7 4014 	ldrsh.w	r4, [r7, #20]
 80009ac:	f9b7 5012 	ldrsh.w	r5, [r7, #18]
 80009b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009b8:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80009bc:	9102      	str	r1, [sp, #8]
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	462b      	mov	r3, r5
 80009c4:	4622      	mov	r2, r4
 80009c6:	4601      	mov	r1, r0
 80009c8:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <HAL_I2C_MemRxCpltCallback+0xc8>)
 80009ca:	f005 fa63 	bl	8005e94 <iprintf>
               accel_x, accel_y, accel_z, gyro_x, gyro_y, gyro_z);

        dma_complete = 1;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_I2C_MemRxCpltCallback+0xcc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
    }
}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bdb0      	pop	{r4, r5, r7, pc}
 80009dc:	40005400 	.word	0x40005400
 80009e0:	08006cb0 	.word	0x08006cb0
 80009e4:	200001e0 	.word	0x200001e0
 80009e8:	08006ccc 	.word	0x08006ccc
 80009ec:	200001ee 	.word	0x200001ee

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a39      	ldr	r2, [pc, #228]	@ (8000b44 <HAL_I2C_MspInit+0x104>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d16c      	bne.n	8000b3c <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a37      	ldr	r2, [pc, #220]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a90:	2304      	movs	r3, #4
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482c      	ldr	r0, [pc, #176]	@ (8000b4c <HAL_I2C_MspInit+0x10c>)
 8000a9c:	f000 ff46 	bl	800192c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a27      	ldr	r2, [pc, #156]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000aaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <HAL_I2C_MspInit+0x108>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000abc:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000abe:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <HAL_I2C_MspInit+0x114>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ac2:	4b23      	ldr	r3, [pc, #140]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ac4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aca:	4b21      	ldr	r3, [pc, #132]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000aec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000af2:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000af4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000af8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000b02:	f000 fb67 	bl	80011d4 <HAL_DMA_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8000b0c:	f7ff febc 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000b14:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_I2C_MspInit+0x110>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	201f      	movs	r0, #31
 8000b22:	f000 fb20 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b26:	201f      	movs	r0, #31
 8000b28:	f000 fb39 	bl	800119e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2020      	movs	r0, #32
 8000b32:	f000 fb18 	bl	8001166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b36:	2020      	movs	r0, #32
 8000b38:	f000 fb31 	bl	800119e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40005400 	.word	0x40005400
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	200000d8 	.word	0x200000d8
 8000b54:	40026010 	.word	0x40026010

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a30      	ldr	r2, [pc, #192]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d15a      	bne.n	8000c30 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	4a2e      	ldr	r2, [pc, #184]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	4b28      	ldr	r3, [pc, #160]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b25      	ldr	r3, [pc, #148]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc2:	2307      	movs	r3, #7
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481c      	ldr	r0, [pc, #112]	@ (8000c40 <HAL_UART_MspInit+0xe8>)
 8000bce:	f000 fead 	bl	800192c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <HAL_UART_MspInit+0xf0>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000bda:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bde:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be0:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000be2:	2240      	movs	r2, #64	@ 0x40
 8000be4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000bee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000c00:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000c14:	480b      	ldr	r0, [pc, #44]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c16:	f000 fadd 	bl	80011d4 <HAL_DMA_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c20:	f7ff fe32 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a07      	ldr	r2, [pc, #28]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c2a:	4a06      	ldr	r2, [pc, #24]	@ (8000c44 <HAL_UART_MspInit+0xec>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	@ 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	20000180 	.word	0x20000180
 8000c48:	400260a0 	.word	0x400260a0

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f941 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <DMA1_Stream0_IRQHandler+0x10>)
 8000cb2:	f000 fbb7 	bl	8001424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000d8 	.word	0x200000d8

08000cc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <DMA1_Stream6_IRQHandler+0x10>)
 8000cc6:	f000 fbad 	bl	8001424 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000180 	.word	0x20000180

08000cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <I2C1_EV_IRQHandler+0x10>)
 8000cda:	f001 fddb 	bl	8002894 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000084 	.word	0x20000084

08000ce8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <I2C1_ER_IRQHandler+0x10>)
 8000cee:	f001 ff24 	bl	8002b3a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000084 	.word	0x20000084

08000cfc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e00a      	b.n	8000d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d0e:	f3af 8000 	nop.w
 8000d12:	4601      	mov	r1, r0
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	b2ca      	uxtb	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf0      	blt.n	8000d0e <_read+0x12>
  }

  return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f005 f9f6 	bl	80061c0 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20018000 	.word	0x20018000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200001f0 	.word	0x200001f0
 8000e08:	20000348 	.word	0x20000348

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f005 f9b5 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fb9b 	bl	800059c <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e74:	08006d6c 	.word	0x08006d6c
  ldr r2, =_sbss
 8000e78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e7c:	20000344 	.word	0x20000344

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f94f 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fd9a 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f967 	bl	80011ba <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f92f 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001f4 	.word	0x200001f4

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001f4 	.word	0x200001f4

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff29 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff3e 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff31 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ffa2 	bl	800110c <SysTick_Config>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff feb6 	bl	8000f50 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e099      	b.n	8001324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0201 	bic.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001210:	e00f      	b.n	8001232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001212:	f7ff fe9d 	bl	8000f50 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b05      	cmp	r3, #5
 800121e:	d908      	bls.n	8001232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2220      	movs	r2, #32
 8001224:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2203      	movs	r2, #3
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e078      	b.n	8001324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1e8      	bne.n	8001212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <HAL_DMA_Init+0x158>)
 800124c:	4013      	ands	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4313      	orrs	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	4313      	orrs	r3, r2
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4313      	orrs	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d117      	bne.n	80012f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00e      	beq.n	80012f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 faab 	bl	8001834 <DMA_CheckFifoParam>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d008      	beq.n	80012f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2240      	movs	r2, #64	@ 0x40
 80012e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012f2:	2301      	movs	r3, #1
 80012f4:	e016      	b.n	8001324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fa62 	bl	80017c8 <DMA_CalcBaseAndBitshift>
 8001304:	4603      	mov	r3, r0
 8001306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130c:	223f      	movs	r2, #63	@ 0x3f
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f010803f 	.word	0xf010803f

08001330 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001346:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800134e:	2b01      	cmp	r3, #1
 8001350:	d101      	bne.n	8001356 <HAL_DMA_Start_IT+0x26>
 8001352:	2302      	movs	r3, #2
 8001354:	e040      	b.n	80013d8 <HAL_DMA_Start_IT+0xa8>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d12f      	bne.n	80013ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2202      	movs	r2, #2
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f9f4 	bl	800176c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001388:	223f      	movs	r2, #63	@ 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0216 	orr.w	r2, r2, #22
 800139e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0208 	orr.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e005      	b.n	80013d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
 80013d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d004      	beq.n	80013fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2280      	movs	r2, #128	@ 0x80
 80013f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00c      	b.n	8001418 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001430:	4b8e      	ldr	r3, [pc, #568]	@ (800166c <HAL_DMA_IRQHandler+0x248>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a8e      	ldr	r2, [pc, #568]	@ (8001670 <HAL_DMA_IRQHandler+0x24c>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0a9b      	lsrs	r3, r3, #10
 800143c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144e:	2208      	movs	r2, #8
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d01a      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0204 	bic.w	r2, r2, #4
 8001476:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147c:	2208      	movs	r2, #8
 800147e:	409a      	lsls	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2201      	movs	r2, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d012      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b2:	2201      	movs	r2, #1
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014be:	f043 0202 	orr.w	r2, r3, #2
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ca:	2204      	movs	r2, #4
 80014cc:	409a      	lsls	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d012      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	2204      	movs	r2, #4
 80014ea:	409a      	lsls	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f4:	f043 0204 	orr.w	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001500:	2210      	movs	r2, #16
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4013      	ands	r3, r2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d043      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d03c      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151e:	2210      	movs	r2, #16
 8001520:	409a      	lsls	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d018      	beq.n	8001566 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	d024      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
 8001552:	e01f      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01b      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	4798      	blx	r3
 8001564:	e016      	b.n	8001594 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0208 	bic.w	r2, r2, #8
 8001582:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001598:	2220      	movs	r2, #32
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 808f 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0310 	and.w	r3, r3, #16
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8087 	beq.w	80016c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ba:	2220      	movs	r2, #32
 80015bc:	409a      	lsls	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d136      	bne.n	800163c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0216 	bic.w	r2, r2, #22
 80015dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d103      	bne.n	80015fe <HAL_DMA_IRQHandler+0x1da>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001612:	223f      	movs	r2, #63	@ 0x3f
 8001614:	409a      	lsls	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07e      	beq.n	8001730 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
        }
        return;
 800163a:	e079      	b.n	8001730 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01d      	beq.n	8001686 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165c:	2b00      	cmp	r3, #0
 800165e:	d031      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
 8001668:	e02c      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d023      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e01e      	b.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10f      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0210 	bic.w	r2, r2, #16
 80016a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d032      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2205      	movs	r2, #5
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d307      	bcc.n	800170c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f2      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x2cc>
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800170c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
 800172e:	e000      	b.n	8001732 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001730:	bf00      	nop
    }
  }
}
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001746:	b2db      	uxtb	r3, r3
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001788:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b40      	cmp	r3, #64	@ 0x40
 8001798:	d108      	bne.n	80017ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017aa:	e007      	b.n	80017bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b10      	subs	r3, #16
 80017d8:	4a14      	ldr	r2, [pc, #80]	@ (800182c <DMA_CalcBaseAndBitshift+0x64>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017e2:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <DMA_CalcBaseAndBitshift+0x68>)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d909      	bls.n	800180a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	1d1a      	adds	r2, r3, #4
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	659a      	str	r2, [r3, #88]	@ 0x58
 8001808:	e007      	b.n	800181a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	08006d20 	.word	0x08006d20

08001834 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2b03      	cmp	r3, #3
 8001852:	d856      	bhi.n	8001902 <DMA_CheckFifoParam+0xce>
 8001854:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <DMA_CheckFifoParam+0x28>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	0800187f 	.word	0x0800187f
 8001864:	0800186d 	.word	0x0800186d
 8001868:	08001903 	.word	0x08001903
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d046      	beq.n	8001906 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187c:	e043      	b.n	8001906 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001886:	d140      	bne.n	800190a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188c:	e03d      	b.n	800190a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001896:	d121      	bne.n	80018dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d837      	bhi.n	800190e <DMA_CheckFifoParam+0xda>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <DMA_CheckFifoParam+0x70>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	080018bb 	.word	0x080018bb
 80018ac:	080018b5 	.word	0x080018b5
 80018b0:	080018cd 	.word	0x080018cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
      break;
 80018b8:	e030      	b.n	800191c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d025      	beq.n	8001912 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ca:	e022      	b.n	8001912 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018da:	e01c      	b.n	8001916 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d903      	bls.n	80018ea <DMA_CheckFifoParam+0xb6>
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d003      	beq.n	80018f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018e8:	e018      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
      break;
 80018ee:	e015      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00e      	beq.n	800191a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001900:	e00b      	b.n	800191a <DMA_CheckFifoParam+0xe6>
      break;
 8001902:	bf00      	nop
 8001904:	e00a      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001906:	bf00      	nop
 8001908:	e008      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190a:	bf00      	nop
 800190c:	e006      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800190e:	bf00      	nop
 8001910:	e004      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 8001912:	bf00      	nop
 8001914:	e002      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;   
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
    }
  } 
  
  return status; 
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	e159      	b.n	8001bfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	f040 8148 	bne.w	8001bf6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	2b02      	cmp	r3, #2
 800197c:	d130      	bne.n	80019e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b4:	2201      	movs	r2, #1
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0201 	and.w	r2, r3, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d017      	beq.n	8001a1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d123      	bne.n	8001a70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	08da      	lsrs	r2, r3, #3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3208      	adds	r2, #8
 8001a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	220f      	movs	r2, #15
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a2 	beq.w	8001bf6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b57      	ldr	r3, [pc, #348]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	4a56      	ldr	r2, [pc, #344]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac2:	4b54      	ldr	r3, [pc, #336]	@ (8001c14 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ace:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a49      	ldr	r2, [pc, #292]	@ (8001c1c <HAL_GPIO_Init+0x2f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x202>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a48      	ldr	r2, [pc, #288]	@ (8001c20 <HAL_GPIO_Init+0x2f4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x1fe>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a47      	ldr	r2, [pc, #284]	@ (8001c24 <HAL_GPIO_Init+0x2f8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x1fa>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a46      	ldr	r2, [pc, #280]	@ (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x1f6>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a45      	ldr	r2, [pc, #276]	@ (8001c2c <HAL_GPIO_Init+0x300>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x1f2>
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	e008      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b1e:	2307      	movs	r3, #7
 8001b20:	e006      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e004      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e002      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e000      	b.n	8001b30 <HAL_GPIO_Init+0x204>
 8001b2e:	2300      	movs	r3, #0
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	f002 0203 	and.w	r2, r2, #3
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	4093      	lsls	r3, r2
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b40:	4935      	ldr	r1, [pc, #212]	@ (8001c18 <HAL_GPIO_Init+0x2ec>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b72:	4a2f      	ldr	r2, [pc, #188]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b78:	4b2d      	ldr	r3, [pc, #180]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b9c:	4a24      	ldr	r2, [pc, #144]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <HAL_GPIO_Init+0x304>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	2b0f      	cmp	r3, #15
 8001c00:	f67f aea2 	bls.w	8001948 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40013800 	.word	0x40013800
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40020800 	.word	0x40020800
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e12b      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe fed6 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	@ 0x24
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f003 fbec 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a81      	ldr	r2, [pc, #516]	@ (8001edc <HAL_I2C_Init+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d807      	bhi.n	8001cec <HAL_I2C_Init+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a80      	ldr	r2, [pc, #512]	@ (8001ee0 <HAL_I2C_Init+0x278>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e006      	b.n	8001cfa <HAL_I2C_Init+0x92>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a7d      	ldr	r2, [pc, #500]	@ (8001ee4 <HAL_I2C_Init+0x27c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0e7      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a78      	ldr	r2, [pc, #480]	@ (8001ee8 <HAL_I2C_Init+0x280>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	@ (8001edc <HAL_I2C_Init+0x274>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d802      	bhi.n	8001d3c <HAL_I2C_Init+0xd4>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e009      	b.n	8001d50 <HAL_I2C_Init+0xe8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a69      	ldr	r2, [pc, #420]	@ (8001eec <HAL_I2C_Init+0x284>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	495c      	ldr	r1, [pc, #368]	@ (8001edc <HAL_I2C_Init+0x274>)
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d819      	bhi.n	8001da4 <HAL_I2C_Init+0x13c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e59      	subs	r1, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_I2C_Init+0x138>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e59      	subs	r1, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	e051      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e04f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d111      	bne.n	8001dd0 <HAL_I2C_Init+0x168>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e012      	b.n	8001df6 <HAL_I2C_Init+0x18e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	0099      	lsls	r1, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x196>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e022      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <HAL_I2C_Init+0x1bc>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e58      	subs	r0, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	0099      	lsls	r1, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6911      	ldr	r1, [r2, #16]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	000186a0 	.word	0x000186a0
 8001ee0:	001e847f 	.word	0x001e847f
 8001ee4:	003d08ff 	.word	0x003d08ff
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f02:	2b80      	cmp	r3, #128	@ 0x80
 8001f04:	d103      	bne.n	8001f0e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	817b      	strh	r3, [r7, #10]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	813b      	strh	r3, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f36:	f7ff f80b 	bl	8000f50 <HAL_GetTick>
 8001f3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	f040 80d9 	bne.w	80020fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2319      	movs	r3, #25
 8001f50:	2201      	movs	r2, #1
 8001f52:	496d      	ldr	r1, [pc, #436]	@ (8002108 <HAL_I2C_Mem_Write+0x1ec>)
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f002 fbb3 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0cc      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_I2C_Mem_Write+0x56>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e0c5      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d007      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2221      	movs	r2, #33	@ 0x21
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a3a      	ldr	r2, [r7, #32]
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4a4d      	ldr	r2, [pc, #308]	@ (800210c <HAL_I2C_Mem_Write+0x1f0>)
 8001fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fda:	88f8      	ldrh	r0, [r7, #6]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	8979      	ldrh	r1, [r7, #10]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f002 f826 	bl	800403c <I2C_RequestMemoryWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d052      	beq.n	800209c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e081      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f002 fc78 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	2b04      	cmp	r3, #4
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e06b      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	781a      	ldrb	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <HAL_I2C_Mem_Write+0x180>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d017      	beq.n	800209c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1aa      	bne.n	8001ffa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f002 fc6b 	bl	8004984 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00d      	beq.n	80020d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d107      	bne.n	80020cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e016      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000

08002110 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	@ 0x30
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4603      	mov	r3, r0
 8002120:	817b      	strh	r3, [r7, #10]
 8002122:	460b      	mov	r3, r1
 8002124:	813b      	strh	r3, [r7, #8]
 8002126:	4613      	mov	r3, r2
 8002128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7fe ff11 	bl	8000f50 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b20      	cmp	r3, #32
 800213a:	f040 8214 	bne.w	8002566 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2319      	movs	r3, #25
 8002144:	2201      	movs	r2, #1
 8002146:	497b      	ldr	r1, [pc, #492]	@ (8002334 <HAL_I2C_Mem_Read+0x224>)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f002 fab9 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
 8002156:	e207      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Mem_Read+0x56>
 8002162:	2302      	movs	r3, #2
 8002164:	e200      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d007      	beq.n	800218c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2222      	movs	r2, #34	@ 0x22
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	@ 0x40
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80021bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002338 <HAL_I2C_Mem_Read+0x228>)
 80021cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021ce:	88f8      	ldrh	r0, [r7, #6]
 80021d0:	893a      	ldrh	r2, [r7, #8]
 80021d2:	8979      	ldrh	r1, [r7, #10]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4603      	mov	r3, r0
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f001 ffc2 	bl	8004168 <I2C_RequestMemoryRead>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1bc      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d113      	bne.n	800221e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	623b      	str	r3, [r7, #32]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	623b      	str	r3, [r7, #32]
 800220a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e190      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d11b      	bne.n	800225e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e170      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002262:	2b02      	cmp	r3, #2
 8002264:	d11b      	bne.n	800229e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	e150      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022b4:	e144      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	f200 80f1 	bhi.w	80024a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d123      	bne.n	8002310 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f002 fbd3 	bl	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e145      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800230e:	e117      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002314:	2b02      	cmp	r3, #2
 8002316:	d14e      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231e:	2200      	movs	r2, #0
 8002320:	4906      	ldr	r1, [pc, #24]	@ (800233c <HAL_I2C_Mem_Read+0x22c>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f002 f9cc 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e11a      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
 8002332:	bf00      	nop
 8002334:	00100002 	.word	0x00100002
 8002338:	ffff0000 	.word	0xffff0000
 800233c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800234e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023b4:	e0c4      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	2200      	movs	r2, #0
 80023be:	496c      	ldr	r1, [pc, #432]	@ (8002570 <HAL_I2C_Mem_Read+0x460>)
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f002 f97d 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0cb      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b01      	subs	r3, #1
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	2200      	movs	r2, #0
 800241a:	4955      	ldr	r1, [pc, #340]	@ (8002570 <HAL_I2C_Mem_Read+0x460>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f002 f94f 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e09d      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024a0:	e04e      	b.n	8002540 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f002 fae6 	bl	8004a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e058      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d124      	bne.n	8002540 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d107      	bne.n	800250e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800250c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f aeb6 	bne.w	80022b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	@ 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00010004 	.word	0x00010004

08002574 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	817b      	strh	r3, [r7, #10]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800258e:	f7fe fcdf 	bl	8000f50 <HAL_GetTick>
 8002592:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	f040 8172 	bne.w	800288a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80025a6:	4b93      	ldr	r3, [pc, #588]	@ (80027f4 <HAL_I2C_Mem_Read_DMA+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	4a92      	ldr	r2, [pc, #584]	@ (80027f8 <HAL_I2C_Mem_Read_DMA+0x284>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a1a      	lsrs	r2, r3, #8
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d112      	bne.n	80025f2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f043 0220 	orr.w	r2, r3, #32
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	e14c      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d0df      	beq.n	80025c0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2C_Mem_Read_DMA+0x9a>
 800260a:	2302      	movs	r3, #2
 800260c:	e13e      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d007      	beq.n	8002634 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002642:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2222      	movs	r2, #34	@ 0x22
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2240      	movs	r2, #64	@ 0x40
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002664:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a62      	ldr	r2, [pc, #392]	@ (80027fc <HAL_I2C_Mem_Read_DMA+0x288>)
 8002674:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002676:	897a      	ldrh	r2, [r7, #10]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800267c:	893a      	ldrh	r2, [r7, #8]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80cc 	beq.w	8002830 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02d      	beq.n	80026fc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	4a56      	ldr	r2, [pc, #344]	@ (8002800 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80026a6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	4a55      	ldr	r2, [pc, #340]	@ (8002804 <HAL_I2C_Mem_Read_DMA+0x290>)
 80026ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	2200      	movs	r2, #0
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c4:	2200      	movs	r2, #0
 80026c6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026cc:	2200      	movs	r2, #0
 80026ce:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3310      	adds	r3, #16
 80026da:	4619      	mov	r1, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	f7fe fe23 	bl	8001330 <HAL_DMA_Start_IT>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80026f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8087 	bne.w	8002808 <HAL_I2C_Mem_Read_DMA+0x294>
 80026fa:	e013      	b.n	8002724 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0b3      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002724:	88f8      	ldrh	r0, [r7, #6]
 8002726:	893a      	ldrh	r2, [r7, #8]
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2323      	movs	r3, #35	@ 0x23
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4603      	mov	r3, r0
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f001 fd17 	bl	8004168 <I2C_RequestMemoryRead>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d023      	beq.n	8002788 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fe4b 	bl	80013e0 <HAL_DMA_Abort_IT>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	2200      	movs	r2, #0
 8002756:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002766:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0201 	bic.w	r2, r2, #1
 8002782:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e081      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278c:	2b01      	cmp	r3, #1
 800278e:	d108      	bne.n	80027a2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e007      	b.n	80027b2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027de:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	e049      	b.n	8002886 <HAL_I2C_Mem_Read_DMA+0x312>
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000
 80027f8:	14f8b589 	.word	0x14f8b589
 80027fc:	ffff0000 	.word	0xffff0000
 8002800:	08004339 	.word	0x08004339
 8002804:	080044f7 	.word	0x080044f7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	f043 0210 	orr.w	r2, r3, #16
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02d      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002830:	88f8      	ldrh	r0, [r7, #6]
 8002832:	893a      	ldrh	r2, [r7, #8]
 8002834:	8979      	ldrh	r1, [r7, #10]
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2323      	movs	r3, #35	@ 0x23
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4603      	mov	r3, r0
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f001 fc91 	bl	8004168 <I2C_RequestMemoryRead>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e01d      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002874:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d003      	beq.n	80028cc <HAL_I2C_EV_IRQHandler+0x38>
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	f040 80b1 	bne.w	8002a2e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_I2C_EV_IRQHandler+0x6e>
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80028ec:	d003      	beq.n	80028f6 <HAL_I2C_EV_IRQHandler+0x62>
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_EV_IRQHandler+0x66>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_I2C_EV_IRQHandler+0x68>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f000 8114 	beq.w	8002b2a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00b      	beq.n	8002924 <HAL_I2C_EV_IRQHandler+0x90>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f002 f93a 	bl	8004b90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fd70 	bl	8003402 <I2C_Master_SB>
 8002922:	e083      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_I2C_EV_IRQHandler+0xac>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fde8 	bl	800350e <I2C_Master_ADD10>
 800293e:	e075      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_I2C_EV_IRQHandler+0xc8>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fe04 	bl	8003562 <I2C_Master_ADDR>
 800295a:	e067      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d036      	beq.n	80029d4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002974:	f000 80db 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <HAL_I2C_EV_IRQHandler+0x10a>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_I2C_EV_IRQHandler+0x10a>
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9cc 	bl	8002d34 <I2C_MasterTransmit_TXE>
 800299c:	e046      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80c2 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80bc 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b21      	cmp	r3, #33	@ 0x21
 80029ba:	d103      	bne.n	80029c4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fa55 	bl	8002e6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c2:	e0b4      	b.n	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	f040 80b1 	bne.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fac3 	bl	8002f58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d2:	e0ac      	b.n	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e2:	f000 80a4 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x178>
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_I2C_EV_IRQHandler+0x178>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d103      	bne.n	8002a0c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb3f 	bl	8003088 <I2C_MasterReceive_RXNE>
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 808b 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8085 	beq.w	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fbf7 	bl	8003218 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a2a:	e080      	b.n	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
 8002a2c:	e07f      	b.n	8002b2e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e007      	b.n	8002a50 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_I2C_EV_IRQHandler+0x1ea>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 ffc2 	bl	8003a00 <I2C_Slave_ADDR>
 8002a7c:	e05a      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_I2C_EV_IRQHandler+0x206>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fffc 	bl	8003a90 <I2C_Slave_STOPF>
 8002a98:	e04c      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	2b21      	cmp	r3, #33	@ 0x21
 8002a9e:	d002      	beq.n	8002aa6 <HAL_I2C_EV_IRQHandler+0x212>
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b29      	cmp	r3, #41	@ 0x29
 8002aa4:	d120      	bne.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x238>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x238>
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fedd 	bl	8003884 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aca:	e032      	b.n	8002b32 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d02d      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x29e>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d028      	beq.n	8002b32 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 ff0c 	bl	80038fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae6:	e024      	b.n	8002b32 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x27a>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x27a>
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 ff1a 	bl	8003940 <I2C_SlaveReceive_RXNE>
 8002b0c:	e012      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 ff4a 	bl	80039bc <I2C_SlaveReceive_BTF>
 8002b28:	e004      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b08a      	sub	sp, #40	@ 0x28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <HAL_I2C_ER_IRQHandler+0x4a>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_I2C_ER_IRQHandler+0x70>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002ba8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d03e      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0xf8>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d039      	beq.n	8002c32 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002bbe:	7efb      	ldrb	r3, [r7, #27]
 8002bc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bd8:	7ebb      	ldrb	r3, [r7, #26]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d112      	bne.n	8002c04 <HAL_I2C_ER_IRQHandler+0xca>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10f      	bne.n	8002c04 <HAL_I2C_ER_IRQHandler+0xca>
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	2b21      	cmp	r3, #33	@ 0x21
 8002be8:	d008      	beq.n	8002bfc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b29      	cmp	r3, #41	@ 0x29
 8002bee:	d005      	beq.n	8002bfc <HAL_I2C_ER_IRQHandler+0xc2>
 8002bf0:	7cfb      	ldrb	r3, [r7, #19]
 8002bf2:	2b28      	cmp	r3, #40	@ 0x28
 8002bf4:	d106      	bne.n	8002c04 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b21      	cmp	r3, #33	@ 0x21
 8002bfa:	d103      	bne.n	8002c04 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f001 f877 	bl	8003cf0 <I2C_Slave_AF>
 8002c02:	e016      	b.n	8002c32 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c16:	7efb      	ldrb	r3, [r7, #27]
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d002      	beq.n	8002c22 <HAL_I2C_ER_IRQHandler+0xe8>
 8002c1c:	7efb      	ldrb	r3, [r7, #27]
 8002c1e:	2b40      	cmp	r3, #64	@ 0x40
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_I2C_ER_IRQHandler+0x11e>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002c56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 f8b4 	bl	8003dd8 <I2C_ITError>
  }
}
 8002c70:	bf00      	nop
 8002c72:	3728      	adds	r7, #40	@ 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d150      	bne.n	8002dfc <I2C_MasterTransmit_TXE+0xc8>
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b21      	cmp	r3, #33	@ 0x21
 8002d5e:	d14d      	bne.n	8002dfc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d01d      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d01a      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d72:	d016      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2211      	movs	r2, #17
 8002d88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff6c 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da0:	e060      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002db0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b40      	cmp	r3, #64	@ 0x40
 8002dda:	d107      	bne.n	8002dec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff87 	bl	8002cf8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dea:	e03b      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff3f 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dfa:	e033      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b21      	cmp	r3, #33	@ 0x21
 8002e00:	d005      	beq.n	8002e0e <I2C_MasterTransmit_TXE+0xda>
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	2b40      	cmp	r3, #64	@ 0x40
 8002e06:	d12d      	bne.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b22      	cmp	r3, #34	@ 0x22
 8002e0c:	d12a      	bne.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e28:	e01c      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b40      	cmp	r3, #64	@ 0x40
 8002e34:	d103      	bne.n	8002e3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f88e 	bl	8002f58 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e3c:	e012      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e62:	e7ff      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b21      	cmp	r3, #33	@ 0x21
 8002e84:	d164      	bne.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002eb4:	e04c      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d01d      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d01a      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec8:	d016      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ed8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2211      	movs	r2, #17
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fec1 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
}
 8002ef6:	e02b      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b40      	cmp	r3, #64	@ 0x40
 8002f30:	d107      	bne.n	8002f42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fedc 	bl	8002cf8 <HAL_I2C_MemTxCpltCallback>
}
 8002f40:	e006      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fe94 	bl	8002c78 <HAL_I2C_MasterTxCpltCallback>
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11d      	bne.n	8002fac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10b      	bne.n	8002f90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002f8e:	e077      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	121b      	asrs	r3, r3, #8
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002faa:	e069      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10b      	bne.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002fca:	e059      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d152      	bne.n	800307a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b22      	cmp	r3, #34	@ 0x22
 8002fd8:	d10d      	bne.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ff4:	e044      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b21      	cmp	r3, #33	@ 0x21
 8003004:	d112      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800302a:	e029      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d124      	bne.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b21      	cmp	r3, #33	@ 0x21
 800303a:	d121      	bne.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800304a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800305a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fe40 	bl	8002cf8 <HAL_I2C_MemTxCpltCallback>
}
 8003078:	e002      	b.n	8003080 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe ff38 	bl	8001ef0 <I2C_Flush_DR>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b22      	cmp	r3, #34	@ 0x22
 800309a:	f040 80b9 	bne.w	8003210 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d921      	bls.n	80030f6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	f040 8096 	bne.w	8003210 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030f2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80030f4:	e08c      	b.n	8003210 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d07f      	beq.n	80031fe <I2C_MasterReceive_RXNE+0x176>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d002      	beq.n	800310a <I2C_MasterReceive_RXNE+0x82>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d179      	bne.n	80031fe <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f001 fc82 	bl	8004a14 <I2C_WaitOnSTOPRequestThroughIT>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d14c      	bne.n	80031b0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003124:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003134:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b40      	cmp	r3, #64	@ 0x40
 800316e:	d10a      	bne.n	8003186 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fbce 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003184:	e044      	b.n	8003210 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d002      	beq.n	800319a <I2C_MasterReceive_RXNE+0x112>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b20      	cmp	r3, #32
 8003198:	d103      	bne.n	80031a2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	@ 0x30
 80031a0:	e002      	b.n	80031a8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2212      	movs	r2, #18
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fd6f 	bl	8002c8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031ae:	e02f      	b.n	8003210 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031be:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fd88 	bl	8002d0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031fc:	e008      	b.n	8003210 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800320c:	605a      	str	r2, [r3, #4]
}
 800320e:	e7ff      	b.n	8003210 <I2C_MasterReceive_RXNE+0x188>
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11b      	bne.n	8003268 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003266:	e0c8      	b.n	80033fa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b03      	cmp	r3, #3
 8003270:	d129      	bne.n	80032c6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003280:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00a      	beq.n	800329e <I2C_MasterReceive_BTF+0x86>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d007      	beq.n	800329e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80032c4:	e099      	b.n	80033fa <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f040 8081 	bne.w	80033d4 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d002      	beq.n	80032de <I2C_MasterReceive_BTF+0xc6>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d108      	bne.n	80032f0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e019      	b.n	8003324 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d002      	beq.n	80032fc <I2C_MasterReceive_BTF+0xe4>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d108      	bne.n	800330e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e00a      	b.n	8003324 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b10      	cmp	r3, #16
 8003312:	d007      	beq.n	8003324 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003322:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800337e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d10a      	bne.n	80033aa <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fd fabc 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
}
 80033a8:	e027      	b.n	80033fa <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d002      	beq.n	80033be <I2C_MasterReceive_BTF+0x1a6>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d103      	bne.n	80033c6 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033c4:	e002      	b.n	80033cc <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2212      	movs	r2, #18
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fc5d 	bl	8002c8c <HAL_I2C_MasterRxCpltCallback>
}
 80033d2:	e012      	b.n	80033fa <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b40      	cmp	r3, #64	@ 0x40
 8003414:	d117      	bne.n	8003446 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800342e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003430:	e067      	b.n	8003502 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	b2db      	uxtb	r3, r3
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	b2da      	uxtb	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	611a      	str	r2, [r3, #16]
}
 8003444:	e05d      	b.n	8003502 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800344e:	d133      	bne.n	80034b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b21      	cmp	r3, #33	@ 0x21
 800345a:	d109      	bne.n	8003470 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003460:	b2db      	uxtb	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800346c:	611a      	str	r2, [r3, #16]
 800346e:	e008      	b.n	8003482 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <I2C_Master_SB+0x92>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d108      	bne.n	80034a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <I2C_Master_SB+0x100>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02d      	beq.n	8003502 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034b4:	605a      	str	r2, [r3, #4]
}
 80034b6:	e024      	b.n	8003502 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10e      	bne.n	80034de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	11db      	asrs	r3, r3, #7
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0306 	and.w	r3, r3, #6
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f063 030f 	orn	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
}
 80034dc:	e011      	b.n	8003502 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10d      	bne.n	8003502 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	11db      	asrs	r3, r3, #7
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 0306 	and.w	r3, r3, #6
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f063 030e 	orn	r3, r3, #14
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	611a      	str	r2, [r3, #16]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	b2da      	uxtb	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <I2C_Master_ADD10+0x26>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <I2C_Master_ADD10+0x48>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003554:	605a      	str	r2, [r3, #4]
  }
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003562:	b480      	push	{r7}
 8003564:	b091      	sub	sp, #68	@ 0x44
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003570:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b22      	cmp	r3, #34	@ 0x22
 800358a:	f040 8169 	bne.w	8003860 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <I2C_Master_ADDR+0x54>
 8003596:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800359a:	2b40      	cmp	r3, #64	@ 0x40
 800359c:	d10b      	bne.n	80035b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359e:	2300      	movs	r3, #0
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	e160      	b.n	8003878 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11d      	bne.n	80035fa <I2C_Master_ADDR+0x98>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80035c6:	d118      	bne.n	80035fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c8:	2300      	movs	r3, #0
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80035f8:	e13e      	b.n	8003878 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e115      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	f040 808a 	bne.w	800374c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800363e:	d137      	bne.n	80036b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800364e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800365a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800365e:	d113      	bne.n	8003688 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	627b      	str	r3, [r7, #36]	@ 0x24
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	e0e7      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e0d3      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d02e      	beq.n	8003714 <I2C_Master_ADDR+0x1b2>
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d02b      	beq.n	8003714 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80036bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d102      	bne.n	80036c8 <I2C_Master_ADDR+0x166>
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d125      	bne.n	8003714 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00e      	beq.n	80036ec <I2C_Master_ADDR+0x18a>
 80036ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d00b      	beq.n	80036ec <I2C_Master_ADDR+0x18a>
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d008      	beq.n	80036ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	e0a1      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003722:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003724:	2300      	movs	r3, #0
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e085      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d14d      	bne.n	80037f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	2b04      	cmp	r3, #4
 800375a:	d016      	beq.n	800378a <I2C_Master_ADDR+0x228>
 800375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800375e:	2b02      	cmp	r3, #2
 8003760:	d013      	beq.n	800378a <I2C_Master_ADDR+0x228>
 8003762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003764:	2b10      	cmp	r3, #16
 8003766:	d010      	beq.n	800378a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003776:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e007      	b.n	800379a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003798:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a8:	d117      	bne.n	80037da <I2C_Master_ADDR+0x278>
 80037aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037b0:	d00b      	beq.n	80037ca <I2C_Master_ADDR+0x268>
 80037b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d008      	beq.n	80037ca <I2C_Master_ADDR+0x268>
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d005      	beq.n	80037ca <I2C_Master_ADDR+0x268>
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	d002      	beq.n	80037ca <I2C_Master_ADDR+0x268>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d107      	bne.n	80037da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	e032      	b.n	8003858 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003800:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d117      	bne.n	8003842 <I2C_Master_ADDR+0x2e0>
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003818:	d00b      	beq.n	8003832 <I2C_Master_ADDR+0x2d0>
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	2b01      	cmp	r3, #1
 800381e:	d008      	beq.n	8003832 <I2C_Master_ADDR+0x2d0>
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003822:	2b08      	cmp	r3, #8
 8003824:	d005      	beq.n	8003832 <I2C_Master_ADDR+0x2d0>
 8003826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003828:	2b10      	cmp	r3, #16
 800382a:	d002      	beq.n	8003832 <I2C_Master_ADDR+0x2d0>
 800382c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800382e:	2b20      	cmp	r3, #32
 8003830:	d107      	bne.n	8003842 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003840:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800385e:	e00b      	b.n	8003878 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
}
 8003876:	e7ff      	b.n	8003878 <I2C_Master_ADDR+0x316>
 8003878:	bf00      	nop
 800387a:	3744      	adds	r7, #68	@ 0x44
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003892:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02b      	beq.n	80038f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d114      	bne.n	80038f6 <I2C_SlaveTransmit_TXE+0x72>
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b29      	cmp	r3, #41	@ 0x29
 80038d0:	d111      	bne.n	80038f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2221      	movs	r2, #33	@ 0x21
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2228      	movs	r2, #40	@ 0x28
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff f9d5 	bl	8002ca0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02c      	beq.n	80039b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691a      	ldr	r2, [r3, #16]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d114      	bne.n	80039b4 <I2C_SlaveReceive_RXNE+0x74>
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b2a      	cmp	r3, #42	@ 0x2a
 800398e:	d111      	bne.n	80039b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800399e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2222      	movs	r2, #34	@ 0x22
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2228      	movs	r2, #40	@ 0x28
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff f980 	bl	8002cb4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a1a:	2b28      	cmp	r3, #40	@ 0x28
 8003a1c:	d125      	bne.n	8003a6a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	81bb      	strh	r3, [r7, #12]
 8003a4c:	e002      	b.n	8003a54 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a5c:	89ba      	ldrh	r2, [r7, #12]
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff f930 	bl	8002cc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a68:	e00e      	b.n	8003a88 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a9e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003adc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aec:	d172      	bne.n	8003bd4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b22      	cmp	r3, #34	@ 0x22
 8003af2:	d002      	beq.n	8003afa <I2C_Slave_STOPF+0x6a>
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003af8:	d135      	bne.n	8003b66 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd fe00 	bl	8001738 <HAL_DMA_GetState>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d049      	beq.n	8003bd2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	4a69      	ldr	r2, [pc, #420]	@ (8003ce8 <I2C_Slave_STOPF+0x258>)
 8003b44:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fc48 	bl	80013e0 <HAL_DMA_Abort_IT>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d03d      	beq.n	8003bd2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b60:	4610      	mov	r0, r2
 8003b62:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b64:	e035      	b.n	8003bd2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f043 0204 	orr.w	r2, r3, #4
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd fdca 	bl	8001738 <HAL_DMA_GetState>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d014      	beq.n	8003bd4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bae:	4a4e      	ldr	r2, [pc, #312]	@ (8003ce8 <I2C_Slave_STOPF+0x258>)
 8003bb0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fc12 	bl	80013e0 <HAL_DMA_Abort_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4798      	blx	r3
 8003bd0:	e000      	b.n	8003bd4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bd2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03e      	beq.n	8003c5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d112      	bne.n	8003c12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b40      	cmp	r3, #64	@ 0x40
 8003c1e:	d112      	bne.n	8003c46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	f043 0204 	orr.w	r2, r3, #4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f8b7 	bl	8003dd8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c6a:	e039      	b.n	8003ce0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c70:	d109      	bne.n	8003c86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2228      	movs	r2, #40	@ 0x28
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff f817 	bl	8002cb4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b28      	cmp	r3, #40	@ 0x28
 8003c90:	d111      	bne.n	8003cb6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a15      	ldr	r2, [pc, #84]	@ (8003cec <I2C_Slave_STOPF+0x25c>)
 8003c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff f818 	bl	8002ce4 <HAL_I2C_ListenCpltCallback>
}
 8003cb4:	e014      	b.n	8003ce0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	2b22      	cmp	r3, #34	@ 0x22
 8003cbc:	d002      	beq.n	8003cc4 <I2C_Slave_STOPF+0x234>
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b22      	cmp	r3, #34	@ 0x22
 8003cc2:	d10d      	bne.n	8003ce0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe ffea 	bl	8002cb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ce0:	bf00      	nop
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	08004571 	.word	0x08004571
 8003cec:	ffff0000 	.word	0xffff0000

08003cf0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d002      	beq.n	8003d12 <I2C_Slave_AF+0x22>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d129      	bne.n	8003d66 <I2C_Slave_AF+0x76>
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b28      	cmp	r3, #40	@ 0x28
 8003d16:	d126      	bne.n	8003d66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd4 <I2C_Slave_AF+0xe4>)
 8003d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe ffc0 	bl	8002ce4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d64:	e031      	b.n	8003dca <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b21      	cmp	r3, #33	@ 0x21
 8003d6a:	d129      	bne.n	8003dc0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a19      	ldr	r2, [pc, #100]	@ (8003dd4 <I2C_Slave_AF+0xe4>)
 8003d70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2221      	movs	r2, #33	@ 0x21
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003da0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe f89c 	bl	8001ef0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7fe ff71 	bl	8002ca0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003dbe:	e004      	b.n	8003dca <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc8:	615a      	str	r2, [r3, #20]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	ffff0000 	.word	0xffff0000

08003dd8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003df0:	7bbb      	ldrb	r3, [r7, #14]
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d002      	beq.n	8003dfc <I2C_ITError+0x24>
 8003df6:	7bbb      	ldrb	r3, [r7, #14]
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d10a      	bne.n	8003e12 <I2C_ITError+0x3a>
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b22      	cmp	r3, #34	@ 0x22
 8003e00:	d107      	bne.n	8003e12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e18:	2b28      	cmp	r3, #40	@ 0x28
 8003e1a:	d107      	bne.n	8003e2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2228      	movs	r2, #40	@ 0x28
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e2a:	e015      	b.n	8003e58 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3a:	d00a      	beq.n	8003e52 <I2C_ITError+0x7a>
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	2b60      	cmp	r3, #96	@ 0x60
 8003e40:	d007      	beq.n	8003e52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e66:	d162      	bne.n	8003f2e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d020      	beq.n	8003ec8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004034 <I2C_ITError+0x25c>)
 8003e8c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd faa4 	bl	80013e0 <HAL_DMA_Abort_IT>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8089 	beq.w	8003fb2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4798      	blx	r3
 8003ec6:	e074      	b.n	8003fb2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	4a59      	ldr	r2, [pc, #356]	@ (8004034 <I2C_ITError+0x25c>)
 8003ece:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fa83 	bl	80013e0 <HAL_DMA_Abort_IT>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d068      	beq.n	8003fb2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d10b      	bne.n	8003f06 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4798      	blx	r3
 8003f2c:	e041      	b.n	8003fb2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b60      	cmp	r3, #96	@ 0x60
 8003f38:	d125      	bne.n	8003f86 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b40      	cmp	r3, #64	@ 0x40
 8003f54:	d10b      	bne.n	8003f6e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe fece 	bl	8002d20 <HAL_I2C_AbortCpltCallback>
 8003f84:	e015      	b.n	8003fb2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b40      	cmp	r3, #64	@ 0x40
 8003f92:	d10b      	bne.n	8003fac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7fe fead 	bl	8002d0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10e      	bne.n	8003fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d104      	bne.n	8003fe0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b04      	cmp	r3, #4
 8004002:	d113      	bne.n	800402c <I2C_ITError+0x254>
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b28      	cmp	r3, #40	@ 0x28
 8004008:	d110      	bne.n	800402c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <I2C_ITError+0x260>)
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fe fe5c 	bl	8002ce4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08004571 	.word	0x08004571
 8004038:	ffff0000 	.word	0xffff0000

0800403c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af02      	add	r7, sp, #8
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	461a      	mov	r2, r3
 800404a:	4603      	mov	r3, r0
 800404c:	817b      	strh	r3, [r7, #10]
 800404e:	460b      	mov	r3, r1
 8004050:	813b      	strh	r3, [r7, #8]
 8004052:	4613      	mov	r3, r2
 8004054:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004064:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	2200      	movs	r2, #0
 800406e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 fb24 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800408c:	d103      	bne.n	8004096 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e05f      	b.n	800415a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	492d      	ldr	r1, [pc, #180]	@ (8004164 <I2C_RequestMemoryWrite+0x128>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fb7f 	bl	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e04c      	b.n	800415a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	6a39      	ldr	r1, [r7, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fc0a 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00d      	beq.n	8004102 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d107      	bne.n	80040fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e02b      	b.n	800415a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004108:	893b      	ldrh	r3, [r7, #8]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
 8004112:	e021      	b.n	8004158 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	b29b      	uxth	r3, r3
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004124:	6a39      	ldr	r1, [r7, #32]
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fbe4 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2b04      	cmp	r3, #4
 8004138:	d107      	bne.n	800414a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004148:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e005      	b.n	800415a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800414e:	893b      	ldrh	r3, [r7, #8]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	00010002 	.word	0x00010002

08004168 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	4608      	mov	r0, r1
 8004172:	4611      	mov	r1, r2
 8004174:	461a      	mov	r2, r3
 8004176:	4603      	mov	r3, r0
 8004178:	817b      	strh	r3, [r7, #10]
 800417a:	460b      	mov	r3, r1
 800417c:	813b      	strh	r3, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004190:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa86 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c8:	d103      	bne.n	80041d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e0aa      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	6a3a      	ldr	r2, [r7, #32]
 80041ea:	4952      	ldr	r1, [pc, #328]	@ (8004334 <I2C_RequestMemoryRead+0x1cc>)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fae1 	bl	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e097      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fc:	2300      	movs	r3, #0
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fb6c 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2b04      	cmp	r3, #4
 8004228:	d107      	bne.n	800423a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004238:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e076      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d105      	bne.n	8004250 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004244:	893b      	ldrh	r3, [r7, #8]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e021      	b.n	8004294 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004250:	893b      	ldrh	r3, [r7, #8]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800425e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004260:	6a39      	ldr	r1, [r7, #32]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fb46 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004284:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e050      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004296:	6a39      	ldr	r1, [r7, #32]
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 fb2b 	bl	80048f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d107      	bne.n	80042bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e035      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f9ef 	bl	80046c0 <I2C_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f6:	d103      	bne.n	8004300 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e013      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004304:	897b      	ldrh	r3, [r7, #10]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	6a3a      	ldr	r2, [r7, #32]
 8004318:	4906      	ldr	r1, [pc, #24]	@ (8004334 <I2C_RequestMemoryRead+0x1cc>)
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa4a 	bl	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	00010002 	.word	0x00010002

08004338 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004344:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004354:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800436a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004378:	2200      	movs	r2, #0
 800437a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	2200      	movs	r2, #0
 800438a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004392:	2b21      	cmp	r3, #33	@ 0x21
 8004394:	d007      	beq.n	80043a6 <I2C_DMAXferCplt+0x6e>
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800439c:	2b22      	cmp	r3, #34	@ 0x22
 800439e:	d131      	bne.n	8004404 <I2C_DMAXferCplt+0xcc>
 80043a0:	7cbb      	ldrb	r3, [r7, #18]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d12e      	bne.n	8004404 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b29      	cmp	r3, #41	@ 0x29
 80043c0:	d10a      	bne.n	80043d8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2221      	movs	r2, #33	@ 0x21
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2228      	movs	r2, #40	@ 0x28
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80043d0:	6978      	ldr	r0, [r7, #20]
 80043d2:	f7fe fc65 	bl	8002ca0 <HAL_I2C_SlaveTxCpltCallback>
 80043d6:	e00c      	b.n	80043f2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b2a      	cmp	r3, #42	@ 0x2a
 80043dc:	d109      	bne.n	80043f2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2222      	movs	r2, #34	@ 0x22
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2228      	movs	r2, #40	@ 0x28
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043ec:	6978      	ldr	r0, [r7, #20]
 80043ee:	f7fe fc61 	bl	8002cb4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004400:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004402:	e074      	b.n	80044ee <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d06e      	beq.n	80044ee <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d107      	bne.n	800442a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004428:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004438:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004440:	d009      	beq.n	8004456 <I2C_DMAXferCplt+0x11e>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d006      	beq.n	8004456 <I2C_DMAXferCplt+0x11e>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800444e:	d002      	beq.n	8004456 <I2C_DMAXferCplt+0x11e>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b20      	cmp	r3, #32
 8004454:	d107      	bne.n	8004466 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004464:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004474:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004484:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2200      	movs	r2, #0
 800448a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	f7fe fc39 	bl	8002d0c <HAL_I2C_ErrorCallback>
}
 800449a:	e028      	b.n	80044ee <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b40      	cmp	r3, #64	@ 0x40
 80044ae:	d10a      	bne.n	80044c6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2200      	movs	r2, #0
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7fc fa2e 	bl	8000920 <HAL_I2C_MemRxCpltCallback>
}
 80044c4:	e013      	b.n	80044ee <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d002      	beq.n	80044da <I2C_DMAXferCplt+0x1a2>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d103      	bne.n	80044e2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
 80044e0:	e002      	b.n	80044e8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2212      	movs	r2, #18
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f7fe fbcf 	bl	8002c8c <HAL_I2C_MasterRxCpltCallback>
}
 80044ee:	bf00      	nop
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	2200      	movs	r2, #0
 8004512:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004520:	2200      	movs	r2, #0
 8004522:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fd f915 	bl	8001754 <HAL_DMA_GetError>
 800452a:	4603      	mov	r3, r0
 800452c:	2b02      	cmp	r3, #2
 800452e:	d01b      	beq.n	8004568 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f043 0210 	orr.w	r2, r3, #16
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7fe fbd2 	bl	8002d0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004588:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800458a:	4b4b      	ldr	r3, [pc, #300]	@ (80046b8 <I2C_DMAAbort+0x148>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	4a4a      	ldr	r2, [pc, #296]	@ (80046bc <I2C_DMAAbort+0x14c>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0a1a      	lsrs	r2, r3, #8
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	00da      	lsls	r2, r3, #3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f043 0220 	orr.w	r2, r3, #32
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80045b6:	e00a      	b.n	80045ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045cc:	d0ea      	beq.n	80045a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	2200      	movs	r2, #0
 80045dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	2200      	movs	r2, #0
 80045ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2200      	movs	r2, #0
 8004602:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004610:	2200      	movs	r2, #0
 8004612:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	2200      	movs	r2, #0
 8004622:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0201 	bic.w	r2, r2, #1
 8004632:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b60      	cmp	r3, #96	@ 0x60
 800463e:	d10e      	bne.n	800465e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004656:	6978      	ldr	r0, [r7, #20]
 8004658:	f7fe fb62 	bl	8002d20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800465c:	e027      	b.n	80046ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004664:	2b28      	cmp	r3, #40	@ 0x28
 8004666:	d117      	bne.n	8004698 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004686:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2228      	movs	r2, #40	@ 0x28
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004696:	e007      	b.n	80046a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80046a8:	6978      	ldr	r0, [r7, #20]
 80046aa:	f7fe fb2f 	bl	8002d0c <HAL_I2C_ErrorCallback>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20000000 	.word	0x20000000
 80046bc:	14f8b589 	.word	0x14f8b589

080046c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046d0:	e048      	b.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d044      	beq.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7fc fc39 	bl	8000f50 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d139      	bne.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <I2C_WaitOnFlagUntilTimeout+0x56>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	43da      	mvns	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	e00c      	b.n	8004730 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	43da      	mvns	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	4013      	ands	r3, r2
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	429a      	cmp	r2, r3
 8004734:	d116      	bne.n	8004764 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e023      	b.n	80047ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	0c1b      	lsrs	r3, r3, #16
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10d      	bne.n	800478a <I2C_WaitOnFlagUntilTimeout+0xca>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	43da      	mvns	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4013      	ands	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	e00c      	b.n	80047a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	43da      	mvns	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d093      	beq.n	80046d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c2:	e071      	b.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d2:	d123      	bne.n	800481c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f043 0204 	orr.w	r2, r3, #4
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e067      	b.n	80048ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d041      	beq.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004824:	f7fc fb94 	bl	8000f50 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d136      	bne.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d10c      	bne.n	800485e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	e00b      	b.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	43da      	mvns	r2, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d016      	beq.n	80048a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e021      	b.n	80048ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10c      	bne.n	80048cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e00b      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	43da      	mvns	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bf14      	ite	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	2300      	moveq	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f47f af6d 	bne.w	80047c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004900:	e034      	b.n	800496c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 f915 	bl	8004b32 <I2C_IsAcknowledgeFailed>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e034      	b.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d028      	beq.n	800496c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fc fb19 	bl	8000f50 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11d      	bne.n	800496c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493a:	2b80      	cmp	r3, #128	@ 0x80
 800493c:	d016      	beq.n	800496c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e007      	b.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d1c3      	bne.n	8004902 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004990:	e034      	b.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f8cd 	bl	8004b32 <I2C_IsAcknowledgeFailed>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e034      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d028      	beq.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7fc fad1 	bl	8000f50 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d11d      	bne.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d016      	beq.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d1c3      	bne.n	8004992 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a20:	4b13      	ldr	r3, [pc, #76]	@ (8004a70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	0a1a      	lsrs	r2, r3, #8
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d107      	bne.n	8004a52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e008      	b.n	8004a64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a60:	d0e9      	beq.n	8004a36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000000 	.word	0x20000000
 8004a74:	14f8b589 	.word	0x14f8b589

08004a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a84:	e049      	b.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d119      	bne.n	8004ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0210 	mvn.w	r2, #16
 8004a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e030      	b.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac8:	f7fc fa42 	bl	8000f50 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11d      	bne.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b40      	cmp	r3, #64	@ 0x40
 8004aea:	d016      	beq.n	8004b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f043 0220 	orr.w	r2, r3, #32
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e007      	b.n	8004b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b24:	2b40      	cmp	r3, #64	@ 0x40
 8004b26:	d1ae      	bne.n	8004a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b48:	d11b      	bne.n	8004b82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f043 0204 	orr.w	r2, r3, #4
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ba0:	d103      	bne.n	8004baa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ba8:	e007      	b.n	8004bba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004bb2:	d102      	bne.n	8004bba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e267      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d075      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004be6:	4b88      	ldr	r3, [pc, #544]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b85      	ldr	r3, [pc, #532]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d112      	bne.n	8004c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfe:	4b82      	ldr	r3, [pc, #520]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05b      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x108>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d157      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e242      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2c:	d106      	bne.n	8004c3c <HAL_RCC_OscConfig+0x74>
 8004c2e:	4b76      	ldr	r3, [pc, #472]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a75      	ldr	r2, [pc, #468]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e01d      	b.n	8004c78 <HAL_RCC_OscConfig+0xb0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c44:	d10c      	bne.n	8004c60 <HAL_RCC_OscConfig+0x98>
 8004c46:	4b70      	ldr	r3, [pc, #448]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b6d      	ldr	r3, [pc, #436]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6c      	ldr	r2, [pc, #432]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCC_OscConfig+0xb0>
 8004c60:	4b69      	ldr	r3, [pc, #420]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a68      	ldr	r2, [pc, #416]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	4b66      	ldr	r3, [pc, #408]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a65      	ldr	r2, [pc, #404]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fc f966 	bl	8000f50 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fc f962 	bl	8000f50 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e207      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0xc0>
 8004ca6:	e014      	b.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fc f952 	bl	8000f50 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb0:	f7fc f94e 	bl	8000f50 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b64      	cmp	r3, #100	@ 0x64
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e1f3      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	4b51      	ldr	r3, [pc, #324]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xe8>
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d063      	beq.n	8004da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cde:	4b4a      	ldr	r3, [pc, #296]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00b      	beq.n	8004d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b47      	ldr	r3, [pc, #284]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d11c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf6:	4b44      	ldr	r3, [pc, #272]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d116      	bne.n	8004d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d02:	4b41      	ldr	r3, [pc, #260]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCC_OscConfig+0x152>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e1c7      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4937      	ldr	r1, [pc, #220]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2e:	e03a      	b.n	8004da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d020      	beq.n	8004d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d38:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fc f907 	bl	8000f50 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fc f903 	bl	8000f50 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e1a8      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d58:	4b2b      	ldr	r3, [pc, #172]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b28      	ldr	r3, [pc, #160]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4925      	ldr	r1, [pc, #148]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]
 8004d78:	e015      	b.n	8004da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7a:	4b24      	ldr	r3, [pc, #144]	@ (8004e0c <HAL_RCC_OscConfig+0x244>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fc f8e6 	bl	8000f50 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d88:	f7fc f8e2 	bl	8000f50 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e187      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f0      	bne.n	8004d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d036      	beq.n	8004e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d016      	beq.n	8004de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <HAL_RCC_OscConfig+0x248>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fc f8c6 	bl	8000f50 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fc f8c2 	bl	8000f50 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e167      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0f0      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x200>
 8004de6:	e01b      	b.n	8004e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de8:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <HAL_RCC_OscConfig+0x248>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dee:	f7fc f8af 	bl	8000f50 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df4:	e00e      	b.n	8004e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df6:	f7fc f8ab 	bl	8000f50 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d907      	bls.n	8004e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e150      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	42470000 	.word	0x42470000
 8004e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	4b88      	ldr	r3, [pc, #544]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ea      	bne.n	8004df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8097 	beq.w	8004f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e32:	4b81      	ldr	r3, [pc, #516]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10f      	bne.n	8004e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	4b7d      	ldr	r3, [pc, #500]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	4a7c      	ldr	r2, [pc, #496]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5e:	4b77      	ldr	r3, [pc, #476]	@ (800503c <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d118      	bne.n	8004e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e6a:	4b74      	ldr	r3, [pc, #464]	@ (800503c <HAL_RCC_OscConfig+0x474>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a73      	ldr	r2, [pc, #460]	@ (800503c <HAL_RCC_OscConfig+0x474>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e76:	f7fc f86b 	bl	8000f50 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fc f867 	bl	8000f50 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e10c      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	4b6a      	ldr	r3, [pc, #424]	@ (800503c <HAL_RCC_OscConfig+0x474>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x2ea>
 8004ea4:	4b64      	ldr	r3, [pc, #400]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea8:	4a63      	ldr	r2, [pc, #396]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eb0:	e01c      	b.n	8004eec <HAL_RCC_OscConfig+0x324>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x30c>
 8004eba:	4b5f      	ldr	r3, [pc, #380]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0304 	orr.w	r3, r3, #4
 8004ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eca:	4a5b      	ldr	r2, [pc, #364]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0x324>
 8004ed4:	4b58      	ldr	r3, [pc, #352]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4a57      	ldr	r2, [pc, #348]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee0:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee4:	4a54      	ldr	r2, [pc, #336]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f023 0304 	bic.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d015      	beq.n	8004f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fc f82c 	bl	8000f50 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fc f828 	bl	8000f50 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0cb      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	4b49      	ldr	r3, [pc, #292]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0ee      	beq.n	8004efc <HAL_RCC_OscConfig+0x334>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f20:	f7fc f816 	bl	8000f50 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f26:	e00a      	b.n	8004f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fc f812 	bl	8000f50 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e0b5      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1ee      	bne.n	8004f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4b39      	ldr	r3, [pc, #228]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	4a38      	ldr	r2, [pc, #224]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80a1 	beq.w	80050a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f66:	4b34      	ldr	r3, [pc, #208]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d05c      	beq.n	800502c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d141      	bne.n	8004ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b31      	ldr	r3, [pc, #196]	@ (8005040 <HAL_RCC_OscConfig+0x478>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fb ffe6 	bl	8000f50 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fb ffe2 	bl	8000f50 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e087      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	085b      	lsrs	r3, r3, #1
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	061b      	lsls	r3, r3, #24
 8004fca:	491b      	ldr	r1, [pc, #108]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <HAL_RCC_OscConfig+0x478>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fb ffbb 	bl	8000f50 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fb ffb7 	bl	8000f50 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e05c      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff0:	4b11      	ldr	r3, [pc, #68]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x416>
 8004ffc:	e054      	b.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	4b10      	ldr	r3, [pc, #64]	@ (8005040 <HAL_RCC_OscConfig+0x478>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fb ffa4 	bl	8000f50 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800500c:	f7fb ffa0 	bl	8000f50 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e045      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501e:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <HAL_RCC_OscConfig+0x470>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x444>
 800502a:	e03d      	b.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e038      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
 8005038:	40023800 	.word	0x40023800
 800503c:	40007000 	.word	0x40007000
 8005040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x4ec>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d028      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800505c:	429a      	cmp	r2, r3
 800505e:	d121      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d11a      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800507a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800507c:	4293      	cmp	r3, r2
 800507e:	d111      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	3b01      	subs	r3, #1
 800508e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d001      	beq.n	80050a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800

080050b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0cc      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050cc:	4b68      	ldr	r3, [pc, #416]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d90c      	bls.n	80050f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b65      	ldr	r3, [pc, #404]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e2:	4b63      	ldr	r3, [pc, #396]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0b8      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d020      	beq.n	8005142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800510c:	4b59      	ldr	r3, [pc, #356]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4a58      	ldr	r2, [pc, #352]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005124:	4b53      	ldr	r3, [pc, #332]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a52      	ldr	r2, [pc, #328]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800512e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005130:	4b50      	ldr	r3, [pc, #320]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	494d      	ldr	r1, [pc, #308]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d044      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d107      	bne.n	8005166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005156:	4b47      	ldr	r3, [pc, #284]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d119      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e07f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d003      	beq.n	8005176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005172:	2b03      	cmp	r3, #3
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005176:	4b3f      	ldr	r3, [pc, #252]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d109      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e06f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005186:	4b3b      	ldr	r3, [pc, #236]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e067      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005196:	4b37      	ldr	r3, [pc, #220]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f023 0203 	bic.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4934      	ldr	r1, [pc, #208]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a8:	f7fb fed2 	bl	8000f50 <HAL_GetTick>
 80051ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b0:	f7fb fece 	bl	8000f50 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e04f      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 020c 	and.w	r2, r3, #12
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d1eb      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d8:	4b25      	ldr	r3, [pc, #148]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d20c      	bcs.n	8005200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	4b22      	ldr	r3, [pc, #136]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b20      	ldr	r3, [pc, #128]	@ (8005270 <HAL_RCC_ClockConfig+0x1b8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e032      	b.n	8005266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	4916      	ldr	r1, [pc, #88]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	490e      	ldr	r1, [pc, #56]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800523e:	f000 f821 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8005242:	4602      	mov	r2, r0
 8005244:	4b0b      	ldr	r3, [pc, #44]	@ (8005274 <HAL_RCC_ClockConfig+0x1bc>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	490a      	ldr	r1, [pc, #40]	@ (8005278 <HAL_RCC_ClockConfig+0x1c0>)
 8005250:	5ccb      	ldrb	r3, [r1, r3]
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	4a09      	ldr	r2, [pc, #36]	@ (800527c <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb fe32 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40023c00 	.word	0x40023c00
 8005274:	40023800 	.word	0x40023800
 8005278:	08006d08 	.word	0x08006d08
 800527c:	20000000 	.word	0x20000000
 8005280:	20000004 	.word	0x20000004

08005284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005288:	b094      	sub	sp, #80	@ 0x50
 800528a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800529c:	4b79      	ldr	r3, [pc, #484]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d00d      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0x40>
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	f200 80e1 	bhi.w	8005470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x34>
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d003      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0x3a>
 80052b6:	e0db      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b8:	4b73      	ldr	r3, [pc, #460]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052bc:	e0db      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052be:	4b73      	ldr	r3, [pc, #460]	@ (800548c <HAL_RCC_GetSysClockFreq+0x208>)
 80052c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c2:	e0d8      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d063      	beq.n	80053a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052da:	4b6a      	ldr	r3, [pc, #424]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	099b      	lsrs	r3, r3, #6
 80052e0:	2200      	movs	r2, #0
 80052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80052f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	f04f 0000 	mov.w	r0, #0
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	0159      	lsls	r1, r3, #5
 8005304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005308:	0150      	lsls	r0, r2, #5
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4621      	mov	r1, r4
 8005310:	1a51      	subs	r1, r2, r1
 8005312:	6139      	str	r1, [r7, #16]
 8005314:	4629      	mov	r1, r5
 8005316:	eb63 0301 	sbc.w	r3, r3, r1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005328:	4659      	mov	r1, fp
 800532a:	018b      	lsls	r3, r1, #6
 800532c:	4651      	mov	r1, sl
 800532e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005332:	4651      	mov	r1, sl
 8005334:	018a      	lsls	r2, r1, #6
 8005336:	4651      	mov	r1, sl
 8005338:	ebb2 0801 	subs.w	r8, r2, r1
 800533c:	4659      	mov	r1, fp
 800533e:	eb63 0901 	sbc.w	r9, r3, r1
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005356:	4690      	mov	r8, r2
 8005358:	4699      	mov	r9, r3
 800535a:	4623      	mov	r3, r4
 800535c:	eb18 0303 	adds.w	r3, r8, r3
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	462b      	mov	r3, r5
 8005364:	eb49 0303 	adc.w	r3, r9, r3
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	f04f 0300 	mov.w	r3, #0
 8005372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005376:	4629      	mov	r1, r5
 8005378:	024b      	lsls	r3, r1, #9
 800537a:	4621      	mov	r1, r4
 800537c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005380:	4621      	mov	r1, r4
 8005382:	024a      	lsls	r2, r1, #9
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538a:	2200      	movs	r2, #0
 800538c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800538e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005394:	f7fa ff74 	bl	8000280 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4613      	mov	r3, r2
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a0:	e058      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	2200      	movs	r2, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	4611      	mov	r1, r2
 80053ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053b2:	623b      	str	r3, [r7, #32]
 80053b4:	2300      	movs	r3, #0
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	f04f 0000 	mov.w	r0, #0
 80053c4:	f04f 0100 	mov.w	r1, #0
 80053c8:	0159      	lsls	r1, r3, #5
 80053ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ce:	0150      	lsls	r0, r2, #5
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4641      	mov	r1, r8
 80053d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80053da:	4649      	mov	r1, r9
 80053dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053f4:	ebb2 040a 	subs.w	r4, r2, sl
 80053f8:	eb63 050b 	sbc.w	r5, r3, fp
 80053fc:	f04f 0200 	mov.w	r2, #0
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	00eb      	lsls	r3, r5, #3
 8005406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800540a:	00e2      	lsls	r2, r4, #3
 800540c:	4614      	mov	r4, r2
 800540e:	461d      	mov	r5, r3
 8005410:	4643      	mov	r3, r8
 8005412:	18e3      	adds	r3, r4, r3
 8005414:	603b      	str	r3, [r7, #0]
 8005416:	464b      	mov	r3, r9
 8005418:	eb45 0303 	adc.w	r3, r5, r3
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800542a:	4629      	mov	r1, r5
 800542c:	028b      	lsls	r3, r1, #10
 800542e:	4621      	mov	r1, r4
 8005430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005434:	4621      	mov	r1, r4
 8005436:	028a      	lsls	r2, r1, #10
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543e:	2200      	movs	r2, #0
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	61fa      	str	r2, [r7, #28]
 8005444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005448:	f7fa ff1a 	bl	8000280 <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4613      	mov	r3, r2
 8005452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x200>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	3301      	adds	r3, #1
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800546e:	e002      	b.n	8005476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x204>)
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005478:	4618      	mov	r0, r3
 800547a:	3750      	adds	r7, #80	@ 0x50
 800547c:	46bd      	mov	sp, r7
 800547e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200

08005490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005494:	4b03      	ldr	r3, [pc, #12]	@ (80054a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005496:	681b      	ldr	r3, [r3, #0]
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054ac:	f7ff fff0 	bl	8005490 <HAL_RCC_GetHCLKFreq>
 80054b0:	4602      	mov	r2, r0
 80054b2:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	0a9b      	lsrs	r3, r3, #10
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4903      	ldr	r1, [pc, #12]	@ (80054cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054be:	5ccb      	ldrb	r3, [r1, r3]
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40023800 	.word	0x40023800
 80054cc:	08006d18 	.word	0x08006d18

080054d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054d4:	f7ff ffdc 	bl	8005490 <HAL_RCC_GetHCLKFreq>
 80054d8:	4602      	mov	r2, r0
 80054da:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	0b5b      	lsrs	r3, r3, #13
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	4903      	ldr	r1, [pc, #12]	@ (80054f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e6:	5ccb      	ldrb	r3, [r1, r3]
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40023800 	.word	0x40023800
 80054f4:	08006d18 	.word	0x08006d18

080054f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e042      	b.n	8005590 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fb1a 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	@ 0x24
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800553a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f973 	bl	8005828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	@ 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d175      	bne.n	80056a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Transmit+0x2c>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e06e      	b.n	80056a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2221      	movs	r2, #33	@ 0x21
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055d6:	f7fb fcbb 	bl	8000f50 <HAL_GetTick>
 80055da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d108      	bne.n	8005604 <HAL_UART_Transmit+0x6c>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d104      	bne.n	8005604 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e003      	b.n	800560c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800560c:	e02e      	b.n	800566c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2200      	movs	r2, #0
 8005616:	2180      	movs	r1, #128	@ 0x80
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f848 	bl	80056ae <UART_WaitOnFlagUntilTimeout>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e03a      	b.n	80056a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10b      	bne.n	800564e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	3302      	adds	r3, #2
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	e007      	b.n	800565e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	3301      	adds	r3, #1
 800565c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1cb      	bne.n	800560e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2200      	movs	r2, #0
 800567e:	2140      	movs	r1, #64	@ 0x40
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f814 	bl	80056ae <UART_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e006      	b.n	80056a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056be:	e03b      	b.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d037      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fb fc42 	bl	8000f50 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <UART_WaitOnFlagUntilTimeout+0x30>
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e03a      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d023      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b80      	cmp	r3, #128	@ 0x80
 80056f4:	d020      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b40      	cmp	r3, #64	@ 0x40
 80056fa:	d01d      	beq.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b08      	cmp	r3, #8
 8005708:	d116      	bne.n	8005738 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f81d 	bl	8005760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2208      	movs	r2, #8
 800572a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e00f      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	429a      	cmp	r2, r3
 8005754:	d0b4      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005760:	b480      	push	{r7}
 8005762:	b095      	sub	sp, #84	@ 0x54
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005788:	643a      	str	r2, [r7, #64]	@ 0x40
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800578e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e5      	bne.n	8005768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3314      	adds	r3, #20
 80057a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d119      	bne.n	800580c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 0310 	bic.w	r3, r3, #16
 80057ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	330c      	adds	r3, #12
 80057f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f8:	61ba      	str	r2, [r7, #24]
 80057fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	6979      	ldr	r1, [r7, #20]
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	e841 2300 	strex	r3, r2, [r1]
 8005804:	613b      	str	r3, [r7, #16]
   return(result);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1e5      	bne.n	80057d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800581a:	bf00      	nop
 800581c:	3754      	adds	r7, #84	@ 0x54
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b0c0      	sub	sp, #256	@ 0x100
 800582e:	af00      	add	r7, sp, #0
 8005830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005844:	68d9      	ldr	r1, [r3, #12]
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	ea40 0301 	orr.w	r3, r0, r1
 8005850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	431a      	orrs	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	431a      	orrs	r2, r3
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005880:	f021 010c 	bic.w	r1, r1, #12
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800588e:	430b      	orrs	r3, r1
 8005890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a2:	6999      	ldr	r1, [r3, #24]
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	ea40 0301 	orr.w	r3, r0, r1
 80058ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b8f      	ldr	r3, [pc, #572]	@ (8005af4 <UART_SetConfig+0x2cc>)
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d005      	beq.n	80058c8 <UART_SetConfig+0xa0>
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b8d      	ldr	r3, [pc, #564]	@ (8005af8 <UART_SetConfig+0x2d0>)
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d104      	bne.n	80058d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7ff fe02 	bl	80054d0 <HAL_RCC_GetPCLK2Freq>
 80058cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058d0:	e003      	b.n	80058da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058d2:	f7ff fde9 	bl	80054a8 <HAL_RCC_GetPCLK1Freq>
 80058d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e4:	f040 810c 	bne.w	8005b00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058fa:	4622      	mov	r2, r4
 80058fc:	462b      	mov	r3, r5
 80058fe:	1891      	adds	r1, r2, r2
 8005900:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005902:	415b      	adcs	r3, r3
 8005904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800590a:	4621      	mov	r1, r4
 800590c:	eb12 0801 	adds.w	r8, r2, r1
 8005910:	4629      	mov	r1, r5
 8005912:	eb43 0901 	adc.w	r9, r3, r1
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592a:	4690      	mov	r8, r2
 800592c:	4699      	mov	r9, r3
 800592e:	4623      	mov	r3, r4
 8005930:	eb18 0303 	adds.w	r3, r8, r3
 8005934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005938:	462b      	mov	r3, r5
 800593a:	eb49 0303 	adc.w	r3, r9, r3
 800593e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800594e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005956:	460b      	mov	r3, r1
 8005958:	18db      	adds	r3, r3, r3
 800595a:	653b      	str	r3, [r7, #80]	@ 0x50
 800595c:	4613      	mov	r3, r2
 800595e:	eb42 0303 	adc.w	r3, r2, r3
 8005962:	657b      	str	r3, [r7, #84]	@ 0x54
 8005964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800596c:	f7fa fc88 	bl	8000280 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4b61      	ldr	r3, [pc, #388]	@ (8005afc <UART_SetConfig+0x2d4>)
 8005976:	fba3 2302 	umull	r2, r3, r3, r2
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	011c      	lsls	r4, r3, #4
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800598c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005998:	415b      	adcs	r3, r3
 800599a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800599c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80059a0:	4641      	mov	r1, r8
 80059a2:	eb12 0a01 	adds.w	sl, r2, r1
 80059a6:	4649      	mov	r1, r9
 80059a8:	eb43 0b01 	adc.w	fp, r3, r1
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c0:	4692      	mov	sl, r2
 80059c2:	469b      	mov	fp, r3
 80059c4:	4643      	mov	r3, r8
 80059c6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059ce:	464b      	mov	r3, r9
 80059d0:	eb4b 0303 	adc.w	r3, fp, r3
 80059d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059ec:	460b      	mov	r3, r1
 80059ee:	18db      	adds	r3, r3, r3
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80059f2:	4613      	mov	r3, r2
 80059f4:	eb42 0303 	adc.w	r3, r2, r3
 80059f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a02:	f7fa fc3d 	bl	8000280 <__aeabi_uldivmod>
 8005a06:	4602      	mov	r2, r0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <UART_SetConfig+0x2d4>)
 8005a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	2264      	movs	r2, #100	@ 0x64
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	1acb      	subs	r3, r1, r3
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a22:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <UART_SetConfig+0x2d4>)
 8005a24:	fba3 2302 	umull	r2, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a30:	441c      	add	r4, r3
 8005a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a54:	4641      	mov	r1, r8
 8005a56:	1851      	adds	r1, r2, r1
 8005a58:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	414b      	adcs	r3, r1
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	00cb      	lsls	r3, r1, #3
 8005a70:	4651      	mov	r1, sl
 8005a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a76:	4651      	mov	r1, sl
 8005a78:	00ca      	lsls	r2, r1, #3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4642      	mov	r2, r8
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a88:	464b      	mov	r3, r9
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005aa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005aa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	18db      	adds	r3, r3, r3
 8005aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aae:	4613      	mov	r3, r2
 8005ab0:	eb42 0303 	adc.w	r3, r2, r3
 8005ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005abe:	f7fa fbdf 	bl	8000280 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	2164      	movs	r1, #100	@ 0x64
 8005ad0:	fb01 f303 	mul.w	r3, r1, r3
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	3332      	adds	r3, #50	@ 0x32
 8005ada:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <UART_SetConfig+0x2d4>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	095b      	lsrs	r3, r3, #5
 8005ae2:	f003 0207 	and.w	r2, r3, #7
 8005ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4422      	add	r2, r4
 8005aee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af0:	e106      	b.n	8005d00 <UART_SetConfig+0x4d8>
 8005af2:	bf00      	nop
 8005af4:	40011000 	.word	0x40011000
 8005af8:	40011400 	.word	0x40011400
 8005afc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b12:	4642      	mov	r2, r8
 8005b14:	464b      	mov	r3, r9
 8005b16:	1891      	adds	r1, r2, r2
 8005b18:	6239      	str	r1, [r7, #32]
 8005b1a:	415b      	adcs	r3, r3
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b22:	4641      	mov	r1, r8
 8005b24:	1854      	adds	r4, r2, r1
 8005b26:	4649      	mov	r1, r9
 8005b28:	eb43 0501 	adc.w	r5, r3, r1
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	00eb      	lsls	r3, r5, #3
 8005b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3a:	00e2      	lsls	r2, r4, #3
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	461d      	mov	r5, r3
 8005b40:	4643      	mov	r3, r8
 8005b42:	18e3      	adds	r3, r4, r3
 8005b44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b48:	464b      	mov	r3, r9
 8005b4a:	eb45 0303 	adc.w	r3, r5, r3
 8005b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b6e:	4629      	mov	r1, r5
 8005b70:	008b      	lsls	r3, r1, #2
 8005b72:	4621      	mov	r1, r4
 8005b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b78:	4621      	mov	r1, r4
 8005b7a:	008a      	lsls	r2, r1, #2
 8005b7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b80:	f7fa fb7e 	bl	8000280 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4b60      	ldr	r3, [pc, #384]	@ (8005d0c <UART_SetConfig+0x4e4>)
 8005b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	011c      	lsls	r4, r3, #4
 8005b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	1891      	adds	r1, r2, r2
 8005baa:	61b9      	str	r1, [r7, #24]
 8005bac:	415b      	adcs	r3, r3
 8005bae:	61fb      	str	r3, [r7, #28]
 8005bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	1851      	adds	r1, r2, r1
 8005bb8:	6139      	str	r1, [r7, #16]
 8005bba:	4649      	mov	r1, r9
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bcc:	4659      	mov	r1, fp
 8005bce:	00cb      	lsls	r3, r1, #3
 8005bd0:	4651      	mov	r1, sl
 8005bd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd6:	4651      	mov	r1, sl
 8005bd8:	00ca      	lsls	r2, r1, #3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4603      	mov	r3, r0
 8005be0:	4642      	mov	r2, r8
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005be8:	464b      	mov	r3, r9
 8005bea:	460a      	mov	r2, r1
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	008b      	lsls	r3, r1, #2
 8005c10:	4641      	mov	r1, r8
 8005c12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c16:	4641      	mov	r1, r8
 8005c18:	008a      	lsls	r2, r1, #2
 8005c1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c1e:	f7fa fb2f 	bl	8000280 <__aeabi_uldivmod>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	4b38      	ldr	r3, [pc, #224]	@ (8005d0c <UART_SetConfig+0x4e4>)
 8005c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2264      	movs	r2, #100	@ 0x64
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	1acb      	subs	r3, r1, r3
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	3332      	adds	r3, #50	@ 0x32
 8005c3c:	4a33      	ldr	r2, [pc, #204]	@ (8005d0c <UART_SetConfig+0x4e4>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c48:	441c      	add	r4, r3
 8005c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4e:	2200      	movs	r2, #0
 8005c50:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c52:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	415b      	adcs	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c68:	4641      	mov	r1, r8
 8005c6a:	1851      	adds	r1, r2, r1
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	4649      	mov	r1, r9
 8005c70:	414b      	adcs	r3, r1
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c80:	4659      	mov	r1, fp
 8005c82:	00cb      	lsls	r3, r1, #3
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	00ca      	lsls	r2, r1, #3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	4642      	mov	r2, r8
 8005c96:	189b      	adds	r3, r3, r2
 8005c98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	eb42 0303 	adc.w	r3, r2, r3
 8005ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005cae:	667a      	str	r2, [r7, #100]	@ 0x64
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	008b      	lsls	r3, r1, #2
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	008a      	lsls	r2, r1, #2
 8005cca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cce:	f7fa fad7 	bl	8000280 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <UART_SetConfig+0x4e4>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	@ 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	@ 0x32
 8005cea:	4a08      	ldr	r2, [pc, #32]	@ (8005d0c <UART_SetConfig+0x4e4>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 020f 	and.w	r2, r3, #15
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4422      	add	r2, r4
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d06:	46bd      	mov	sp, r7
 8005d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <std>:
 8005d10:	2300      	movs	r3, #0
 8005d12:	b510      	push	{r4, lr}
 8005d14:	4604      	mov	r4, r0
 8005d16:	e9c0 3300 	strd	r3, r3, [r0]
 8005d1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1e:	6083      	str	r3, [r0, #8]
 8005d20:	8181      	strh	r1, [r0, #12]
 8005d22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d24:	81c2      	strh	r2, [r0, #14]
 8005d26:	6183      	str	r3, [r0, #24]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	2208      	movs	r2, #8
 8005d2c:	305c      	adds	r0, #92	@ 0x5c
 8005d2e:	f000 f9f9 	bl	8006124 <memset>
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <std+0x58>)
 8005d34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <std+0x5c>)
 8005d38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x60>)
 8005d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <std+0x64>)
 8005d40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <std+0x68>)
 8005d44:	6224      	str	r4, [r4, #32]
 8005d46:	429c      	cmp	r4, r3
 8005d48:	d006      	beq.n	8005d58 <std+0x48>
 8005d4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d4e:	4294      	cmp	r4, r2
 8005d50:	d002      	beq.n	8005d58 <std+0x48>
 8005d52:	33d0      	adds	r3, #208	@ 0xd0
 8005d54:	429c      	cmp	r4, r3
 8005d56:	d105      	bne.n	8005d64 <std+0x54>
 8005d58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d60:	f000 ba58 	b.w	8006214 <__retarget_lock_init_recursive>
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	bf00      	nop
 8005d68:	08005f75 	.word	0x08005f75
 8005d6c:	08005f97 	.word	0x08005f97
 8005d70:	08005fcf 	.word	0x08005fcf
 8005d74:	08005ff3 	.word	0x08005ff3
 8005d78:	200001f8 	.word	0x200001f8

08005d7c <stdio_exit_handler>:
 8005d7c:	4a02      	ldr	r2, [pc, #8]	@ (8005d88 <stdio_exit_handler+0xc>)
 8005d7e:	4903      	ldr	r1, [pc, #12]	@ (8005d8c <stdio_exit_handler+0x10>)
 8005d80:	4803      	ldr	r0, [pc, #12]	@ (8005d90 <stdio_exit_handler+0x14>)
 8005d82:	f000 b869 	b.w	8005e58 <_fwalk_sglue>
 8005d86:	bf00      	nop
 8005d88:	2000000c 	.word	0x2000000c
 8005d8c:	08006ab5 	.word	0x08006ab5
 8005d90:	2000001c 	.word	0x2000001c

08005d94 <cleanup_stdio>:
 8005d94:	6841      	ldr	r1, [r0, #4]
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <cleanup_stdio+0x34>)
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	d001      	beq.n	8005da4 <cleanup_stdio+0x10>
 8005da0:	f000 fe88 	bl	8006ab4 <_fflush_r>
 8005da4:	68a1      	ldr	r1, [r4, #8]
 8005da6:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <cleanup_stdio+0x38>)
 8005da8:	4299      	cmp	r1, r3
 8005daa:	d002      	beq.n	8005db2 <cleanup_stdio+0x1e>
 8005dac:	4620      	mov	r0, r4
 8005dae:	f000 fe81 	bl	8006ab4 <_fflush_r>
 8005db2:	68e1      	ldr	r1, [r4, #12]
 8005db4:	4b06      	ldr	r3, [pc, #24]	@ (8005dd0 <cleanup_stdio+0x3c>)
 8005db6:	4299      	cmp	r1, r3
 8005db8:	d004      	beq.n	8005dc4 <cleanup_stdio+0x30>
 8005dba:	4620      	mov	r0, r4
 8005dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc0:	f000 be78 	b.w	8006ab4 <_fflush_r>
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200001f8 	.word	0x200001f8
 8005dcc:	20000260 	.word	0x20000260
 8005dd0:	200002c8 	.word	0x200002c8

08005dd4 <global_stdio_init.part.0>:
 8005dd4:	b510      	push	{r4, lr}
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <global_stdio_init.part.0+0x30>)
 8005dd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005e08 <global_stdio_init.part.0+0x34>)
 8005dda:	4a0c      	ldr	r2, [pc, #48]	@ (8005e0c <global_stdio_init.part.0+0x38>)
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	4620      	mov	r0, r4
 8005de0:	2200      	movs	r2, #0
 8005de2:	2104      	movs	r1, #4
 8005de4:	f7ff ff94 	bl	8005d10 <std>
 8005de8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dec:	2201      	movs	r2, #1
 8005dee:	2109      	movs	r1, #9
 8005df0:	f7ff ff8e 	bl	8005d10 <std>
 8005df4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005df8:	2202      	movs	r2, #2
 8005dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfe:	2112      	movs	r1, #18
 8005e00:	f7ff bf86 	b.w	8005d10 <std>
 8005e04:	20000330 	.word	0x20000330
 8005e08:	200001f8 	.word	0x200001f8
 8005e0c:	08005d7d 	.word	0x08005d7d

08005e10 <__sfp_lock_acquire>:
 8005e10:	4801      	ldr	r0, [pc, #4]	@ (8005e18 <__sfp_lock_acquire+0x8>)
 8005e12:	f000 ba00 	b.w	8006216 <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	20000339 	.word	0x20000339

08005e1c <__sfp_lock_release>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	@ (8005e24 <__sfp_lock_release+0x8>)
 8005e1e:	f000 b9fb 	b.w	8006218 <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	20000339 	.word	0x20000339

08005e28 <__sinit>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	f7ff fff0 	bl	8005e10 <__sfp_lock_acquire>
 8005e30:	6a23      	ldr	r3, [r4, #32]
 8005e32:	b11b      	cbz	r3, 8005e3c <__sinit+0x14>
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e38:	f7ff bff0 	b.w	8005e1c <__sfp_lock_release>
 8005e3c:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <__sinit+0x28>)
 8005e3e:	6223      	str	r3, [r4, #32]
 8005e40:	4b04      	ldr	r3, [pc, #16]	@ (8005e54 <__sinit+0x2c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1f5      	bne.n	8005e34 <__sinit+0xc>
 8005e48:	f7ff ffc4 	bl	8005dd4 <global_stdio_init.part.0>
 8005e4c:	e7f2      	b.n	8005e34 <__sinit+0xc>
 8005e4e:	bf00      	nop
 8005e50:	08005d95 	.word	0x08005d95
 8005e54:	20000330 	.word	0x20000330

08005e58 <_fwalk_sglue>:
 8005e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4688      	mov	r8, r1
 8005e60:	4614      	mov	r4, r2
 8005e62:	2600      	movs	r6, #0
 8005e64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e68:	f1b9 0901 	subs.w	r9, r9, #1
 8005e6c:	d505      	bpl.n	8005e7a <_fwalk_sglue+0x22>
 8005e6e:	6824      	ldr	r4, [r4, #0]
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	d1f7      	bne.n	8005e64 <_fwalk_sglue+0xc>
 8005e74:	4630      	mov	r0, r6
 8005e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d907      	bls.n	8005e90 <_fwalk_sglue+0x38>
 8005e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e84:	3301      	adds	r3, #1
 8005e86:	d003      	beq.n	8005e90 <_fwalk_sglue+0x38>
 8005e88:	4629      	mov	r1, r5
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	47c0      	blx	r8
 8005e8e:	4306      	orrs	r6, r0
 8005e90:	3568      	adds	r5, #104	@ 0x68
 8005e92:	e7e9      	b.n	8005e68 <_fwalk_sglue+0x10>

08005e94 <iprintf>:
 8005e94:	b40f      	push	{r0, r1, r2, r3}
 8005e96:	b507      	push	{r0, r1, r2, lr}
 8005e98:	4906      	ldr	r1, [pc, #24]	@ (8005eb4 <iprintf+0x20>)
 8005e9a:	ab04      	add	r3, sp, #16
 8005e9c:	6808      	ldr	r0, [r1, #0]
 8005e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea2:	6881      	ldr	r1, [r0, #8]
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	f000 fadb 	bl	8006460 <_vfiprintf_r>
 8005eaa:	b003      	add	sp, #12
 8005eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb0:	b004      	add	sp, #16
 8005eb2:	4770      	bx	lr
 8005eb4:	20000018 	.word	0x20000018

08005eb8 <_puts_r>:
 8005eb8:	6a03      	ldr	r3, [r0, #32]
 8005eba:	b570      	push	{r4, r5, r6, lr}
 8005ebc:	6884      	ldr	r4, [r0, #8]
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	460e      	mov	r6, r1
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_puts_r+0x10>
 8005ec4:	f7ff ffb0 	bl	8005e28 <__sinit>
 8005ec8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eca:	07db      	lsls	r3, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_puts_r+0x22>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	0598      	lsls	r0, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_puts_r+0x22>
 8005ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ed6:	f000 f99e 	bl	8006216 <__retarget_lock_acquire_recursive>
 8005eda:	89a3      	ldrh	r3, [r4, #12]
 8005edc:	0719      	lsls	r1, r3, #28
 8005ede:	d502      	bpl.n	8005ee6 <_puts_r+0x2e>
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d135      	bne.n	8005f52 <_puts_r+0x9a>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 f8c5 	bl	8006078 <__swsetup_r>
 8005eee:	b380      	cbz	r0, 8005f52 <_puts_r+0x9a>
 8005ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ef6:	07da      	lsls	r2, r3, #31
 8005ef8:	d405      	bmi.n	8005f06 <_puts_r+0x4e>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_puts_r+0x4e>
 8005f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f02:	f000 f989 	bl	8006218 <__retarget_lock_release_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da04      	bge.n	8005f18 <_puts_r+0x60>
 8005f0e:	69a2      	ldr	r2, [r4, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	dc17      	bgt.n	8005f44 <_puts_r+0x8c>
 8005f14:	290a      	cmp	r1, #10
 8005f16:	d015      	beq.n	8005f44 <_puts_r+0x8c>
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	6022      	str	r2, [r4, #0]
 8005f1e:	7019      	strb	r1, [r3, #0]
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f26:	3b01      	subs	r3, #1
 8005f28:	60a3      	str	r3, [r4, #8]
 8005f2a:	2900      	cmp	r1, #0
 8005f2c:	d1ed      	bne.n	8005f0a <_puts_r+0x52>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	da11      	bge.n	8005f56 <_puts_r+0x9e>
 8005f32:	4622      	mov	r2, r4
 8005f34:	210a      	movs	r1, #10
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f85f 	bl	8005ffa <__swbuf_r>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d0d7      	beq.n	8005ef0 <_puts_r+0x38>
 8005f40:	250a      	movs	r5, #10
 8005f42:	e7d7      	b.n	8005ef4 <_puts_r+0x3c>
 8005f44:	4622      	mov	r2, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f857 	bl	8005ffa <__swbuf_r>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d1e7      	bne.n	8005f20 <_puts_r+0x68>
 8005f50:	e7ce      	b.n	8005ef0 <_puts_r+0x38>
 8005f52:	3e01      	subs	r6, #1
 8005f54:	e7e4      	b.n	8005f20 <_puts_r+0x68>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	220a      	movs	r2, #10
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e7ee      	b.n	8005f40 <_puts_r+0x88>
	...

08005f64 <puts>:
 8005f64:	4b02      	ldr	r3, [pc, #8]	@ (8005f70 <puts+0xc>)
 8005f66:	4601      	mov	r1, r0
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f7ff bfa5 	b.w	8005eb8 <_puts_r>
 8005f6e:	bf00      	nop
 8005f70:	20000018 	.word	0x20000018

08005f74 <__sread>:
 8005f74:	b510      	push	{r4, lr}
 8005f76:	460c      	mov	r4, r1
 8005f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7c:	f000 f8fc 	bl	8006178 <_read_r>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	bfab      	itete	ge
 8005f84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f86:	89a3      	ldrhlt	r3, [r4, #12]
 8005f88:	181b      	addge	r3, r3, r0
 8005f8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f8e:	bfac      	ite	ge
 8005f90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f92:	81a3      	strhlt	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__swrite>:
 8005f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	898b      	ldrh	r3, [r1, #12]
 8005f9e:	05db      	lsls	r3, r3, #23
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	d505      	bpl.n	8005fb4 <__swrite+0x1e>
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	2302      	movs	r3, #2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f000 f8d0 	bl	8006154 <_lseek_r>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	4632      	mov	r2, r6
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fca:	f000 b8e7 	b.w	800619c <_write_r>

08005fce <__sseek>:
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd6:	f000 f8bd 	bl	8006154 <_lseek_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	bf15      	itete	ne
 8005fe0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fe2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fe6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fea:	81a3      	strheq	r3, [r4, #12]
 8005fec:	bf18      	it	ne
 8005fee:	81a3      	strhne	r3, [r4, #12]
 8005ff0:	bd10      	pop	{r4, pc}

08005ff2 <__sclose>:
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 b89d 	b.w	8006134 <_close_r>

08005ffa <__swbuf_r>:
 8005ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffc:	460e      	mov	r6, r1
 8005ffe:	4614      	mov	r4, r2
 8006000:	4605      	mov	r5, r0
 8006002:	b118      	cbz	r0, 800600c <__swbuf_r+0x12>
 8006004:	6a03      	ldr	r3, [r0, #32]
 8006006:	b90b      	cbnz	r3, 800600c <__swbuf_r+0x12>
 8006008:	f7ff ff0e 	bl	8005e28 <__sinit>
 800600c:	69a3      	ldr	r3, [r4, #24]
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	071a      	lsls	r2, r3, #28
 8006014:	d501      	bpl.n	800601a <__swbuf_r+0x20>
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	b943      	cbnz	r3, 800602c <__swbuf_r+0x32>
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f82b 	bl	8006078 <__swsetup_r>
 8006022:	b118      	cbz	r0, 800602c <__swbuf_r+0x32>
 8006024:	f04f 37ff 	mov.w	r7, #4294967295
 8006028:	4638      	mov	r0, r7
 800602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	1a98      	subs	r0, r3, r2
 8006032:	6963      	ldr	r3, [r4, #20]
 8006034:	b2f6      	uxtb	r6, r6
 8006036:	4283      	cmp	r3, r0
 8006038:	4637      	mov	r7, r6
 800603a:	dc05      	bgt.n	8006048 <__swbuf_r+0x4e>
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 fd38 	bl	8006ab4 <_fflush_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d1ed      	bne.n	8006024 <__swbuf_r+0x2a>
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	3b01      	subs	r3, #1
 800604c:	60a3      	str	r3, [r4, #8]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	701e      	strb	r6, [r3, #0]
 8006056:	6962      	ldr	r2, [r4, #20]
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	429a      	cmp	r2, r3
 800605c:	d004      	beq.n	8006068 <__swbuf_r+0x6e>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	07db      	lsls	r3, r3, #31
 8006062:	d5e1      	bpl.n	8006028 <__swbuf_r+0x2e>
 8006064:	2e0a      	cmp	r6, #10
 8006066:	d1df      	bne.n	8006028 <__swbuf_r+0x2e>
 8006068:	4621      	mov	r1, r4
 800606a:	4628      	mov	r0, r5
 800606c:	f000 fd22 	bl	8006ab4 <_fflush_r>
 8006070:	2800      	cmp	r0, #0
 8006072:	d0d9      	beq.n	8006028 <__swbuf_r+0x2e>
 8006074:	e7d6      	b.n	8006024 <__swbuf_r+0x2a>
	...

08006078 <__swsetup_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4b29      	ldr	r3, [pc, #164]	@ (8006120 <__swsetup_r+0xa8>)
 800607c:	4605      	mov	r5, r0
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	460c      	mov	r4, r1
 8006082:	b118      	cbz	r0, 800608c <__swsetup_r+0x14>
 8006084:	6a03      	ldr	r3, [r0, #32]
 8006086:	b90b      	cbnz	r3, 800608c <__swsetup_r+0x14>
 8006088:	f7ff fece 	bl	8005e28 <__sinit>
 800608c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006090:	0719      	lsls	r1, r3, #28
 8006092:	d422      	bmi.n	80060da <__swsetup_r+0x62>
 8006094:	06da      	lsls	r2, r3, #27
 8006096:	d407      	bmi.n	80060a8 <__swsetup_r+0x30>
 8006098:	2209      	movs	r2, #9
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	e033      	b.n	8006110 <__swsetup_r+0x98>
 80060a8:	0758      	lsls	r0, r3, #29
 80060aa:	d512      	bpl.n	80060d2 <__swsetup_r+0x5a>
 80060ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ae:	b141      	cbz	r1, 80060c2 <__swsetup_r+0x4a>
 80060b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060b4:	4299      	cmp	r1, r3
 80060b6:	d002      	beq.n	80060be <__swsetup_r+0x46>
 80060b8:	4628      	mov	r0, r5
 80060ba:	f000 f8af 	bl	800621c <_free_r>
 80060be:	2300      	movs	r3, #0
 80060c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060c8:	81a3      	strh	r3, [r4, #12]
 80060ca:	2300      	movs	r3, #0
 80060cc:	6063      	str	r3, [r4, #4]
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	f043 0308 	orr.w	r3, r3, #8
 80060d8:	81a3      	strh	r3, [r4, #12]
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	b94b      	cbnz	r3, 80060f2 <__swsetup_r+0x7a>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060e8:	d003      	beq.n	80060f2 <__swsetup_r+0x7a>
 80060ea:	4621      	mov	r1, r4
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 fd2f 	bl	8006b50 <__smakebuf_r>
 80060f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060f6:	f013 0201 	ands.w	r2, r3, #1
 80060fa:	d00a      	beq.n	8006112 <__swsetup_r+0x9a>
 80060fc:	2200      	movs	r2, #0
 80060fe:	60a2      	str	r2, [r4, #8]
 8006100:	6962      	ldr	r2, [r4, #20]
 8006102:	4252      	negs	r2, r2
 8006104:	61a2      	str	r2, [r4, #24]
 8006106:	6922      	ldr	r2, [r4, #16]
 8006108:	b942      	cbnz	r2, 800611c <__swsetup_r+0xa4>
 800610a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800610e:	d1c5      	bne.n	800609c <__swsetup_r+0x24>
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	0799      	lsls	r1, r3, #30
 8006114:	bf58      	it	pl
 8006116:	6962      	ldrpl	r2, [r4, #20]
 8006118:	60a2      	str	r2, [r4, #8]
 800611a:	e7f4      	b.n	8006106 <__swsetup_r+0x8e>
 800611c:	2000      	movs	r0, #0
 800611e:	e7f7      	b.n	8006110 <__swsetup_r+0x98>
 8006120:	20000018 	.word	0x20000018

08006124 <memset>:
 8006124:	4402      	add	r2, r0
 8006126:	4603      	mov	r3, r0
 8006128:	4293      	cmp	r3, r2
 800612a:	d100      	bne.n	800612e <memset+0xa>
 800612c:	4770      	bx	lr
 800612e:	f803 1b01 	strb.w	r1, [r3], #1
 8006132:	e7f9      	b.n	8006128 <memset+0x4>

08006134 <_close_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4d06      	ldr	r5, [pc, #24]	@ (8006150 <_close_r+0x1c>)
 8006138:	2300      	movs	r3, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fa fdf9 	bl	8000d36 <_close>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_close_r+0x1a>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_close_r+0x1a>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000334 	.word	0x20000334

08006154 <_lseek_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d07      	ldr	r5, [pc, #28]	@ (8006174 <_lseek_r+0x20>)
 8006158:	4604      	mov	r4, r0
 800615a:	4608      	mov	r0, r1
 800615c:	4611      	mov	r1, r2
 800615e:	2200      	movs	r2, #0
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fa fe0e 	bl	8000d84 <_lseek>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_lseek_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_lseek_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000334 	.word	0x20000334

08006178 <_read_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4d07      	ldr	r5, [pc, #28]	@ (8006198 <_read_r+0x20>)
 800617c:	4604      	mov	r4, r0
 800617e:	4608      	mov	r0, r1
 8006180:	4611      	mov	r1, r2
 8006182:	2200      	movs	r2, #0
 8006184:	602a      	str	r2, [r5, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	f7fa fdb8 	bl	8000cfc <_read>
 800618c:	1c43      	adds	r3, r0, #1
 800618e:	d102      	bne.n	8006196 <_read_r+0x1e>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	b103      	cbz	r3, 8006196 <_read_r+0x1e>
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	bd38      	pop	{r3, r4, r5, pc}
 8006198:	20000334 	.word	0x20000334

0800619c <_write_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d07      	ldr	r5, [pc, #28]	@ (80061bc <_write_r+0x20>)
 80061a0:	4604      	mov	r4, r0
 80061a2:	4608      	mov	r0, r1
 80061a4:	4611      	mov	r1, r2
 80061a6:	2200      	movs	r2, #0
 80061a8:	602a      	str	r2, [r5, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f7fa f9e0 	bl	8000570 <_write>
 80061b0:	1c43      	adds	r3, r0, #1
 80061b2:	d102      	bne.n	80061ba <_write_r+0x1e>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	b103      	cbz	r3, 80061ba <_write_r+0x1e>
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	bd38      	pop	{r3, r4, r5, pc}
 80061bc:	20000334 	.word	0x20000334

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	@ (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000018 	.word	0x20000018

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006208 <__libc_init_array+0x3c>)
 80061d2:	1b64      	subs	r4, r4, r5
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2600      	movs	r6, #0
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4d0b      	ldr	r5, [pc, #44]	@ (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	@ (8006210 <__libc_init_array+0x44>)
 80061e0:	f000 fd24 	bl	8006c2c <_init>
 80061e4:	1b64      	subs	r4, r4, r5
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2600      	movs	r6, #0
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08006d64 	.word	0x08006d64
 8006208:	08006d64 	.word	0x08006d64
 800620c:	08006d64 	.word	0x08006d64
 8006210:	08006d68 	.word	0x08006d68

08006214 <__retarget_lock_init_recursive>:
 8006214:	4770      	bx	lr

08006216 <__retarget_lock_acquire_recursive>:
 8006216:	4770      	bx	lr

08006218 <__retarget_lock_release_recursive>:
 8006218:	4770      	bx	lr
	...

0800621c <_free_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4605      	mov	r5, r0
 8006220:	2900      	cmp	r1, #0
 8006222:	d041      	beq.n	80062a8 <_free_r+0x8c>
 8006224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006228:	1f0c      	subs	r4, r1, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	bfb8      	it	lt
 800622e:	18e4      	addlt	r4, r4, r3
 8006230:	f000 f8e0 	bl	80063f4 <__malloc_lock>
 8006234:	4a1d      	ldr	r2, [pc, #116]	@ (80062ac <_free_r+0x90>)
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	b933      	cbnz	r3, 8006248 <_free_r+0x2c>
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	4628      	mov	r0, r5
 8006240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006244:	f000 b8dc 	b.w	8006400 <__malloc_unlock>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d908      	bls.n	800625e <_free_r+0x42>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	1821      	adds	r1, r4, r0
 8006250:	428b      	cmp	r3, r1
 8006252:	bf01      	itttt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	1809      	addeq	r1, r1, r0
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	e7ed      	b.n	800623a <_free_r+0x1e>
 800625e:	461a      	mov	r2, r3
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	b10b      	cbz	r3, 8006268 <_free_r+0x4c>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d9fa      	bls.n	800625e <_free_r+0x42>
 8006268:	6811      	ldr	r1, [r2, #0]
 800626a:	1850      	adds	r0, r2, r1
 800626c:	42a0      	cmp	r0, r4
 800626e:	d10b      	bne.n	8006288 <_free_r+0x6c>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	4401      	add	r1, r0
 8006274:	1850      	adds	r0, r2, r1
 8006276:	4283      	cmp	r3, r0
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	d1e0      	bne.n	800623e <_free_r+0x22>
 800627c:	6818      	ldr	r0, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	4408      	add	r0, r1
 8006284:	6010      	str	r0, [r2, #0]
 8006286:	e7da      	b.n	800623e <_free_r+0x22>
 8006288:	d902      	bls.n	8006290 <_free_r+0x74>
 800628a:	230c      	movs	r3, #12
 800628c:	602b      	str	r3, [r5, #0]
 800628e:	e7d6      	b.n	800623e <_free_r+0x22>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	1821      	adds	r1, r4, r0
 8006294:	428b      	cmp	r3, r1
 8006296:	bf04      	itt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	bf04      	itt	eq
 80062a0:	1809      	addeq	r1, r1, r0
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	6054      	str	r4, [r2, #4]
 80062a6:	e7ca      	b.n	800623e <_free_r+0x22>
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	20000340 	.word	0x20000340

080062b0 <sbrk_aligned>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4e0f      	ldr	r6, [pc, #60]	@ (80062f0 <sbrk_aligned+0x40>)
 80062b4:	460c      	mov	r4, r1
 80062b6:	6831      	ldr	r1, [r6, #0]
 80062b8:	4605      	mov	r5, r0
 80062ba:	b911      	cbnz	r1, 80062c2 <sbrk_aligned+0x12>
 80062bc:	f000 fca6 	bl	8006c0c <_sbrk_r>
 80062c0:	6030      	str	r0, [r6, #0]
 80062c2:	4621      	mov	r1, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 fca1 	bl	8006c0c <_sbrk_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d103      	bne.n	80062d6 <sbrk_aligned+0x26>
 80062ce:	f04f 34ff 	mov.w	r4, #4294967295
 80062d2:	4620      	mov	r0, r4
 80062d4:	bd70      	pop	{r4, r5, r6, pc}
 80062d6:	1cc4      	adds	r4, r0, #3
 80062d8:	f024 0403 	bic.w	r4, r4, #3
 80062dc:	42a0      	cmp	r0, r4
 80062de:	d0f8      	beq.n	80062d2 <sbrk_aligned+0x22>
 80062e0:	1a21      	subs	r1, r4, r0
 80062e2:	4628      	mov	r0, r5
 80062e4:	f000 fc92 	bl	8006c0c <_sbrk_r>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1f2      	bne.n	80062d2 <sbrk_aligned+0x22>
 80062ec:	e7ef      	b.n	80062ce <sbrk_aligned+0x1e>
 80062ee:	bf00      	nop
 80062f0:	2000033c 	.word	0x2000033c

080062f4 <_malloc_r>:
 80062f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062f8:	1ccd      	adds	r5, r1, #3
 80062fa:	f025 0503 	bic.w	r5, r5, #3
 80062fe:	3508      	adds	r5, #8
 8006300:	2d0c      	cmp	r5, #12
 8006302:	bf38      	it	cc
 8006304:	250c      	movcc	r5, #12
 8006306:	2d00      	cmp	r5, #0
 8006308:	4606      	mov	r6, r0
 800630a:	db01      	blt.n	8006310 <_malloc_r+0x1c>
 800630c:	42a9      	cmp	r1, r5
 800630e:	d904      	bls.n	800631a <_malloc_r+0x26>
 8006310:	230c      	movs	r3, #12
 8006312:	6033      	str	r3, [r6, #0]
 8006314:	2000      	movs	r0, #0
 8006316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f0 <_malloc_r+0xfc>
 800631e:	f000 f869 	bl	80063f4 <__malloc_lock>
 8006322:	f8d8 3000 	ldr.w	r3, [r8]
 8006326:	461c      	mov	r4, r3
 8006328:	bb44      	cbnz	r4, 800637c <_malloc_r+0x88>
 800632a:	4629      	mov	r1, r5
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff ffbf 	bl	80062b0 <sbrk_aligned>
 8006332:	1c43      	adds	r3, r0, #1
 8006334:	4604      	mov	r4, r0
 8006336:	d158      	bne.n	80063ea <_malloc_r+0xf6>
 8006338:	f8d8 4000 	ldr.w	r4, [r8]
 800633c:	4627      	mov	r7, r4
 800633e:	2f00      	cmp	r7, #0
 8006340:	d143      	bne.n	80063ca <_malloc_r+0xd6>
 8006342:	2c00      	cmp	r4, #0
 8006344:	d04b      	beq.n	80063de <_malloc_r+0xea>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	4639      	mov	r1, r7
 800634a:	4630      	mov	r0, r6
 800634c:	eb04 0903 	add.w	r9, r4, r3
 8006350:	f000 fc5c 	bl	8006c0c <_sbrk_r>
 8006354:	4581      	cmp	r9, r0
 8006356:	d142      	bne.n	80063de <_malloc_r+0xea>
 8006358:	6821      	ldr	r1, [r4, #0]
 800635a:	1a6d      	subs	r5, r5, r1
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ffa6 	bl	80062b0 <sbrk_aligned>
 8006364:	3001      	adds	r0, #1
 8006366:	d03a      	beq.n	80063de <_malloc_r+0xea>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	442b      	add	r3, r5
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	bb62      	cbnz	r2, 80063d0 <_malloc_r+0xdc>
 8006376:	f8c8 7000 	str.w	r7, [r8]
 800637a:	e00f      	b.n	800639c <_malloc_r+0xa8>
 800637c:	6822      	ldr	r2, [r4, #0]
 800637e:	1b52      	subs	r2, r2, r5
 8006380:	d420      	bmi.n	80063c4 <_malloc_r+0xd0>
 8006382:	2a0b      	cmp	r2, #11
 8006384:	d917      	bls.n	80063b6 <_malloc_r+0xc2>
 8006386:	1961      	adds	r1, r4, r5
 8006388:	42a3      	cmp	r3, r4
 800638a:	6025      	str	r5, [r4, #0]
 800638c:	bf18      	it	ne
 800638e:	6059      	strne	r1, [r3, #4]
 8006390:	6863      	ldr	r3, [r4, #4]
 8006392:	bf08      	it	eq
 8006394:	f8c8 1000 	streq.w	r1, [r8]
 8006398:	5162      	str	r2, [r4, r5]
 800639a:	604b      	str	r3, [r1, #4]
 800639c:	4630      	mov	r0, r6
 800639e:	f000 f82f 	bl	8006400 <__malloc_unlock>
 80063a2:	f104 000b 	add.w	r0, r4, #11
 80063a6:	1d23      	adds	r3, r4, #4
 80063a8:	f020 0007 	bic.w	r0, r0, #7
 80063ac:	1ac2      	subs	r2, r0, r3
 80063ae:	bf1c      	itt	ne
 80063b0:	1a1b      	subne	r3, r3, r0
 80063b2:	50a3      	strne	r3, [r4, r2]
 80063b4:	e7af      	b.n	8006316 <_malloc_r+0x22>
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	42a3      	cmp	r3, r4
 80063ba:	bf0c      	ite	eq
 80063bc:	f8c8 2000 	streq.w	r2, [r8]
 80063c0:	605a      	strne	r2, [r3, #4]
 80063c2:	e7eb      	b.n	800639c <_malloc_r+0xa8>
 80063c4:	4623      	mov	r3, r4
 80063c6:	6864      	ldr	r4, [r4, #4]
 80063c8:	e7ae      	b.n	8006328 <_malloc_r+0x34>
 80063ca:	463c      	mov	r4, r7
 80063cc:	687f      	ldr	r7, [r7, #4]
 80063ce:	e7b6      	b.n	800633e <_malloc_r+0x4a>
 80063d0:	461a      	mov	r2, r3
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	d1fb      	bne.n	80063d0 <_malloc_r+0xdc>
 80063d8:	2300      	movs	r3, #0
 80063da:	6053      	str	r3, [r2, #4]
 80063dc:	e7de      	b.n	800639c <_malloc_r+0xa8>
 80063de:	230c      	movs	r3, #12
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 f80c 	bl	8006400 <__malloc_unlock>
 80063e8:	e794      	b.n	8006314 <_malloc_r+0x20>
 80063ea:	6005      	str	r5, [r0, #0]
 80063ec:	e7d6      	b.n	800639c <_malloc_r+0xa8>
 80063ee:	bf00      	nop
 80063f0:	20000340 	.word	0x20000340

080063f4 <__malloc_lock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__malloc_lock+0x8>)
 80063f6:	f7ff bf0e 	b.w	8006216 <__retarget_lock_acquire_recursive>
 80063fa:	bf00      	nop
 80063fc:	20000338 	.word	0x20000338

08006400 <__malloc_unlock>:
 8006400:	4801      	ldr	r0, [pc, #4]	@ (8006408 <__malloc_unlock+0x8>)
 8006402:	f7ff bf09 	b.w	8006218 <__retarget_lock_release_recursive>
 8006406:	bf00      	nop
 8006408:	20000338 	.word	0x20000338

0800640c <__sfputc_r>:
 800640c:	6893      	ldr	r3, [r2, #8]
 800640e:	3b01      	subs	r3, #1
 8006410:	2b00      	cmp	r3, #0
 8006412:	b410      	push	{r4}
 8006414:	6093      	str	r3, [r2, #8]
 8006416:	da08      	bge.n	800642a <__sfputc_r+0x1e>
 8006418:	6994      	ldr	r4, [r2, #24]
 800641a:	42a3      	cmp	r3, r4
 800641c:	db01      	blt.n	8006422 <__sfputc_r+0x16>
 800641e:	290a      	cmp	r1, #10
 8006420:	d103      	bne.n	800642a <__sfputc_r+0x1e>
 8006422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006426:	f7ff bde8 	b.w	8005ffa <__swbuf_r>
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	1c58      	adds	r0, r3, #1
 800642e:	6010      	str	r0, [r2, #0]
 8006430:	7019      	strb	r1, [r3, #0]
 8006432:	4608      	mov	r0, r1
 8006434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006438:	4770      	bx	lr

0800643a <__sfputs_r>:
 800643a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643c:	4606      	mov	r6, r0
 800643e:	460f      	mov	r7, r1
 8006440:	4614      	mov	r4, r2
 8006442:	18d5      	adds	r5, r2, r3
 8006444:	42ac      	cmp	r4, r5
 8006446:	d101      	bne.n	800644c <__sfputs_r+0x12>
 8006448:	2000      	movs	r0, #0
 800644a:	e007      	b.n	800645c <__sfputs_r+0x22>
 800644c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006450:	463a      	mov	r2, r7
 8006452:	4630      	mov	r0, r6
 8006454:	f7ff ffda 	bl	800640c <__sfputc_r>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d1f3      	bne.n	8006444 <__sfputs_r+0xa>
 800645c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006460 <_vfiprintf_r>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	460d      	mov	r5, r1
 8006466:	b09d      	sub	sp, #116	@ 0x74
 8006468:	4614      	mov	r4, r2
 800646a:	4698      	mov	r8, r3
 800646c:	4606      	mov	r6, r0
 800646e:	b118      	cbz	r0, 8006478 <_vfiprintf_r+0x18>
 8006470:	6a03      	ldr	r3, [r0, #32]
 8006472:	b90b      	cbnz	r3, 8006478 <_vfiprintf_r+0x18>
 8006474:	f7ff fcd8 	bl	8005e28 <__sinit>
 8006478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800647a:	07d9      	lsls	r1, r3, #31
 800647c:	d405      	bmi.n	800648a <_vfiprintf_r+0x2a>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	059a      	lsls	r2, r3, #22
 8006482:	d402      	bmi.n	800648a <_vfiprintf_r+0x2a>
 8006484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006486:	f7ff fec6 	bl	8006216 <__retarget_lock_acquire_recursive>
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	d501      	bpl.n	8006494 <_vfiprintf_r+0x34>
 8006490:	692b      	ldr	r3, [r5, #16]
 8006492:	b99b      	cbnz	r3, 80064bc <_vfiprintf_r+0x5c>
 8006494:	4629      	mov	r1, r5
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff fdee 	bl	8006078 <__swsetup_r>
 800649c:	b170      	cbz	r0, 80064bc <_vfiprintf_r+0x5c>
 800649e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064a0:	07dc      	lsls	r4, r3, #31
 80064a2:	d504      	bpl.n	80064ae <_vfiprintf_r+0x4e>
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	b01d      	add	sp, #116	@ 0x74
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	0598      	lsls	r0, r3, #22
 80064b2:	d4f7      	bmi.n	80064a4 <_vfiprintf_r+0x44>
 80064b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064b6:	f7ff feaf 	bl	8006218 <__retarget_lock_release_recursive>
 80064ba:	e7f3      	b.n	80064a4 <_vfiprintf_r+0x44>
 80064bc:	2300      	movs	r3, #0
 80064be:	9309      	str	r3, [sp, #36]	@ 0x24
 80064c0:	2320      	movs	r3, #32
 80064c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ca:	2330      	movs	r3, #48	@ 0x30
 80064cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800667c <_vfiprintf_r+0x21c>
 80064d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064d4:	f04f 0901 	mov.w	r9, #1
 80064d8:	4623      	mov	r3, r4
 80064da:	469a      	mov	sl, r3
 80064dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e0:	b10a      	cbz	r2, 80064e6 <_vfiprintf_r+0x86>
 80064e2:	2a25      	cmp	r2, #37	@ 0x25
 80064e4:	d1f9      	bne.n	80064da <_vfiprintf_r+0x7a>
 80064e6:	ebba 0b04 	subs.w	fp, sl, r4
 80064ea:	d00b      	beq.n	8006504 <_vfiprintf_r+0xa4>
 80064ec:	465b      	mov	r3, fp
 80064ee:	4622      	mov	r2, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7ff ffa1 	bl	800643a <__sfputs_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	f000 80a7 	beq.w	800664c <_vfiprintf_r+0x1ec>
 80064fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006500:	445a      	add	r2, fp
 8006502:	9209      	str	r2, [sp, #36]	@ 0x24
 8006504:	f89a 3000 	ldrb.w	r3, [sl]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 809f 	beq.w	800664c <_vfiprintf_r+0x1ec>
 800650e:	2300      	movs	r3, #0
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006518:	f10a 0a01 	add.w	sl, sl, #1
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	9307      	str	r3, [sp, #28]
 8006520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006524:	931a      	str	r3, [sp, #104]	@ 0x68
 8006526:	4654      	mov	r4, sl
 8006528:	2205      	movs	r2, #5
 800652a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800652e:	4853      	ldr	r0, [pc, #332]	@ (800667c <_vfiprintf_r+0x21c>)
 8006530:	f7f9 fe56 	bl	80001e0 <memchr>
 8006534:	9a04      	ldr	r2, [sp, #16]
 8006536:	b9d8      	cbnz	r0, 8006570 <_vfiprintf_r+0x110>
 8006538:	06d1      	lsls	r1, r2, #27
 800653a:	bf44      	itt	mi
 800653c:	2320      	movmi	r3, #32
 800653e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006542:	0713      	lsls	r3, r2, #28
 8006544:	bf44      	itt	mi
 8006546:	232b      	movmi	r3, #43	@ 0x2b
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800654c:	f89a 3000 	ldrb.w	r3, [sl]
 8006550:	2b2a      	cmp	r3, #42	@ 0x2a
 8006552:	d015      	beq.n	8006580 <_vfiprintf_r+0x120>
 8006554:	9a07      	ldr	r2, [sp, #28]
 8006556:	4654      	mov	r4, sl
 8006558:	2000      	movs	r0, #0
 800655a:	f04f 0c0a 	mov.w	ip, #10
 800655e:	4621      	mov	r1, r4
 8006560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006564:	3b30      	subs	r3, #48	@ 0x30
 8006566:	2b09      	cmp	r3, #9
 8006568:	d94b      	bls.n	8006602 <_vfiprintf_r+0x1a2>
 800656a:	b1b0      	cbz	r0, 800659a <_vfiprintf_r+0x13a>
 800656c:	9207      	str	r2, [sp, #28]
 800656e:	e014      	b.n	800659a <_vfiprintf_r+0x13a>
 8006570:	eba0 0308 	sub.w	r3, r0, r8
 8006574:	fa09 f303 	lsl.w	r3, r9, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	9304      	str	r3, [sp, #16]
 800657c:	46a2      	mov	sl, r4
 800657e:	e7d2      	b.n	8006526 <_vfiprintf_r+0xc6>
 8006580:	9b03      	ldr	r3, [sp, #12]
 8006582:	1d19      	adds	r1, r3, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	9103      	str	r1, [sp, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbb      	ittet	lt
 800658c:	425b      	neglt	r3, r3
 800658e:	f042 0202 	orrlt.w	r2, r2, #2
 8006592:	9307      	strge	r3, [sp, #28]
 8006594:	9307      	strlt	r3, [sp, #28]
 8006596:	bfb8      	it	lt
 8006598:	9204      	strlt	r2, [sp, #16]
 800659a:	7823      	ldrb	r3, [r4, #0]
 800659c:	2b2e      	cmp	r3, #46	@ 0x2e
 800659e:	d10a      	bne.n	80065b6 <_vfiprintf_r+0x156>
 80065a0:	7863      	ldrb	r3, [r4, #1]
 80065a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80065a4:	d132      	bne.n	800660c <_vfiprintf_r+0x1ac>
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	1d1a      	adds	r2, r3, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	9203      	str	r2, [sp, #12]
 80065ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065b2:	3402      	adds	r4, #2
 80065b4:	9305      	str	r3, [sp, #20]
 80065b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800668c <_vfiprintf_r+0x22c>
 80065ba:	7821      	ldrb	r1, [r4, #0]
 80065bc:	2203      	movs	r2, #3
 80065be:	4650      	mov	r0, sl
 80065c0:	f7f9 fe0e 	bl	80001e0 <memchr>
 80065c4:	b138      	cbz	r0, 80065d6 <_vfiprintf_r+0x176>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	eba0 000a 	sub.w	r0, r0, sl
 80065cc:	2240      	movs	r2, #64	@ 0x40
 80065ce:	4082      	lsls	r2, r0
 80065d0:	4313      	orrs	r3, r2
 80065d2:	3401      	adds	r4, #1
 80065d4:	9304      	str	r3, [sp, #16]
 80065d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065da:	4829      	ldr	r0, [pc, #164]	@ (8006680 <_vfiprintf_r+0x220>)
 80065dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065e0:	2206      	movs	r2, #6
 80065e2:	f7f9 fdfd 	bl	80001e0 <memchr>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d03f      	beq.n	800666a <_vfiprintf_r+0x20a>
 80065ea:	4b26      	ldr	r3, [pc, #152]	@ (8006684 <_vfiprintf_r+0x224>)
 80065ec:	bb1b      	cbnz	r3, 8006636 <_vfiprintf_r+0x1d6>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	3307      	adds	r3, #7
 80065f2:	f023 0307 	bic.w	r3, r3, #7
 80065f6:	3308      	adds	r3, #8
 80065f8:	9303      	str	r3, [sp, #12]
 80065fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065fc:	443b      	add	r3, r7
 80065fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006600:	e76a      	b.n	80064d8 <_vfiprintf_r+0x78>
 8006602:	fb0c 3202 	mla	r2, ip, r2, r3
 8006606:	460c      	mov	r4, r1
 8006608:	2001      	movs	r0, #1
 800660a:	e7a8      	b.n	800655e <_vfiprintf_r+0xfe>
 800660c:	2300      	movs	r3, #0
 800660e:	3401      	adds	r4, #1
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	4619      	mov	r1, r3
 8006614:	f04f 0c0a 	mov.w	ip, #10
 8006618:	4620      	mov	r0, r4
 800661a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661e:	3a30      	subs	r2, #48	@ 0x30
 8006620:	2a09      	cmp	r2, #9
 8006622:	d903      	bls.n	800662c <_vfiprintf_r+0x1cc>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0c6      	beq.n	80065b6 <_vfiprintf_r+0x156>
 8006628:	9105      	str	r1, [sp, #20]
 800662a:	e7c4      	b.n	80065b6 <_vfiprintf_r+0x156>
 800662c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006630:	4604      	mov	r4, r0
 8006632:	2301      	movs	r3, #1
 8006634:	e7f0      	b.n	8006618 <_vfiprintf_r+0x1b8>
 8006636:	ab03      	add	r3, sp, #12
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	462a      	mov	r2, r5
 800663c:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <_vfiprintf_r+0x228>)
 800663e:	a904      	add	r1, sp, #16
 8006640:	4630      	mov	r0, r6
 8006642:	f3af 8000 	nop.w
 8006646:	4607      	mov	r7, r0
 8006648:	1c78      	adds	r0, r7, #1
 800664a:	d1d6      	bne.n	80065fa <_vfiprintf_r+0x19a>
 800664c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800664e:	07d9      	lsls	r1, r3, #31
 8006650:	d405      	bmi.n	800665e <_vfiprintf_r+0x1fe>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	059a      	lsls	r2, r3, #22
 8006656:	d402      	bmi.n	800665e <_vfiprintf_r+0x1fe>
 8006658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800665a:	f7ff fddd 	bl	8006218 <__retarget_lock_release_recursive>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	065b      	lsls	r3, r3, #25
 8006662:	f53f af1f 	bmi.w	80064a4 <_vfiprintf_r+0x44>
 8006666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006668:	e71e      	b.n	80064a8 <_vfiprintf_r+0x48>
 800666a:	ab03      	add	r3, sp, #12
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	462a      	mov	r2, r5
 8006670:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <_vfiprintf_r+0x228>)
 8006672:	a904      	add	r1, sp, #16
 8006674:	4630      	mov	r0, r6
 8006676:	f000 f879 	bl	800676c <_printf_i>
 800667a:	e7e4      	b.n	8006646 <_vfiprintf_r+0x1e6>
 800667c:	08006d28 	.word	0x08006d28
 8006680:	08006d32 	.word	0x08006d32
 8006684:	00000000 	.word	0x00000000
 8006688:	0800643b 	.word	0x0800643b
 800668c:	08006d2e 	.word	0x08006d2e

08006690 <_printf_common>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	4616      	mov	r6, r2
 8006696:	4698      	mov	r8, r3
 8006698:	688a      	ldr	r2, [r1, #8]
 800669a:	690b      	ldr	r3, [r1, #16]
 800669c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bfb8      	it	lt
 80066a4:	4613      	movlt	r3, r2
 80066a6:	6033      	str	r3, [r6, #0]
 80066a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066ac:	4607      	mov	r7, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	b10a      	cbz	r2, 80066b6 <_printf_common+0x26>
 80066b2:	3301      	adds	r3, #1
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	0699      	lsls	r1, r3, #26
 80066ba:	bf42      	ittt	mi
 80066bc:	6833      	ldrmi	r3, [r6, #0]
 80066be:	3302      	addmi	r3, #2
 80066c0:	6033      	strmi	r3, [r6, #0]
 80066c2:	6825      	ldr	r5, [r4, #0]
 80066c4:	f015 0506 	ands.w	r5, r5, #6
 80066c8:	d106      	bne.n	80066d8 <_printf_common+0x48>
 80066ca:	f104 0a19 	add.w	sl, r4, #25
 80066ce:	68e3      	ldr	r3, [r4, #12]
 80066d0:	6832      	ldr	r2, [r6, #0]
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	42ab      	cmp	r3, r5
 80066d6:	dc26      	bgt.n	8006726 <_printf_common+0x96>
 80066d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	3b00      	subs	r3, #0
 80066e0:	bf18      	it	ne
 80066e2:	2301      	movne	r3, #1
 80066e4:	0692      	lsls	r2, r2, #26
 80066e6:	d42b      	bmi.n	8006740 <_printf_common+0xb0>
 80066e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066ec:	4641      	mov	r1, r8
 80066ee:	4638      	mov	r0, r7
 80066f0:	47c8      	blx	r9
 80066f2:	3001      	adds	r0, #1
 80066f4:	d01e      	beq.n	8006734 <_printf_common+0xa4>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	f003 0306 	and.w	r3, r3, #6
 80066fe:	2b04      	cmp	r3, #4
 8006700:	bf02      	ittt	eq
 8006702:	68e5      	ldreq	r5, [r4, #12]
 8006704:	6833      	ldreq	r3, [r6, #0]
 8006706:	1aed      	subeq	r5, r5, r3
 8006708:	68a3      	ldr	r3, [r4, #8]
 800670a:	bf0c      	ite	eq
 800670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006710:	2500      	movne	r5, #0
 8006712:	4293      	cmp	r3, r2
 8006714:	bfc4      	itt	gt
 8006716:	1a9b      	subgt	r3, r3, r2
 8006718:	18ed      	addgt	r5, r5, r3
 800671a:	2600      	movs	r6, #0
 800671c:	341a      	adds	r4, #26
 800671e:	42b5      	cmp	r5, r6
 8006720:	d11a      	bne.n	8006758 <_printf_common+0xc8>
 8006722:	2000      	movs	r0, #0
 8006724:	e008      	b.n	8006738 <_printf_common+0xa8>
 8006726:	2301      	movs	r3, #1
 8006728:	4652      	mov	r2, sl
 800672a:	4641      	mov	r1, r8
 800672c:	4638      	mov	r0, r7
 800672e:	47c8      	blx	r9
 8006730:	3001      	adds	r0, #1
 8006732:	d103      	bne.n	800673c <_printf_common+0xac>
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	3501      	adds	r5, #1
 800673e:	e7c6      	b.n	80066ce <_printf_common+0x3e>
 8006740:	18e1      	adds	r1, r4, r3
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	2030      	movs	r0, #48	@ 0x30
 8006746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800674a:	4422      	add	r2, r4
 800674c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006754:	3302      	adds	r3, #2
 8006756:	e7c7      	b.n	80066e8 <_printf_common+0x58>
 8006758:	2301      	movs	r3, #1
 800675a:	4622      	mov	r2, r4
 800675c:	4641      	mov	r1, r8
 800675e:	4638      	mov	r0, r7
 8006760:	47c8      	blx	r9
 8006762:	3001      	adds	r0, #1
 8006764:	d0e6      	beq.n	8006734 <_printf_common+0xa4>
 8006766:	3601      	adds	r6, #1
 8006768:	e7d9      	b.n	800671e <_printf_common+0x8e>
	...

0800676c <_printf_i>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	7e0f      	ldrb	r7, [r1, #24]
 8006772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006774:	2f78      	cmp	r7, #120	@ 0x78
 8006776:	4691      	mov	r9, r2
 8006778:	4680      	mov	r8, r0
 800677a:	460c      	mov	r4, r1
 800677c:	469a      	mov	sl, r3
 800677e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006782:	d807      	bhi.n	8006794 <_printf_i+0x28>
 8006784:	2f62      	cmp	r7, #98	@ 0x62
 8006786:	d80a      	bhi.n	800679e <_printf_i+0x32>
 8006788:	2f00      	cmp	r7, #0
 800678a:	f000 80d2 	beq.w	8006932 <_printf_i+0x1c6>
 800678e:	2f58      	cmp	r7, #88	@ 0x58
 8006790:	f000 80b9 	beq.w	8006906 <_printf_i+0x19a>
 8006794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800679c:	e03a      	b.n	8006814 <_printf_i+0xa8>
 800679e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067a2:	2b15      	cmp	r3, #21
 80067a4:	d8f6      	bhi.n	8006794 <_printf_i+0x28>
 80067a6:	a101      	add	r1, pc, #4	@ (adr r1, 80067ac <_printf_i+0x40>)
 80067a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006795 	.word	0x08006795
 80067b8:	08006795 	.word	0x08006795
 80067bc:	08006795 	.word	0x08006795
 80067c0:	08006795 	.word	0x08006795
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006795 	.word	0x08006795
 80067cc:	08006795 	.word	0x08006795
 80067d0:	08006795 	.word	0x08006795
 80067d4:	08006795 	.word	0x08006795
 80067d8:	08006919 	.word	0x08006919
 80067dc:	08006843 	.word	0x08006843
 80067e0:	080068d3 	.word	0x080068d3
 80067e4:	08006795 	.word	0x08006795
 80067e8:	08006795 	.word	0x08006795
 80067ec:	0800693b 	.word	0x0800693b
 80067f0:	08006795 	.word	0x08006795
 80067f4:	08006843 	.word	0x08006843
 80067f8:	08006795 	.word	0x08006795
 80067fc:	08006795 	.word	0x08006795
 8006800:	080068db 	.word	0x080068db
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6032      	str	r2, [r6, #0]
 800680c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006814:	2301      	movs	r3, #1
 8006816:	e09d      	b.n	8006954 <_printf_i+0x1e8>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	6031      	str	r1, [r6, #0]
 8006820:	0606      	lsls	r6, r0, #24
 8006822:	d501      	bpl.n	8006828 <_printf_i+0xbc>
 8006824:	681d      	ldr	r5, [r3, #0]
 8006826:	e003      	b.n	8006830 <_printf_i+0xc4>
 8006828:	0645      	lsls	r5, r0, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0xb8>
 800682c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006830:	2d00      	cmp	r5, #0
 8006832:	da03      	bge.n	800683c <_printf_i+0xd0>
 8006834:	232d      	movs	r3, #45	@ 0x2d
 8006836:	426d      	negs	r5, r5
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683c:	4859      	ldr	r0, [pc, #356]	@ (80069a4 <_printf_i+0x238>)
 800683e:	230a      	movs	r3, #10
 8006840:	e011      	b.n	8006866 <_printf_i+0xfa>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	0608      	lsls	r0, r1, #24
 8006848:	f853 5b04 	ldr.w	r5, [r3], #4
 800684c:	d402      	bmi.n	8006854 <_printf_i+0xe8>
 800684e:	0649      	lsls	r1, r1, #25
 8006850:	bf48      	it	mi
 8006852:	b2ad      	uxthmi	r5, r5
 8006854:	2f6f      	cmp	r7, #111	@ 0x6f
 8006856:	4853      	ldr	r0, [pc, #332]	@ (80069a4 <_printf_i+0x238>)
 8006858:	6033      	str	r3, [r6, #0]
 800685a:	bf14      	ite	ne
 800685c:	230a      	movne	r3, #10
 800685e:	2308      	moveq	r3, #8
 8006860:	2100      	movs	r1, #0
 8006862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006866:	6866      	ldr	r6, [r4, #4]
 8006868:	60a6      	str	r6, [r4, #8]
 800686a:	2e00      	cmp	r6, #0
 800686c:	bfa2      	ittt	ge
 800686e:	6821      	ldrge	r1, [r4, #0]
 8006870:	f021 0104 	bicge.w	r1, r1, #4
 8006874:	6021      	strge	r1, [r4, #0]
 8006876:	b90d      	cbnz	r5, 800687c <_printf_i+0x110>
 8006878:	2e00      	cmp	r6, #0
 800687a:	d04b      	beq.n	8006914 <_printf_i+0x1a8>
 800687c:	4616      	mov	r6, r2
 800687e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006882:	fb03 5711 	mls	r7, r3, r1, r5
 8006886:	5dc7      	ldrb	r7, [r0, r7]
 8006888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800688c:	462f      	mov	r7, r5
 800688e:	42bb      	cmp	r3, r7
 8006890:	460d      	mov	r5, r1
 8006892:	d9f4      	bls.n	800687e <_printf_i+0x112>
 8006894:	2b08      	cmp	r3, #8
 8006896:	d10b      	bne.n	80068b0 <_printf_i+0x144>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	07df      	lsls	r7, r3, #31
 800689c:	d508      	bpl.n	80068b0 <_printf_i+0x144>
 800689e:	6923      	ldr	r3, [r4, #16]
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	4299      	cmp	r1, r3
 80068a4:	bfde      	ittt	le
 80068a6:	2330      	movle	r3, #48	@ 0x30
 80068a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068b0:	1b92      	subs	r2, r2, r6
 80068b2:	6122      	str	r2, [r4, #16]
 80068b4:	f8cd a000 	str.w	sl, [sp]
 80068b8:	464b      	mov	r3, r9
 80068ba:	aa03      	add	r2, sp, #12
 80068bc:	4621      	mov	r1, r4
 80068be:	4640      	mov	r0, r8
 80068c0:	f7ff fee6 	bl	8006690 <_printf_common>
 80068c4:	3001      	adds	r0, #1
 80068c6:	d14a      	bne.n	800695e <_printf_i+0x1f2>
 80068c8:	f04f 30ff 	mov.w	r0, #4294967295
 80068cc:	b004      	add	sp, #16
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f043 0320 	orr.w	r3, r3, #32
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	4833      	ldr	r0, [pc, #204]	@ (80069a8 <_printf_i+0x23c>)
 80068dc:	2778      	movs	r7, #120	@ 0x78
 80068de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	6831      	ldr	r1, [r6, #0]
 80068e6:	061f      	lsls	r7, r3, #24
 80068e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80068ec:	d402      	bmi.n	80068f4 <_printf_i+0x188>
 80068ee:	065f      	lsls	r7, r3, #25
 80068f0:	bf48      	it	mi
 80068f2:	b2ad      	uxthmi	r5, r5
 80068f4:	6031      	str	r1, [r6, #0]
 80068f6:	07d9      	lsls	r1, r3, #31
 80068f8:	bf44      	itt	mi
 80068fa:	f043 0320 	orrmi.w	r3, r3, #32
 80068fe:	6023      	strmi	r3, [r4, #0]
 8006900:	b11d      	cbz	r5, 800690a <_printf_i+0x19e>
 8006902:	2310      	movs	r3, #16
 8006904:	e7ac      	b.n	8006860 <_printf_i+0xf4>
 8006906:	4827      	ldr	r0, [pc, #156]	@ (80069a4 <_printf_i+0x238>)
 8006908:	e7e9      	b.n	80068de <_printf_i+0x172>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	f023 0320 	bic.w	r3, r3, #32
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	e7f6      	b.n	8006902 <_printf_i+0x196>
 8006914:	4616      	mov	r6, r2
 8006916:	e7bd      	b.n	8006894 <_printf_i+0x128>
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	6825      	ldr	r5, [r4, #0]
 800691c:	6961      	ldr	r1, [r4, #20]
 800691e:	1d18      	adds	r0, r3, #4
 8006920:	6030      	str	r0, [r6, #0]
 8006922:	062e      	lsls	r6, r5, #24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	d501      	bpl.n	800692c <_printf_i+0x1c0>
 8006928:	6019      	str	r1, [r3, #0]
 800692a:	e002      	b.n	8006932 <_printf_i+0x1c6>
 800692c:	0668      	lsls	r0, r5, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0x1bc>
 8006930:	8019      	strh	r1, [r3, #0]
 8006932:	2300      	movs	r3, #0
 8006934:	6123      	str	r3, [r4, #16]
 8006936:	4616      	mov	r6, r2
 8006938:	e7bc      	b.n	80068b4 <_printf_i+0x148>
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	1d1a      	adds	r2, r3, #4
 800693e:	6032      	str	r2, [r6, #0]
 8006940:	681e      	ldr	r6, [r3, #0]
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	2100      	movs	r1, #0
 8006946:	4630      	mov	r0, r6
 8006948:	f7f9 fc4a 	bl	80001e0 <memchr>
 800694c:	b108      	cbz	r0, 8006952 <_printf_i+0x1e6>
 800694e:	1b80      	subs	r0, r0, r6
 8006950:	6060      	str	r0, [r4, #4]
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	2300      	movs	r3, #0
 8006958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800695c:	e7aa      	b.n	80068b4 <_printf_i+0x148>
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	4632      	mov	r2, r6
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	47d0      	blx	sl
 8006968:	3001      	adds	r0, #1
 800696a:	d0ad      	beq.n	80068c8 <_printf_i+0x15c>
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	079b      	lsls	r3, r3, #30
 8006970:	d413      	bmi.n	800699a <_printf_i+0x22e>
 8006972:	68e0      	ldr	r0, [r4, #12]
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	4298      	cmp	r0, r3
 8006978:	bfb8      	it	lt
 800697a:	4618      	movlt	r0, r3
 800697c:	e7a6      	b.n	80068cc <_printf_i+0x160>
 800697e:	2301      	movs	r3, #1
 8006980:	4632      	mov	r2, r6
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	47d0      	blx	sl
 8006988:	3001      	adds	r0, #1
 800698a:	d09d      	beq.n	80068c8 <_printf_i+0x15c>
 800698c:	3501      	adds	r5, #1
 800698e:	68e3      	ldr	r3, [r4, #12]
 8006990:	9903      	ldr	r1, [sp, #12]
 8006992:	1a5b      	subs	r3, r3, r1
 8006994:	42ab      	cmp	r3, r5
 8006996:	dcf2      	bgt.n	800697e <_printf_i+0x212>
 8006998:	e7eb      	b.n	8006972 <_printf_i+0x206>
 800699a:	2500      	movs	r5, #0
 800699c:	f104 0619 	add.w	r6, r4, #25
 80069a0:	e7f5      	b.n	800698e <_printf_i+0x222>
 80069a2:	bf00      	nop
 80069a4:	08006d39 	.word	0x08006d39
 80069a8:	08006d4a 	.word	0x08006d4a

080069ac <__sflush_r>:
 80069ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069b4:	0716      	lsls	r6, r2, #28
 80069b6:	4605      	mov	r5, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	d454      	bmi.n	8006a66 <__sflush_r+0xba>
 80069bc:	684b      	ldr	r3, [r1, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dc02      	bgt.n	80069c8 <__sflush_r+0x1c>
 80069c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dd48      	ble.n	8006a5a <__sflush_r+0xae>
 80069c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d045      	beq.n	8006a5a <__sflush_r+0xae>
 80069ce:	2300      	movs	r3, #0
 80069d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069d4:	682f      	ldr	r7, [r5, #0]
 80069d6:	6a21      	ldr	r1, [r4, #32]
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	d030      	beq.n	8006a3e <__sflush_r+0x92>
 80069dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	0759      	lsls	r1, r3, #29
 80069e2:	d505      	bpl.n	80069f0 <__sflush_r+0x44>
 80069e4:	6863      	ldr	r3, [r4, #4]
 80069e6:	1ad2      	subs	r2, r2, r3
 80069e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069ea:	b10b      	cbz	r3, 80069f0 <__sflush_r+0x44>
 80069ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069ee:	1ad2      	subs	r2, r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069f4:	6a21      	ldr	r1, [r4, #32]
 80069f6:	4628      	mov	r0, r5
 80069f8:	47b0      	blx	r6
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	d106      	bne.n	8006a0e <__sflush_r+0x62>
 8006a00:	6829      	ldr	r1, [r5, #0]
 8006a02:	291d      	cmp	r1, #29
 8006a04:	d82b      	bhi.n	8006a5e <__sflush_r+0xb2>
 8006a06:	4a2a      	ldr	r2, [pc, #168]	@ (8006ab0 <__sflush_r+0x104>)
 8006a08:	410a      	asrs	r2, r1
 8006a0a:	07d6      	lsls	r6, r2, #31
 8006a0c:	d427      	bmi.n	8006a5e <__sflush_r+0xb2>
 8006a0e:	2200      	movs	r2, #0
 8006a10:	6062      	str	r2, [r4, #4]
 8006a12:	04d9      	lsls	r1, r3, #19
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	d504      	bpl.n	8006a24 <__sflush_r+0x78>
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	d101      	bne.n	8006a22 <__sflush_r+0x76>
 8006a1e:	682b      	ldr	r3, [r5, #0]
 8006a20:	b903      	cbnz	r3, 8006a24 <__sflush_r+0x78>
 8006a22:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a26:	602f      	str	r7, [r5, #0]
 8006a28:	b1b9      	cbz	r1, 8006a5a <__sflush_r+0xae>
 8006a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a2e:	4299      	cmp	r1, r3
 8006a30:	d002      	beq.n	8006a38 <__sflush_r+0x8c>
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7ff fbf2 	bl	800621c <_free_r>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a3c:	e00d      	b.n	8006a5a <__sflush_r+0xae>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b0      	blx	r6
 8006a44:	4602      	mov	r2, r0
 8006a46:	1c50      	adds	r0, r2, #1
 8006a48:	d1c9      	bne.n	80069de <__sflush_r+0x32>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0c6      	beq.n	80069de <__sflush_r+0x32>
 8006a50:	2b1d      	cmp	r3, #29
 8006a52:	d001      	beq.n	8006a58 <__sflush_r+0xac>
 8006a54:	2b16      	cmp	r3, #22
 8006a56:	d11e      	bne.n	8006a96 <__sflush_r+0xea>
 8006a58:	602f      	str	r7, [r5, #0]
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e022      	b.n	8006aa4 <__sflush_r+0xf8>
 8006a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	e01b      	b.n	8006a9e <__sflush_r+0xf2>
 8006a66:	690f      	ldr	r7, [r1, #16]
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	d0f6      	beq.n	8006a5a <__sflush_r+0xae>
 8006a6c:	0793      	lsls	r3, r2, #30
 8006a6e:	680e      	ldr	r6, [r1, #0]
 8006a70:	bf08      	it	eq
 8006a72:	694b      	ldreq	r3, [r1, #20]
 8006a74:	600f      	str	r7, [r1, #0]
 8006a76:	bf18      	it	ne
 8006a78:	2300      	movne	r3, #0
 8006a7a:	eba6 0807 	sub.w	r8, r6, r7
 8006a7e:	608b      	str	r3, [r1, #8]
 8006a80:	f1b8 0f00 	cmp.w	r8, #0
 8006a84:	dde9      	ble.n	8006a5a <__sflush_r+0xae>
 8006a86:	6a21      	ldr	r1, [r4, #32]
 8006a88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a8a:	4643      	mov	r3, r8
 8006a8c:	463a      	mov	r2, r7
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b0      	blx	r6
 8006a92:	2800      	cmp	r0, #0
 8006a94:	dc08      	bgt.n	8006aa8 <__sflush_r+0xfc>
 8006a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa8:	4407      	add	r7, r0
 8006aaa:	eba8 0800 	sub.w	r8, r8, r0
 8006aae:	e7e7      	b.n	8006a80 <__sflush_r+0xd4>
 8006ab0:	dfbffffe 	.word	0xdfbffffe

08006ab4 <_fflush_r>:
 8006ab4:	b538      	push	{r3, r4, r5, lr}
 8006ab6:	690b      	ldr	r3, [r1, #16]
 8006ab8:	4605      	mov	r5, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	b913      	cbnz	r3, 8006ac4 <_fflush_r+0x10>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	bd38      	pop	{r3, r4, r5, pc}
 8006ac4:	b118      	cbz	r0, 8006ace <_fflush_r+0x1a>
 8006ac6:	6a03      	ldr	r3, [r0, #32]
 8006ac8:	b90b      	cbnz	r3, 8006ace <_fflush_r+0x1a>
 8006aca:	f7ff f9ad 	bl	8005e28 <__sinit>
 8006ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f3      	beq.n	8006abe <_fflush_r+0xa>
 8006ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ad8:	07d0      	lsls	r0, r2, #31
 8006ada:	d404      	bmi.n	8006ae6 <_fflush_r+0x32>
 8006adc:	0599      	lsls	r1, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_fflush_r+0x32>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ae2:	f7ff fb98 	bl	8006216 <__retarget_lock_acquire_recursive>
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	4621      	mov	r1, r4
 8006aea:	f7ff ff5f 	bl	80069ac <__sflush_r>
 8006aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006af0:	07da      	lsls	r2, r3, #31
 8006af2:	4605      	mov	r5, r0
 8006af4:	d4e4      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	059b      	lsls	r3, r3, #22
 8006afa:	d4e1      	bmi.n	8006ac0 <_fflush_r+0xc>
 8006afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006afe:	f7ff fb8b 	bl	8006218 <__retarget_lock_release_recursive>
 8006b02:	e7dd      	b.n	8006ac0 <_fflush_r+0xc>

08006b04 <__swhatbuf_r>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	460c      	mov	r4, r1
 8006b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	b096      	sub	sp, #88	@ 0x58
 8006b10:	4615      	mov	r5, r2
 8006b12:	461e      	mov	r6, r3
 8006b14:	da0d      	bge.n	8006b32 <__swhatbuf_r+0x2e>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b1c:	f04f 0100 	mov.w	r1, #0
 8006b20:	bf14      	ite	ne
 8006b22:	2340      	movne	r3, #64	@ 0x40
 8006b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b28:	2000      	movs	r0, #0
 8006b2a:	6031      	str	r1, [r6, #0]
 8006b2c:	602b      	str	r3, [r5, #0]
 8006b2e:	b016      	add	sp, #88	@ 0x58
 8006b30:	bd70      	pop	{r4, r5, r6, pc}
 8006b32:	466a      	mov	r2, sp
 8006b34:	f000 f848 	bl	8006bc8 <_fstat_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dbec      	blt.n	8006b16 <__swhatbuf_r+0x12>
 8006b3c:	9901      	ldr	r1, [sp, #4]
 8006b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b46:	4259      	negs	r1, r3
 8006b48:	4159      	adcs	r1, r3
 8006b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b4e:	e7eb      	b.n	8006b28 <__swhatbuf_r+0x24>

08006b50 <__smakebuf_r>:
 8006b50:	898b      	ldrh	r3, [r1, #12]
 8006b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b54:	079d      	lsls	r5, r3, #30
 8006b56:	4606      	mov	r6, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	d507      	bpl.n	8006b6c <__smakebuf_r+0x1c>
 8006b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	2301      	movs	r3, #1
 8006b66:	6163      	str	r3, [r4, #20]
 8006b68:	b003      	add	sp, #12
 8006b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b6c:	ab01      	add	r3, sp, #4
 8006b6e:	466a      	mov	r2, sp
 8006b70:	f7ff ffc8 	bl	8006b04 <__swhatbuf_r>
 8006b74:	9f00      	ldr	r7, [sp, #0]
 8006b76:	4605      	mov	r5, r0
 8006b78:	4639      	mov	r1, r7
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff fbba 	bl	80062f4 <_malloc_r>
 8006b80:	b948      	cbnz	r0, 8006b96 <__smakebuf_r+0x46>
 8006b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b86:	059a      	lsls	r2, r3, #22
 8006b88:	d4ee      	bmi.n	8006b68 <__smakebuf_r+0x18>
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	f043 0302 	orr.w	r3, r3, #2
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	e7e2      	b.n	8006b5c <__smakebuf_r+0xc>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	6020      	str	r0, [r4, #0]
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	9b01      	ldr	r3, [sp, #4]
 8006ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ba6:	b15b      	cbz	r3, 8006bc0 <__smakebuf_r+0x70>
 8006ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 f81d 	bl	8006bec <_isatty_r>
 8006bb2:	b128      	cbz	r0, 8006bc0 <__smakebuf_r+0x70>
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	81a3      	strh	r3, [r4, #12]
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	431d      	orrs	r5, r3
 8006bc4:	81a5      	strh	r5, [r4, #12]
 8006bc6:	e7cf      	b.n	8006b68 <__smakebuf_r+0x18>

08006bc8 <_fstat_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	@ (8006be8 <_fstat_r+0x20>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	602b      	str	r3, [r5, #0]
 8006bd6:	f7fa f8ba 	bl	8000d4e <_fstat>
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	d102      	bne.n	8006be4 <_fstat_r+0x1c>
 8006bde:	682b      	ldr	r3, [r5, #0]
 8006be0:	b103      	cbz	r3, 8006be4 <_fstat_r+0x1c>
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	bd38      	pop	{r3, r4, r5, pc}
 8006be6:	bf00      	nop
 8006be8:	20000334 	.word	0x20000334

08006bec <_isatty_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	@ (8006c08 <_isatty_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa f8b9 	bl	8000d6e <_isatty>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_isatty_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_isatty_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20000334 	.word	0x20000334

08006c0c <_sbrk_r>:
 8006c0c:	b538      	push	{r3, r4, r5, lr}
 8006c0e:	4d06      	ldr	r5, [pc, #24]	@ (8006c28 <_sbrk_r+0x1c>)
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fa f8c2 	bl	8000da0 <_sbrk>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_sbrk_r+0x1a>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_sbrk_r+0x1a>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20000334 	.word	0x20000334

08006c2c <_init>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	bf00      	nop
 8006c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c32:	bc08      	pop	{r3}
 8006c34:	469e      	mov	lr, r3
 8006c36:	4770      	bx	lr

08006c38 <_fini>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	bf00      	nop
 8006c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3e:	bc08      	pop	{r3}
 8006c40:	469e      	mov	lr, r3
 8006c42:	4770      	bx	lr
