
callback.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007050  08007050  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007050  08007050  00008050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007058  08007058  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007058  08007058  00008058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800705c  0800705c  0000805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007060  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004298  20000060  080070c0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042f8  080070c0  000092f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011324  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b43  00000000  00000000  0001a3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1e  00000000  00000000  0001de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a46  00000000  00000000  0001eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000133f0  00000000  00000000  000364f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a66  00000000  00000000  000498e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da34a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000da390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000de930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f40 	.word	0x08006f40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006f40 	.word	0x08006f40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <vApplicationGetIdleTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	@ (80005a0 <vApplicationGetIdleTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200000d0 	.word	0x200000d0

080005a4 <MPU6050_Init>:
void MPU6050_Read(void);

/* USER CODE BEGIN 0 */
/* Initialize the MPU6050 sensor (wake it up) */
void MPU6050_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af04      	add	r7, sp, #16
  uint8_t data = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
  // Write 0 to the power management register to wake up MPU6050
  if (HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1,
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	226b      	movs	r2, #107	@ 0x6b
 80005c0:	21d0      	movs	r1, #208	@ 0xd0
 80005c2:	4806      	ldr	r0, [pc, #24]	@ (80005dc <MPU6050_Init+0x38>)
 80005c4:	f001 fc74 	bl	8001eb0 <HAL_I2C_Mem_Write>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MPU6050_Init+0x2e>
                        I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY) != HAL_OK)
  {
    Error_Handler();
 80005ce:	f000 fa95 	bl	8000afc <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200002d0 	.word	0x200002d0

080005e0 <MPU6050_Read>:

/* Start a DMA-based read from the MPU6050 */
void MPU6050_Read(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af02      	add	r7, sp, #8
  // Read 14 bytes starting from the ACCEL_XOUT_H register
  if (HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H,
 80005e6:	230e      	movs	r3, #14
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MPU6050_Read+0x2c>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	223b      	movs	r2, #59	@ 0x3b
 80005f2:	21d0      	movs	r1, #208	@ 0xd0
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <MPU6050_Read+0x30>)
 80005f6:	f001 fd55 	bl	80020a4 <HAL_I2C_Mem_Read_DMA>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MPU6050_Read+0x24>
                           I2C_MEMADD_SIZE_8BIT, mpu6050Data, 14) != HAL_OK)
  {
    Error_Handler();
 8000600:	f000 fa7c 	bl	8000afc <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000438 	.word	0x20000438
 8000610:	200002d0 	.word	0x200002d0

08000614 <HAL_I2C_MemRxCpltCallback>:

/* DMA callback: Called when the DMA-based I2C read is complete.
   This function releases the semaphore to signal that new data is ready.
*/
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == I2C1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <HAL_I2C_MemRxCpltCallback+0x24>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d104      	bne.n	8000630 <HAL_I2C_MemRxCpltCallback+0x1c>
  {
    osSemaphoreRelease(mpu6050SemHandle);
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <HAL_I2C_MemRxCpltCallback+0x28>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fd1c 	bl	8004068 <osSemaphoreRelease>
  }
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40005400 	.word	0x40005400
 800063c:	20000434 	.word	0x20000434

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b090      	sub	sp, #64	@ 0x40
 8000644:	af00      	add	r7, sp, #0
  HAL_Init();
 8000646:	f000 fc2f 	bl	8000ea8 <HAL_Init>
  SystemClock_Config();
 800064a:	f000 f84f 	bl	80006ec <SystemClock_Config>

  MX_GPIO_Init();
 800064e:	f000 f939 	bl	80008c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 f90f 	bl	8000874 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f8e3 	bl	8000820 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800065a:	f000 f8b3 	bl	80007c4 <MX_I2C1_Init>

  MPU6050_Init();
 800065e:	f7ff ffa1 	bl	80005a4 <MPU6050_Init>

  /* Create the semaphore before starting tasks */
  osSemaphoreDef(mpuSem);
 8000662:	2300      	movs	r3, #0
 8000664:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000666:	2300      	movs	r3, #0
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  mpu6050SemHandle = osSemaphoreCreate(osSemaphore(mpuSem), 1);
 800066a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fc78 	bl	8003f66 <osSemaphoreCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <main+0x98>)
 800067a:	6013      	str	r3, [r2, #0]
  // Take the semaphore so the task waits for new data.
  osSemaphoreWait(mpu6050SemHandle, 0);
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <main+0x98>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fca2 	bl	8003fcc <osSemaphoreWait>

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <main+0x9c>)
 800068a:	f107 041c 	add.w	r4, r7, #28
 800068e:	461d      	mov	r5, r3
 8000690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fbff 	bl	8003ea6 <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <main+0xa0>)
 80006ac:	6013      	str	r3, [r2, #0]

  osThreadDef(mpu6050Task, StartMPU6050Task, osPriorityNormal, 0, 128);
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <main+0xa4>)
 80006b0:	463c      	mov	r4, r7
 80006b2:	461d      	mov	r5, r3
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mpu6050TaskHandle = osThreadCreate(osThread(mpu6050Task), NULL);
 80006c0:	463b      	mov	r3, r7
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fbee 	bl	8003ea6 <osThreadCreate>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <main+0xa8>)
 80006ce:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80006d0:	f003 fbe2 	bl	8003e98 <osKernelStart>

  while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0x94>
 80006d8:	20000434 	.word	0x20000434
 80006dc:	08006f64 	.word	0x08006f64
 80006e0:	2000042c 	.word	0x2000042c
 80006e4:	08006f8c 	.word	0x08006f8c
 80006e8:	20000430 	.word	0x20000430

080006ec <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	@ 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 ffa0 	bl	8006640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b29      	ldr	r3, [pc, #164]	@ (80007bc <SystemClock_Config+0xd0>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a28      	ldr	r2, [pc, #160]	@ (80007bc <SystemClock_Config+0xd0>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClock_Config+0xd0>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <SystemClock_Config+0xd4>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <SystemClock_Config+0xd4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000760:	2310      	movs	r3, #16
 8000762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800076a:	2304      	movs	r3, #4
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800076e:	2307      	movs	r3, #7
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fac0 	bl	8002cfc <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000782:	f000 f9bb 	bl	8000afc <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fd22 	bl	80031ec <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ae:	f000 f9a5 	bl	8000afc <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f001 fa11 	bl	8001c28 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f976 	bl	8000afc <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200002d0 	.word	0x200002d0
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fee8 	bl	800362c <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f94b 	bl	8000afc <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200003e4 	.word	0x200003e4
 8000870:	40004400 	.word	0x40004400

08000874 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_DMA_Init+0x4c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <MX_DMA_Init+0x4c>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <MX_DMA_Init+0x4c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	200b      	movs	r0, #11
 800089c:	f000 fc51 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80008a0:	200b      	movs	r0, #11
 80008a2:	f000 fc6a 	bl	800117a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2105      	movs	r1, #5
 80008aa:	2011      	movs	r0, #17
 80008ac:	f000 fc49 	bl	8001142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008b0:	2011      	movs	r0, #17
 80008b2:	f000 fc62 	bl	800117a <HAL_NVIC_EnableIRQ>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a25      	ldr	r2, [pc, #148]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a1e      	ldr	r2, [pc, #120]	@ (8000994 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a17      	ldr	r2, [pc, #92]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2120      	movs	r1, #32
 800094e:	4812      	ldr	r0, [pc, #72]	@ (8000998 <MX_GPIO_Init+0xd4>)
 8000950:	f001 f950 	bl	8001bf4 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8000954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800095e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_GPIO_Init+0xd8>)
 800096c:	f000 ffbe 	bl	80018ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_GPIO_Init+0xd4>)
 8000988:	f000 ffb0 	bl	80018ec <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020800 	.word	0x40020800

080009a0 <StartDefaultTask>:

/* FreeRTOS Default Task */
void StartDefaultTask(void const * argument)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f003 fac8 	bl	8003f3e <osDelay>
 80009ae:	e7fb      	b.n	80009a8 <StartDefaultTask+0x8>

080009b0 <StartMPU6050Task>:
  }
}

/* FreeRTOS Task to read MPU6050 sensor data periodically */
void StartMPU6050Task(void const * argument)
{
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	b0b1      	sub	sp, #196	@ 0xc4
 80009b4:	af06      	add	r7, sp, #24
 80009b6:	6078      	str	r0, [r7, #4]
  char sensorMsg[150];
  for(;;)
  {
    MPU6050_Read();  // Initiate DMA read
 80009b8:	f7ff fe12 	bl	80005e0 <MPU6050_Read>

    // Wait until the DMA callback releases the semaphore
    if (osSemaphoreWait(mpu6050SemHandle, osWaitForever) == osOK)
 80009bc:	4b44      	ldr	r3, [pc, #272]	@ (8000ad0 <StartMPU6050Task+0x120>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	4618      	mov	r0, r3
 80009c6:	f003 fb01 	bl	8003fcc <osSemaphoreWait>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d17b      	bne.n	8000ac8 <StartMPU6050Task+0x118>
    {
      // Calculate sensor values from the raw data
      AccelX = (int16_t)(mpu6050Data[0] << 8 | mpu6050Data[1]);
 80009d0:	4b40      	ldr	r3, [pc, #256]	@ (8000ad4 <StartMPU6050Task+0x124>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad4 <StartMPU6050Task+0x124>)
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	4313      	orrs	r3, r2
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <StartMPU6050Task+0x128>)
 80009e4:	801a      	strh	r2, [r3, #0]
      AccelY = (int16_t)(mpu6050Data[2] << 8 | mpu6050Data[3]);
 80009e6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <StartMPU6050Task+0x124>)
 80009e8:	789b      	ldrb	r3, [r3, #2]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <StartMPU6050Task+0x124>)
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21a      	sxth	r2, r3
 80009f8:	4b38      	ldr	r3, [pc, #224]	@ (8000adc <StartMPU6050Task+0x12c>)
 80009fa:	801a      	strh	r2, [r3, #0]
      AccelZ = (int16_t)(mpu6050Data[4] << 8 | mpu6050Data[5]);
 80009fc:	4b35      	ldr	r3, [pc, #212]	@ (8000ad4 <StartMPU6050Task+0x124>)
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b21a      	sxth	r2, r3
 8000a04:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a06:	795b      	ldrb	r3, [r3, #5]
 8000a08:	b21b      	sxth	r3, r3
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <StartMPU6050Task+0x130>)
 8000a10:	801a      	strh	r2, [r3, #0]
      Temperature = (int16_t)(mpu6050Data[6] << 8 | mpu6050Data[7]);
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a14:	799b      	ldrb	r3, [r3, #6]
 8000a16:	021b      	lsls	r3, r3, #8
 8000a18:	b21a      	sxth	r2, r3
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a1c:	79db      	ldrb	r3, [r3, #7]
 8000a1e:	b21b      	sxth	r3, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <StartMPU6050Task+0x134>)
 8000a26:	801a      	strh	r2, [r3, #0]
      GyroX = (int16_t)(mpu6050Data[8] << 8 | mpu6050Data[9]);
 8000a28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a2a:	7a1b      	ldrb	r3, [r3, #8]
 8000a2c:	021b      	lsls	r3, r3, #8
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a32:	7a5b      	ldrb	r3, [r3, #9]
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <StartMPU6050Task+0x138>)
 8000a3c:	801a      	strh	r2, [r3, #0]
      GyroY = (int16_t)(mpu6050Data[10] << 8 | mpu6050Data[11]);
 8000a3e:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a40:	7a9b      	ldrb	r3, [r3, #10]
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a48:	7adb      	ldrb	r3, [r3, #11]
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <StartMPU6050Task+0x13c>)
 8000a52:	801a      	strh	r2, [r3, #0]
      GyroZ = (int16_t)(mpu6050Data[12] << 8 | mpu6050Data[13]);
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a56:	7b1b      	ldrb	r3, [r3, #12]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <StartMPU6050Task+0x124>)
 8000a5e:	7b5b      	ldrb	r3, [r3, #13]
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b22      	ldr	r3, [pc, #136]	@ (8000af0 <StartMPU6050Task+0x140>)
 8000a68:	801a      	strh	r2, [r3, #0]

      // Format and transmit the message containing confirmation and sensor data
      int len = snprintf(sensorMsg, sizeof(sensorMsg),
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <StartMPU6050Task+0x128>)
 8000a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a70:	461e      	mov	r6, r3
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <StartMPU6050Task+0x12c>)
 8000a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <StartMPU6050Task+0x130>)
 8000a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <StartMPU6050Task+0x138>)
 8000a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a88:	461c      	mov	r4, r3
 8000a8a:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <StartMPU6050Task+0x13c>)
 8000a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a90:	461d      	mov	r5, r3
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <StartMPU6050Task+0x140>)
 8000a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	9304      	str	r3, [sp, #16]
 8000a9e:	9503      	str	r5, [sp, #12]
 8000aa0:	9402      	str	r4, [sp, #8]
 8000aa2:	9101      	str	r1, [sp, #4]
 8000aa4:	9200      	str	r2, [sp, #0]
 8000aa6:	4633      	mov	r3, r6
 8000aa8:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <StartMPU6050Task+0x144>)
 8000aaa:	2196      	movs	r1, #150	@ 0x96
 8000aac:	f005 fd94 	bl	80065d8 <sniprintf>
 8000ab0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                         "Detected successfully\r\nSensor Data: AX:%d AY:%d AZ:%d GX:%d GY:%d GZ:%d\r\n",
                         AccelX, AccelY, AccelZ, GyroX, GyroY, GyroZ);
      HAL_UART_Transmit(&huart2, (uint8_t*)sensorMsg, len, HAL_MAX_DELAY);
 8000ab4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f107 010c 	add.w	r1, r7, #12
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <StartMPU6050Task+0x148>)
 8000ac4:	f002 fe02 	bl	80036cc <HAL_UART_Transmit>
    }
    osDelay(100); // Delay before the next read
 8000ac8:	2064      	movs	r0, #100	@ 0x64
 8000aca:	f003 fa38 	bl	8003f3e <osDelay>
    MPU6050_Read();  // Initiate DMA read
 8000ace:	e773      	b.n	80009b8 <StartMPU6050Task+0x8>
 8000ad0:	20000434 	.word	0x20000434
 8000ad4:	20000438 	.word	0x20000438
 8000ad8:	20000446 	.word	0x20000446
 8000adc:	20000448 	.word	0x20000448
 8000ae0:	2000044a 	.word	0x2000044a
 8000ae4:	2000044c 	.word	0x2000044c
 8000ae8:	2000044e 	.word	0x2000044e
 8000aec:	20000450 	.word	0x20000450
 8000af0:	20000452 	.word	0x20000452
 8000af4:	08006fa8 	.word	0x08006fa8
 8000af8:	200003e4 	.word	0x200003e4

08000afc <Error_Handler>:
  }
}

void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f000 faf8 	bl	8001142 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	@ 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ca0 <HAL_I2C_MspInit+0x140>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 8089 	bne.w	8000c96 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b46      	ldr	r3, [pc, #280]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a45      	ldr	r2, [pc, #276]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 0302 	and.w	r3, r3, #2
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba0:	23c0      	movs	r3, #192	@ 0xc0
 8000ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba4:	2312      	movs	r3, #18
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	483b      	ldr	r0, [pc, #236]	@ (8000ca8 <HAL_I2C_MspInit+0x148>)
 8000bbc:	f000 fe96 	bl	80018ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b37      	ldr	r3, [pc, #220]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a36      	ldr	r2, [pc, #216]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000bca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <HAL_I2C_MspInit+0x144>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000bdc:	4b33      	ldr	r3, [pc, #204]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000bde:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <HAL_I2C_MspInit+0x150>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000be2:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000c1c:	4823      	ldr	r0, [pc, #140]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c1e:	f000 fac7 	bl	80011b0 <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000c28:	f7ff ff68 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c30:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c32:	4a1e      	ldr	r2, [pc, #120]	@ (8000cac <HAL_I2C_MspInit+0x14c>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb8 <HAL_I2C_MspInit+0x158>)
 8000c3c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c44:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c48:	2240      	movs	r2, #64	@ 0x40
 8000c4a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c7c:	f000 fa98 	bl	80011b0 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000c86:	f7ff ff39 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_I2C_MspInit+0x154>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	20000324 	.word	0x20000324
 8000cb0:	40026010 	.word	0x40026010
 8000cb4:	20000384 	.word	0x20000384
 8000cb8:	400260a0 	.word	0x400260a0

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	@ (8000d40 <HAL_UART_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a17      	ldr	r2, [pc, #92]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_UART_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d26:	2307      	movs	r3, #7
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d32:	f000 fddb 	bl	80018ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	@ 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 f8e1 	bl	8000f4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d8a:	f004 fdbd 	bl	8005908 <xTaskGetSchedulerState>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d001      	beq.n	8000d98 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d94:	f005 f9a0 	bl	80060d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <DMA1_Stream0_IRQHandler+0x10>)
 8000da2:	f000 fb2d 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000324 	.word	0x20000324

08000db0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <DMA1_Stream6_IRQHandler+0x10>)
 8000db6:	f000 fb23 	bl	8001400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000384 	.word	0x20000384

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f005 fc2c 	bl	8006650 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20018000 	.word	0x20018000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000454 	.word	0x20000454
 8000e2c:	200042f8 	.word	0x200042f8

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ffea 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f005 fbeb 	bl	800665c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fbdb 	bl	8000640 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e98:	08007060 	.word	0x08007060
  ldr r2, =_sbss
 8000e9c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ea0:	200042f8 	.word	0x200042f8

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f92b 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe14 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 f943 	bl	8001196 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 f90b 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000458 	.word	0x20000458

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000458 	.word	0x20000458

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db0b      	blt.n	800101a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f003 021f 	and.w	r2, r3, #31
 8001008:	4907      	ldr	r1, [pc, #28]	@ (8001028 <__NVIC_EnableIRQ+0x38>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	095b      	lsrs	r3, r3, #5
 8001010:	2001      	movs	r0, #1
 8001012:	fa00 f202 	lsl.w	r2, r0, r2
 8001016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000e100 	.word	0xe000e100

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff29 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff3e 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff31 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff feda 	bl	8000f74 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e099      	b.n	8001300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2202      	movs	r2, #2
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0201 	bic.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ec:	e00f      	b.n	800120e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ee:	f7ff fec1 	bl	8000f74 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d908      	bls.n	800120e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2220      	movs	r2, #32
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e078      	b.n	8001300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1e8      	bne.n	80011ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <HAL_DMA_Init+0x158>)
 8001228:	4013      	ands	r3, r2
 800122a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	2b04      	cmp	r3, #4
 8001266:	d107      	bne.n	8001278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4313      	orrs	r3, r2
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4313      	orrs	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f023 0307 	bic.w	r3, r3, #7
 800128e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	4313      	orrs	r3, r2
 8001298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d117      	bne.n	80012d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00e      	beq.n	80012d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fa9d 	bl	80017f4 <DMA_CheckFifoParam>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2240      	movs	r2, #64	@ 0x40
 80012c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80012ce:	2301      	movs	r3, #1
 80012d0:	e016      	b.n	8001300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fa54 	bl	8001788 <DMA_CalcBaseAndBitshift>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e8:	223f      	movs	r2, #63	@ 0x3f
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	f010803f 	.word	0xf010803f

0800130c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
 8001318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800132a:	2b01      	cmp	r3, #1
 800132c:	d101      	bne.n	8001332 <HAL_DMA_Start_IT+0x26>
 800132e:	2302      	movs	r3, #2
 8001330:	e040      	b.n	80013b4 <HAL_DMA_Start_IT+0xa8>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d12f      	bne.n	80013a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2202      	movs	r2, #2
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 f9e6 	bl	800172c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	223f      	movs	r2, #63	@ 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0216 	orr.w	r2, r2, #22
 800137a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e005      	b.n	80013b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013ae:	2302      	movs	r3, #2
 80013b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d004      	beq.n	80013da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00c      	b.n	80013f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2205      	movs	r2, #5
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800140c:	4b8e      	ldr	r3, [pc, #568]	@ (8001648 <HAL_DMA_IRQHandler+0x248>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a8e      	ldr	r2, [pc, #568]	@ (800164c <HAL_DMA_IRQHandler+0x24c>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0a9b      	lsrs	r3, r3, #10
 8001418:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142a:	2208      	movs	r2, #8
 800142c:	409a      	lsls	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01a      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0204 	bic.w	r2, r2, #4
 8001452:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001458:	2208      	movs	r2, #8
 800145a:	409a      	lsls	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001470:	2201      	movs	r2, #1
 8001472:	409a      	lsls	r2, r3
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d012      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a6:	2204      	movs	r2, #4
 80014a8:	409a      	lsls	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d012      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	2204      	movs	r2, #4
 80014c6:	409a      	lsls	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	f043 0204 	orr.w	r2, r3, #4
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014dc:	2210      	movs	r2, #16
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d043      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d03c      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fa:	2210      	movs	r2, #16
 80014fc:	409a      	lsls	r2, r3
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d018      	beq.n	8001542 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3
 800152e:	e01f      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01b      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	4798      	blx	r3
 8001540:	e016      	b.n	8001570 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0208 	bic.w	r2, r2, #8
 800155e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	2220      	movs	r2, #32
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	f000 808f 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 8087 	beq.w	80016a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2220      	movs	r2, #32
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d136      	bne.n	8001618 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0216 	bic.w	r2, r2, #22
 80015b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	695a      	ldr	r2, [r3, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <HAL_DMA_IRQHandler+0x1da>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0208 	bic.w	r2, r2, #8
 80015e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ee:	223f      	movs	r2, #63	@ 0x3f
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160a:	2b00      	cmp	r3, #0
 800160c:	d07e      	beq.n	800170c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
        }
        return;
 8001616:	e079      	b.n	800170c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01d      	beq.n	8001662 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001638:	2b00      	cmp	r3, #0
 800163a:	d031      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	4798      	blx	r3
 8001644:	e02c      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d023      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e01e      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d10f      	bne.n	8001690 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0210 	bic.w	r2, r2, #16
 800167e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d032      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d022      	beq.n	80016fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2205      	movs	r2, #5
 80016b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	3301      	adds	r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d307      	bcc.n	80016e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f2      	bne.n	80016cc <HAL_DMA_IRQHandler+0x2cc>
 80016e6:	e000      	b.n	80016ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e000      	b.n	800170e <HAL_DMA_IRQHandler+0x30e>
        return;
 800170c:	bf00      	nop
    }
  }
}
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001748:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b40      	cmp	r3, #64	@ 0x40
 8001758:	d108      	bne.n	800176c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800176a:	e007      	b.n	800177c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	60da      	str	r2, [r3, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	3b10      	subs	r3, #16
 8001798:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <DMA_CalcBaseAndBitshift+0x64>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <DMA_CalcBaseAndBitshift+0x68>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d909      	bls.n	80017ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	1d1a      	adds	r2, r3, #4
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80017c8:	e007      	b.n	80017da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	aaaaaaab 	.word	0xaaaaaaab
 80017f0:	08007014 	.word	0x08007014

080017f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11f      	bne.n	800184e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d856      	bhi.n	80018c2 <DMA_CheckFifoParam+0xce>
 8001814:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <DMA_CheckFifoParam+0x28>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	0800182d 	.word	0x0800182d
 8001820:	0800183f 	.word	0x0800183f
 8001824:	0800182d 	.word	0x0800182d
 8001828:	080018c3 	.word	0x080018c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d046      	beq.n	80018c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800183c:	e043      	b.n	80018c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001846:	d140      	bne.n	80018ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800184c:	e03d      	b.n	80018ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001856:	d121      	bne.n	800189c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d837      	bhi.n	80018ce <DMA_CheckFifoParam+0xda>
 800185e:	a201      	add	r2, pc, #4	@ (adr r2, 8001864 <DMA_CheckFifoParam+0x70>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	0800187b 	.word	0x0800187b
 800186c:	08001875 	.word	0x08001875
 8001870:	0800188d 	.word	0x0800188d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
      break;
 8001878:	e030      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d025      	beq.n	80018d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188a:	e022      	b.n	80018d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001894:	d11f      	bne.n	80018d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800189a:	e01c      	b.n	80018d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d903      	bls.n	80018aa <DMA_CheckFifoParam+0xb6>
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d003      	beq.n	80018b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018a8:	e018      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
      break;
 80018ae:	e015      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00e      	beq.n	80018da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      break;
 80018c0:	e00b      	b.n	80018da <DMA_CheckFifoParam+0xe6>
      break;
 80018c2:	bf00      	nop
 80018c4:	e00a      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e008      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e006      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;
 80018ce:	bf00      	nop
 80018d0:	e004      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
 80018d4:	e002      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;   
 80018d6:	bf00      	nop
 80018d8:	e000      	b.n	80018dc <DMA_CheckFifoParam+0xe8>
      break;
 80018da:	bf00      	nop
    }
  } 
  
  return status; 
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e159      	b.n	8001bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8148 	bne.w	8001bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b01      	cmp	r3, #1
 8001930:	d005      	beq.n	800193e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193a:	2b02      	cmp	r3, #2
 800193c:	d130      	bne.n	80019a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80a2 	beq.w	8001bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b57      	ldr	r3, [pc, #348]	@ (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a56      	ldr	r2, [pc, #344]	@ (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b54      	ldr	r3, [pc, #336]	@ (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <HAL_GPIO_Init+0x2ec>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a49      	ldr	r2, [pc, #292]	@ (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x202>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a48      	ldr	r2, [pc, #288]	@ (8001be0 <HAL_GPIO_Init+0x2f4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x1fe>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a47      	ldr	r2, [pc, #284]	@ (8001be4 <HAL_GPIO_Init+0x2f8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x1fa>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <HAL_GPIO_Init+0x2fc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x1f6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a45      	ldr	r2, [pc, #276]	@ (8001bec <HAL_GPIO_Init+0x300>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x1f2>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b00:	4935      	ldr	r1, [pc, #212]	@ (8001bd8 <HAL_GPIO_Init+0x2ec>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b62:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b86:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb0:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <HAL_GPIO_Init+0x304>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f aea2 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3724      	adds	r7, #36	@ 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40013800 	.word	0x40013800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e12b      	b.n	8001e92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe ff86 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c8c:	f001 fca6 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8001c90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4a81      	ldr	r2, [pc, #516]	@ (8001e9c <HAL_I2C_Init+0x274>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d807      	bhi.n	8001cac <HAL_I2C_Init+0x84>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a80      	ldr	r2, [pc, #512]	@ (8001ea0 <HAL_I2C_Init+0x278>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e006      	b.n	8001cba <HAL_I2C_Init+0x92>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a7d      	ldr	r2, [pc, #500]	@ (8001ea4 <HAL_I2C_Init+0x27c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bf94      	ite	ls
 8001cb4:	2301      	movls	r3, #1
 8001cb6:	2300      	movhi	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0e7      	b.n	8001e92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a78      	ldr	r2, [pc, #480]	@ (8001ea8 <HAL_I2C_Init+0x280>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9b      	lsrs	r3, r3, #18
 8001ccc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8001e9c <HAL_I2C_Init+0x274>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d802      	bhi.n	8001cfc <HAL_I2C_Init+0xd4>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	e009      	b.n	8001d10 <HAL_I2C_Init+0xe8>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	4a69      	ldr	r2, [pc, #420]	@ (8001eac <HAL_I2C_Init+0x284>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
 8001d0e:	3301      	adds	r3, #1
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	495c      	ldr	r1, [pc, #368]	@ (8001e9c <HAL_I2C_Init+0x274>)
 8001d2c:	428b      	cmp	r3, r1
 8001d2e:	d819      	bhi.n	8001d64 <HAL_I2C_Init+0x13c>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e59      	subs	r1, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d44:	400b      	ands	r3, r1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_I2C_Init+0x138>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e59      	subs	r1, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5e:	e051      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001d60:	2304      	movs	r3, #4
 8001d62:	e04f      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <HAL_I2C_Init+0x168>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1e58      	subs	r0, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6859      	ldr	r1, [r3, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	440b      	add	r3, r1
 8001d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf0c      	ite	eq
 8001d88:	2301      	moveq	r3, #1
 8001d8a:	2300      	movne	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e012      	b.n	8001db6 <HAL_I2C_Init+0x18e>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e58      	subs	r0, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6859      	ldr	r1, [r3, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	0099      	lsls	r1, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Init+0x196>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e022      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <HAL_I2C_Init+0x1bc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e58      	subs	r0, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	440b      	add	r3, r1
 8001dd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de2:	e00f      	b.n	8001e04 <HAL_I2C_Init+0x1dc>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1e58      	subs	r0, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	0099      	lsls	r1, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6809      	ldr	r1, [r1, #0]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6911      	ldr	r1, [r2, #16]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68d2      	ldr	r2, [r2, #12]
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	000186a0 	.word	0x000186a0
 8001ea0:	001e847f 	.word	0x001e847f
 8001ea4:	003d08ff 	.word	0x003d08ff
 8001ea8:	431bde83 	.word	0x431bde83
 8001eac:	10624dd3 	.word	0x10624dd3

08001eb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	4608      	mov	r0, r1
 8001eba:	4611      	mov	r1, r2
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	817b      	strh	r3, [r7, #10]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	813b      	strh	r3, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eca:	f7ff f853 	bl	8000f74 <HAL_GetTick>
 8001ece:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	f040 80d9 	bne.w	8002090 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2319      	movs	r3, #25
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	496d      	ldr	r1, [pc, #436]	@ (800209c <HAL_I2C_Mem_Write+0x1ec>)
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 fd2d 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e0cc      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_Mem_Write+0x56>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0c5      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d007      	beq.n	8001f2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2221      	movs	r2, #33	@ 0x21
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	@ 0x40
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80020a0 <HAL_I2C_Mem_Write+0x1f0>)
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f6e:	88f8      	ldrh	r0, [r7, #6]
 8001f70:	893a      	ldrh	r2, [r7, #8]
 8001f72:	8979      	ldrh	r1, [r7, #10]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fa48 	bl	8002414 <I2C_RequestMemoryWrite>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d052      	beq.n	8002030 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e081      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fdf2 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11b      	bne.n	8002030 <HAL_I2C_Mem_Write+0x180>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d017      	beq.n	8002030 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1aa      	bne.n	8001f8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fde5 	bl	8002c0c <I2C_WaitOnBTFFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00d      	beq.n	8002064 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	2b04      	cmp	r3, #4
 800204e:	d107      	bne.n	8002060 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800205e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e016      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	00100002 	.word	0x00100002
 80020a0:	ffff0000 	.word	0xffff0000

080020a4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	@ 0x30
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	817b      	strh	r3, [r7, #10]
 80020b6:	460b      	mov	r3, r1
 80020b8:	813b      	strh	r3, [r7, #8]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020be:	f7fe ff59 	bl	8000f74 <HAL_GetTick>
 80020c2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	f040 8172 	bne.w	80023ba <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80020d6:	4b93      	ldr	r3, [pc, #588]	@ (8002324 <HAL_I2C_Mem_Read_DMA+0x280>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	08db      	lsrs	r3, r3, #3
 80020dc:	4a92      	ldr	r2, [pc, #584]	@ (8002328 <HAL_I2C_Mem_Read_DMA+0x284>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a1a      	lsrs	r2, r3, #8
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009a      	lsls	r2, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d112      	bne.n	8002122 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f043 0220 	orr.w	r2, r3, #32
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800211e:	2302      	movs	r3, #2
 8002120:	e14c      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b02      	cmp	r3, #2
 800212e:	d0df      	beq.n	80020f0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_I2C_Mem_Read_DMA+0x9a>
 800213a:	2302      	movs	r3, #2
 800213c:	e13e      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d007      	beq.n	8002164 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002172:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2222      	movs	r2, #34	@ 0x22
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800218e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002194:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4a62      	ldr	r2, [pc, #392]	@ (800232c <HAL_I2C_Mem_Read_DMA+0x288>)
 80021a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80021a6:	897a      	ldrh	r2, [r7, #10]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80cc 	beq.w	8002360 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02d      	beq.n	800222c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d4:	4a56      	ldr	r2, [pc, #344]	@ (8002330 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80021d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021dc:	4a55      	ldr	r2, [pc, #340]	@ (8002334 <HAL_I2C_Mem_Read_DMA+0x290>)
 80021de:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ec:	2200      	movs	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	2200      	movs	r2, #0
 80021f6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021fc:	2200      	movs	r2, #0
 80021fe:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3310      	adds	r3, #16
 800220a:	4619      	mov	r1, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002216:	f7ff f879 	bl	800130c <HAL_DMA_Start_IT>
 800221a:	4603      	mov	r3, r0
 800221c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002220:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 8087 	bne.w	8002338 <HAL_I2C_Mem_Read_DMA+0x294>
 800222a:	e013      	b.n	8002254 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b3      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002254:	88f8      	ldrh	r0, [r7, #6]
 8002256:	893a      	ldrh	r2, [r7, #8]
 8002258:	8979      	ldrh	r1, [r7, #10]
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	2323      	movs	r3, #35	@ 0x23
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4603      	mov	r3, r0
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 f96b 	bl	8002540 <I2C_RequestMemoryRead>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff f8a1 	bl	80013bc <HAL_DMA_Abort_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002284:	2200      	movs	r2, #0
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002296:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e081      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800230e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	e049      	b.n	80023b6 <HAL_I2C_Mem_Read_DMA+0x312>
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000
 8002328:	14f8b589 	.word	0x14f8b589
 800232c:	ffff0000 	.word	0xffff0000
 8002330:	08002711 	.word	0x08002711
 8002334:	080028cf 	.word	0x080028cf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e02d      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002360:	88f8      	ldrh	r0, [r7, #6]
 8002362:	893a      	ldrh	r2, [r7, #8]
 8002364:	8979      	ldrh	r1, [r7, #10]
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2323      	movs	r3, #35	@ 0x23
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	4603      	mov	r3, r0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f8e5 	bl	8002540 <I2C_RequestMemoryRead>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e01d      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3728      	adds	r7, #40	@ 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800243c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2200      	movs	r2, #0
 8002446:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa7c 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002464:	d103      	bne.n	800246e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e05f      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002472:	897b      	ldrh	r3, [r7, #10]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	6a3a      	ldr	r2, [r7, #32]
 8002486:	492d      	ldr	r1, [pc, #180]	@ (800253c <I2C_RequestMemoryWrite+0x128>)
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fad7 	bl	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e04c      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024b0:	6a39      	ldr	r1, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fb62 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d107      	bne.n	80024d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e02b      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024e0:	893b      	ldrh	r3, [r7, #8]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	611a      	str	r2, [r3, #16]
 80024ea:	e021      	b.n	8002530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fc:	6a39      	ldr	r1, [r7, #32]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fb3c 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	2b04      	cmp	r3, #4
 8002510:	d107      	bne.n	8002522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e005      	b.n	8002532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002526:	893b      	ldrh	r3, [r7, #8]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	00010002 	.word	0x00010002

08002540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	2200      	movs	r2, #0
 8002582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f9de 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025a0:	d103      	bne.n	80025aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0aa      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	4952      	ldr	r1, [pc, #328]	@ (800270c <I2C_RequestMemoryRead+0x1cc>)
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fa39 	bl	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e097      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fac4 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e076      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800261c:	893b      	ldrh	r3, [r7, #8]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e021      	b.n	800266c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fa9e 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	2b04      	cmp	r3, #4
 800264c:	d107      	bne.n	800265e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e050      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fa83 	bl	8002b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e035      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f947 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ce:	d103      	bne.n	80026d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e013      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	6a3a      	ldr	r2, [r7, #32]
 80026f0:	4906      	ldr	r1, [pc, #24]	@ (800270c <I2C_RequestMemoryRead+0x1cc>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f9a2 	bl	8002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002724:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800272c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002742:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	2200      	movs	r2, #0
 8002752:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	2200      	movs	r2, #0
 8002762:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800276a:	2b21      	cmp	r3, #33	@ 0x21
 800276c:	d007      	beq.n	800277e <I2C_DMAXferCplt+0x6e>
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8002774:	2b22      	cmp	r3, #34	@ 0x22
 8002776:	d131      	bne.n	80027dc <I2C_DMAXferCplt+0xcc>
 8002778:	7cbb      	ldrb	r3, [r7, #18]
 800277a:	2b20      	cmp	r3, #32
 800277c:	d12e      	bne.n	80027dc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b29      	cmp	r3, #41	@ 0x29
 8002798:	d10a      	bne.n	80027b0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2221      	movs	r2, #33	@ 0x21
 800279e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2228      	movs	r2, #40	@ 0x28
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7ff fe15 	bl	80023d8 <HAL_I2C_SlaveTxCpltCallback>
 80027ae:	e00c      	b.n	80027ca <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027b4:	d109      	bne.n	80027ca <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2222      	movs	r2, #34	@ 0x22
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2228      	movs	r2, #40	@ 0x28
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f7ff fe11 	bl	80023ec <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80027da:	e074      	b.n	80028c6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d06e      	beq.n	80028c6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002800:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002810:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002818:	d009      	beq.n	800282e <I2C_DMAXferCplt+0x11e>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d006      	beq.n	800282e <I2C_DMAXferCplt+0x11e>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002826:	d002      	beq.n	800282e <I2C_DMAXferCplt+0x11e>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b20      	cmp	r3, #32
 800282c:	d107      	bne.n	800283e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800283c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800284c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800285c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f7ff fdc7 	bl	8002400 <HAL_I2C_ErrorCallback>
}
 8002872:	e028      	b.n	80028c6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b40      	cmp	r3, #64	@ 0x40
 8002886:	d10a      	bne.n	800289e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7fd febc 	bl	8000614 <HAL_I2C_MemRxCpltCallback>
}
 800289c:	e013      	b.n	80028c6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d002      	beq.n	80028b2 <I2C_DMAXferCplt+0x1a2>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d103      	bne.n	80028ba <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028b8:	e002      	b.n	80028c0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2212      	movs	r2, #18
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80028c0:	6978      	ldr	r0, [r7, #20]
 80028c2:	f7ff fd7f 	bl	80023c4 <HAL_I2C_MasterRxCpltCallback>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028e8:	2200      	movs	r2, #0
 80028ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f8:	2200      	movs	r2, #0
 80028fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe ff09 	bl	8001714 <HAL_DMA_GetError>
 8002902:	4603      	mov	r3, r0
 8002904:	2b02      	cmp	r3, #2
 8002906:	d01b      	beq.n	8002940 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002916:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fd60 	bl	8002400 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002958:	e048      	b.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d044      	beq.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002962:	f7fe fb07 	bl	8000f74 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d139      	bne.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10d      	bne.n	800299e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	43da      	mvns	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4013      	ands	r3, r2
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	e00c      	b.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	43da      	mvns	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d116      	bne.n	80029ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e023      	b.n	8002a34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d10d      	bne.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0xca>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	e00c      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf0c      	ite	eq
 8002a24:	2301      	moveq	r3, #1
 8002a26:	2300      	movne	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d093      	beq.n	800295a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4a:	e071      	b.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5a:	d123      	bne.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e067      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d041      	beq.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7fe fa62 	bl	8000f74 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d136      	bne.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10c      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e00b      	b.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d016      	beq.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e021      	b.n	8002b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	43da      	mvns	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf14      	ite	ne
 8002b4c:	2301      	movne	r3, #1
 8002b4e:	2300      	moveq	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e00b      	b.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	bf14      	ite	ne
 8002b66:	2301      	movne	r3, #1
 8002b68:	2300      	moveq	r3, #0
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af6d 	bne.w	8002a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b88:	e034      	b.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f886 	bl	8002c9c <I2C_IsAcknowledgeFailed>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e034      	b.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d028      	beq.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba2:	f7fe f9e7 	bl	8000f74 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d302      	bcc.n	8002bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d11d      	bne.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc2:	2b80      	cmp	r3, #128	@ 0x80
 8002bc4:	d016      	beq.n	8002bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b80      	cmp	r3, #128	@ 0x80
 8002c00:	d1c3      	bne.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c18:	e034      	b.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f83e 	bl	8002c9c <I2C_IsAcknowledgeFailed>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e034      	b.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d028      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7fe f99f 	bl	8000f74 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d11d      	bne.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d016      	beq.n	8002c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e007      	b.n	8002c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d1c3      	bne.n	8002c1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb2:	d11b      	bne.n	8002cec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f043 0204 	orr.w	r2, r3, #4
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e267      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d1a:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b7e      	ldr	r3, [pc, #504]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e242      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a75      	ldr	r2, [pc, #468]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b70      	ldr	r3, [pc, #448]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b6d      	ldr	r3, [pc, #436]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b69      	ldr	r3, [pc, #420]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a68      	ldr	r2, [pc, #416]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b66      	ldr	r3, [pc, #408]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a65      	ldr	r2, [pc, #404]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe f8de 	bl	8000f74 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f8da 	bl	8000f74 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	@ 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e207      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b5b      	ldr	r3, [pc, #364]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f8ca 	bl	8000f74 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe f8c6 	bl	8000f74 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	@ 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1f3      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b51      	ldr	r3, [pc, #324]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e12:	4b4a      	ldr	r3, [pc, #296]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1c7      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4937      	ldr	r1, [pc, #220]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe f87f 	bl	8000f74 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f87b 	bl	8000f74 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e1a8      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4925      	ldr	r1, [pc, #148]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b24      	ldr	r3, [pc, #144]	@ (8002f40 <HAL_RCC_OscConfig+0x244>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f85e 	bl	8000f74 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe f85a 	bl	8000f74 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e187      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe f83e 	bl	8000f74 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe f83a 	bl	8000f74 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e167      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <HAL_RCC_OscConfig+0x240>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e01b      	b.n	8002f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <HAL_RCC_OscConfig+0x248>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe f827 	bl	8000f74 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e00e      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe f823 	bl	8000f74 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d907      	bls.n	8002f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e150      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470000 	.word	0x42470000
 8002f44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	4b88      	ldr	r3, [pc, #544]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ea      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8097 	beq.w	8003090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f66:	4b81      	ldr	r3, [pc, #516]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b7d      	ldr	r3, [pc, #500]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b7a      	ldr	r3, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b77      	ldr	r3, [pc, #476]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d118      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9e:	4b74      	ldr	r3, [pc, #464]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a73      	ldr	r2, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002faa:	f7fd ffe3 	bl	8000f74 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb2:	f7fd ffdf 	bl	8000f74 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e10c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003170 <HAL_RCC_OscConfig+0x474>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x2ea>
 8002fd8:	4b64      	ldr	r3, [pc, #400]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	4a63      	ldr	r2, [pc, #396]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002fde:	f043 0301 	orr.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fe4:	e01c      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d10c      	bne.n	8003008 <HAL_RCC_OscConfig+0x30c>
 8002fee:	4b5f      	ldr	r3, [pc, #380]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0304 	orr.w	r3, r3, #4
 8002ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6713      	str	r3, [r2, #112]	@ 0x70
 8003006:	e00b      	b.n	8003020 <HAL_RCC_OscConfig+0x324>
 8003008:	4b58      	ldr	r3, [pc, #352]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a57      	ldr	r2, [pc, #348]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	4b55      	ldr	r3, [pc, #340]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003018:	4a54      	ldr	r2, [pc, #336]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fd ffa4 	bl	8000f74 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fd ffa0 	bl	8000f74 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0cb      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003052:	e014      	b.n	800307e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003054:	f7fd ff8e 	bl	8000f74 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd ff8a 	bl	8000f74 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e0b5      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1ee      	bne.n	800305c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003084:	4b39      	ldr	r3, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4a38      	ldr	r2, [pc, #224]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800309a:	4b34      	ldr	r3, [pc, #208]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d05c      	beq.n	8003160 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d141      	bne.n	8003132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b31      	ldr	r3, [pc, #196]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fd ff5e 	bl	8000f74 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd ff5a 	bl	8000f74 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e087      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b27      	ldr	r3, [pc, #156]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	3b01      	subs	r3, #1
 80030f4:	041b      	lsls	r3, r3, #16
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	061b      	lsls	r3, r3, #24
 80030fe:	491b      	ldr	r1, [pc, #108]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003104:	4b1b      	ldr	r3, [pc, #108]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7fd ff33 	bl	8000f74 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003112:	f7fd ff2f 	bl	8000f74 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e05c      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x416>
 8003130:	e054      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <HAL_RCC_OscConfig+0x478>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7fd ff1c 	bl	8000f74 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fd ff18 	bl	8000f74 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e045      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_RCC_OscConfig+0x470>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
 800315e:	e03d      	b.n	80031dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e038      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
 800316c:	40023800 	.word	0x40023800
 8003170:	40007000 	.word	0x40007000
 8003174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x4ec>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d028      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d121      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d11a      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031a8:	4013      	ands	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d111      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d001      	beq.n	80031dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800

080031ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0cc      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b68      	ldr	r3, [pc, #416]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d90c      	bls.n	8003228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b65      	ldr	r3, [pc, #404]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4a58      	ldr	r2, [pc, #352]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800324a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a52      	ldr	r2, [pc, #328]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d044      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d119      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b3f      	ldr	r3, [pc, #252]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e06f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3b      	ldr	r3, [pc, #236]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e067      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b37      	ldr	r3, [pc, #220]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd fe4a 	bl	8000f74 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fd fe46 	bl	8000f74 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e04f      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d20c      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b22      	ldr	r3, [pc, #136]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4602      	mov	r2, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	490a      	ldr	r1, [pc, #40]	@ (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	5ccb      	ldrb	r3, [r1, r3]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fd fdaa 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023c00 	.word	0x40023c00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	08006ffc 	.word	0x08006ffc
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b094      	sub	sp, #80	@ 0x50
 80033be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d0:	4b79      	ldr	r3, [pc, #484]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d00d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033dc:	2b08      	cmp	r3, #8
 80033de:	f200 80e1 	bhi.w	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x34>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ea:	e0db      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b73      	ldr	r3, [pc, #460]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f0:	e0db      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033f2:	4b73      	ldr	r3, [pc, #460]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80033f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033f6:	e0d8      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f8:	4b6f      	ldr	r3, [pc, #444]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003402:	4b6d      	ldr	r3, [pc, #436]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340e:	4b6a      	ldr	r3, [pc, #424]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	2200      	movs	r2, #0
 8003416:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003418:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800341a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	633b      	str	r3, [r7, #48]	@ 0x30
 8003422:	2300      	movs	r3, #0
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
 8003426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	f04f 0000 	mov.w	r0, #0
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	0159      	lsls	r1, r3, #5
 8003438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800343c:	0150      	lsls	r0, r2, #5
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4621      	mov	r1, r4
 8003444:	1a51      	subs	r1, r2, r1
 8003446:	6139      	str	r1, [r7, #16]
 8003448:	4629      	mov	r1, r5
 800344a:	eb63 0301 	sbc.w	r3, r3, r1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800345c:	4659      	mov	r1, fp
 800345e:	018b      	lsls	r3, r1, #6
 8003460:	4651      	mov	r1, sl
 8003462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003466:	4651      	mov	r1, sl
 8003468:	018a      	lsls	r2, r1, #6
 800346a:	4651      	mov	r1, sl
 800346c:	ebb2 0801 	subs.w	r8, r2, r1
 8003470:	4659      	mov	r1, fp
 8003472:	eb63 0901 	sbc.w	r9, r3, r1
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800348a:	4690      	mov	r8, r2
 800348c:	4699      	mov	r9, r3
 800348e:	4623      	mov	r3, r4
 8003490:	eb18 0303 	adds.w	r3, r8, r3
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	462b      	mov	r3, r5
 8003498:	eb49 0303 	adc.w	r3, r9, r3
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034aa:	4629      	mov	r1, r5
 80034ac:	024b      	lsls	r3, r1, #9
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034b4:	4621      	mov	r1, r4
 80034b6:	024a      	lsls	r2, r1, #9
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034be:	2200      	movs	r2, #0
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034c8:	f7fc feda 	bl	8000280 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4613      	mov	r3, r2
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d4:	e058      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b38      	ldr	r3, [pc, #224]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	4611      	mov	r1, r2
 80034e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	2300      	movs	r3, #0
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034f0:	4642      	mov	r2, r8
 80034f2:	464b      	mov	r3, r9
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003502:	0150      	lsls	r0, r2, #5
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4641      	mov	r1, r8
 800350a:	ebb2 0a01 	subs.w	sl, r2, r1
 800350e:	4649      	mov	r1, r9
 8003510:	eb63 0b01 	sbc.w	fp, r3, r1
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003528:	ebb2 040a 	subs.w	r4, r2, sl
 800352c:	eb63 050b 	sbc.w	r5, r3, fp
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	00eb      	lsls	r3, r5, #3
 800353a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800353e:	00e2      	lsls	r2, r4, #3
 8003540:	4614      	mov	r4, r2
 8003542:	461d      	mov	r5, r3
 8003544:	4643      	mov	r3, r8
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	464b      	mov	r3, r9
 800354c:	eb45 0303 	adc.w	r3, r5, r3
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800355e:	4629      	mov	r1, r5
 8003560:	028b      	lsls	r3, r1, #10
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003568:	4621      	mov	r1, r4
 800356a:	028a      	lsls	r2, r1, #10
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	61fa      	str	r2, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	f7fc fe80 	bl	8000280 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	0c1b      	lsrs	r3, r3, #16
 800358e:	f003 0303 	and.w	r3, r3, #3
 8003592:	3301      	adds	r3, #1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800359a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800359c:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3750      	adds	r7, #80	@ 0x50
 80035b0:	46bd      	mov	sp, r7
 80035b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	007a1200 	.word	0x007a1200

080035c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035c8:	4b03      	ldr	r3, [pc, #12]	@ (80035d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000000 	.word	0x20000000

080035dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e0:	f7ff fff0 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	0a9b      	lsrs	r3, r3, #10
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	4903      	ldr	r1, [pc, #12]	@ (8003600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800700c 	.word	0x0800700c

08003604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003608:	f7ff ffdc 	bl	80035c4 <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0b5b      	lsrs	r3, r3, #13
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	0800700c 	.word	0x0800700c

0800362c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e042      	b.n	80036c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fb32 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800366e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f973 	bl	800395c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	@ 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d175      	bne.n	80037d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_UART_Transmit+0x2c>
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e06e      	b.n	80037da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2221      	movs	r2, #33	@ 0x21
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800370a:	f7fd fc33 	bl	8000f74 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	88fa      	ldrh	r2, [r7, #6]
 800371a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003724:	d108      	bne.n	8003738 <HAL_UART_Transmit+0x6c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e003      	b.n	8003740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003740:	e02e      	b.n	80037a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	@ 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f848 	bl	80037e2 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e03a      	b.n	80037da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	3302      	adds	r3, #2
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e007      	b.n	8003792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	781a      	ldrb	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	3301      	adds	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1cb      	bne.n	8003742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2140      	movs	r1, #64	@ 0x40
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f814 	bl	80037e2 <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e006      	b.n	80037da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f2:	e03b      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d037      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fc:	f7fd fbba 	bl	8000f74 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	6a3a      	ldr	r2, [r7, #32]
 8003808:	429a      	cmp	r2, r3
 800380a:	d302      	bcc.n	8003812 <UART_WaitOnFlagUntilTimeout+0x30>
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e03a      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d023      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b80      	cmp	r3, #128	@ 0x80
 8003828:	d020      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d01d      	beq.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	2b08      	cmp	r3, #8
 800383c:	d116      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f81d 	bl	8003894 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2208      	movs	r2, #8
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e00f      	b.n	800388c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	429a      	cmp	r2, r3
 8003888:	d0b4      	beq.n	80037f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003894:	b480      	push	{r7}
 8003896:	b095      	sub	sp, #84	@ 0x54
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	61fb      	str	r3, [r7, #28]
   return(result);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	2b01      	cmp	r3, #1
 800390a:	d119      	bne.n	8003940 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	60bb      	str	r3, [r7, #8]
   return(result);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0310 	bic.w	r3, r3, #16
 8003922:	647b      	str	r3, [r7, #68]	@ 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392c:	61ba      	str	r2, [r7, #24]
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	613b      	str	r3, [r7, #16]
   return(result);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800394e:	bf00      	nop
 8003950:	3754      	adds	r7, #84	@ 0x54
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b0c0      	sub	sp, #256	@ 0x100
 8003962:	af00      	add	r7, sp, #0
 8003964:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	ea40 0301 	orr.w	r3, r0, r1
 8003984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	431a      	orrs	r2, r3
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039b4:	f021 010c 	bic.w	r1, r1, #12
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039c2:	430b      	orrs	r3, r1
 80039c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	6999      	ldr	r1, [r3, #24]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	ea40 0301 	orr.w	r3, r0, r1
 80039e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b8f      	ldr	r3, [pc, #572]	@ (8003c28 <UART_SetConfig+0x2cc>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <UART_SetConfig+0xa0>
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c2c <UART_SetConfig+0x2d0>)
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d104      	bne.n	8003a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7ff fe02 	bl	8003604 <HAL_RCC_GetPCLK2Freq>
 8003a00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a04:	e003      	b.n	8003a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a06:	f7ff fde9 	bl	80035dc <HAL_RCC_GetPCLK1Freq>
 8003a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a18:	f040 810c 	bne.w	8003c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a2e:	4622      	mov	r2, r4
 8003a30:	462b      	mov	r3, r5
 8003a32:	1891      	adds	r1, r2, r2
 8003a34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a36:	415b      	adcs	r3, r3
 8003a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a3e:	4621      	mov	r1, r4
 8003a40:	eb12 0801 	adds.w	r8, r2, r1
 8003a44:	4629      	mov	r1, r5
 8003a46:	eb43 0901 	adc.w	r9, r3, r1
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a5e:	4690      	mov	r8, r2
 8003a60:	4699      	mov	r9, r3
 8003a62:	4623      	mov	r3, r4
 8003a64:	eb18 0303 	adds.w	r3, r8, r3
 8003a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	eb49 0303 	adc.w	r3, r9, r3
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	18db      	adds	r3, r3, r3
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a90:	4613      	mov	r3, r2
 8003a92:	eb42 0303 	adc.w	r3, r2, r3
 8003a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003aa0:	f7fc fbee 	bl	8000280 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b61      	ldr	r3, [pc, #388]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011c      	lsls	r4, r3, #4
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003acc:	415b      	adcs	r3, r3
 8003ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8003ada:	4649      	mov	r1, r9
 8003adc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af4:	4692      	mov	sl, r2
 8003af6:	469b      	mov	fp, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	eb1a 0303 	adds.w	r3, sl, r3
 8003afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b02:	464b      	mov	r3, r9
 8003b04:	eb4b 0303 	adc.w	r3, fp, r3
 8003b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b20:	460b      	mov	r3, r1
 8003b22:	18db      	adds	r3, r3, r3
 8003b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b26:	4613      	mov	r3, r2
 8003b28:	eb42 0303 	adc.w	r3, r2, r3
 8003b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b36:	f7fc fba3 	bl	8000280 <__aeabi_uldivmod>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4b3b      	ldr	r3, [pc, #236]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003b42:	fba3 2301 	umull	r2, r3, r3, r1
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2264      	movs	r2, #100	@ 0x64
 8003b4a:	fb02 f303 	mul.w	r3, r2, r3
 8003b4e:	1acb      	subs	r3, r1, r3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b56:	4b36      	ldr	r3, [pc, #216]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003b58:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b64:	441c      	add	r4, r3
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b80:	415b      	adcs	r3, r3
 8003b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bdc:	460b      	mov	r3, r1
 8003bde:	18db      	adds	r3, r3, r3
 8003be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003be2:	4613      	mov	r3, r2
 8003be4:	eb42 0303 	adc.w	r3, r2, r3
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bf2:	f7fc fb45 	bl	8000280 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	2164      	movs	r1, #100	@ 0x64
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	3332      	adds	r3, #50	@ 0x32
 8003c0e:	4a08      	ldr	r2, [pc, #32]	@ (8003c30 <UART_SetConfig+0x2d4>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	f003 0207 	and.w	r2, r3, #7
 8003c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4422      	add	r2, r4
 8003c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c24:	e106      	b.n	8003e34 <UART_SetConfig+0x4d8>
 8003c26:	bf00      	nop
 8003c28:	40011000 	.word	0x40011000
 8003c2c:	40011400 	.word	0x40011400
 8003c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c46:	4642      	mov	r2, r8
 8003c48:	464b      	mov	r3, r9
 8003c4a:	1891      	adds	r1, r2, r2
 8003c4c:	6239      	str	r1, [r7, #32]
 8003c4e:	415b      	adcs	r3, r3
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c56:	4641      	mov	r1, r8
 8003c58:	1854      	adds	r4, r2, r1
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	eb43 0501 	adc.w	r5, r3, r1
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	00eb      	lsls	r3, r5, #3
 8003c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c6e:	00e2      	lsls	r2, r4, #3
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	18e3      	adds	r3, r4, r3
 8003c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	eb45 0303 	adc.w	r3, r5, r3
 8003c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cac:	4621      	mov	r1, r4
 8003cae:	008a      	lsls	r2, r1, #2
 8003cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cb4:	f7fc fae4 	bl	8000280 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	61b9      	str	r1, [r7, #24]
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ce8:	4641      	mov	r1, r8
 8003cea:	1851      	adds	r1, r2, r1
 8003cec:	6139      	str	r1, [r7, #16]
 8003cee:	4649      	mov	r1, r9
 8003cf0:	414b      	adcs	r3, r1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d00:	4659      	mov	r1, fp
 8003d02:	00cb      	lsls	r3, r1, #3
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	00ca      	lsls	r2, r1, #3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	4603      	mov	r3, r0
 8003d14:	4642      	mov	r2, r8
 8003d16:	189b      	adds	r3, r3, r2
 8003d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d1c:	464b      	mov	r3, r9
 8003d1e:	460a      	mov	r2, r1
 8003d20:	eb42 0303 	adc.w	r3, r2, r3
 8003d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d40:	4649      	mov	r1, r9
 8003d42:	008b      	lsls	r3, r1, #2
 8003d44:	4641      	mov	r1, r8
 8003d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	008a      	lsls	r2, r1, #2
 8003d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d52:	f7fc fa95 	bl	8000280 <__aeabi_uldivmod>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	2264      	movs	r2, #100	@ 0x64
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	1acb      	subs	r3, r1, r3
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	3332      	adds	r3, #50	@ 0x32
 8003d70:	4a33      	ldr	r2, [pc, #204]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	441c      	add	r4, r3
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	415b      	adcs	r3, r3
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	1851      	adds	r1, r2, r1
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	4649      	mov	r1, r9
 8003da4:	414b      	adcs	r3, r1
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db4:	4659      	mov	r1, fp
 8003db6:	00cb      	lsls	r3, r1, #3
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dce:	464b      	mov	r3, r9
 8003dd0:	460a      	mov	r2, r1
 8003dd2:	eb42 0303 	adc.w	r3, r2, r3
 8003dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003de2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003df0:	4649      	mov	r1, r9
 8003df2:	008b      	lsls	r3, r1, #2
 8003df4:	4641      	mov	r1, r8
 8003df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	008a      	lsls	r2, r1, #2
 8003dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e02:	f7fc fa3d 	bl	8000280 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	2164      	movs	r1, #100	@ 0x64
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	3332      	adds	r3, #50	@ 0x32
 8003e1e:	4a08      	ldr	r2, [pc, #32]	@ (8003e40 <UART_SetConfig+0x4e4>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	f003 020f 	and.w	r2, r3, #15
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4422      	add	r2, r4
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e40:	51eb851f 	.word	0x51eb851f

08003e44 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e56:	2b84      	cmp	r3, #132	@ 0x84
 8003e58:	d005      	beq.n	8003e66 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	3303      	adds	r3, #3
 8003e64:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e7a:	f3ef 8305 	mrs	r3, IPSR
 8003e7e:	607b      	str	r3, [r7, #4]
  return(result);
 8003e80:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e9c:	f001 f92a 	bl	80050f4 <vTaskStartScheduler>
  
  return osOK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea8:	b089      	sub	sp, #36	@ 0x24
 8003eaa:	af04      	add	r7, sp, #16
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <osThreadCreate+0x54>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01c      	beq.n	8003efa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685c      	ldr	r4, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691e      	ldr	r6, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ffb6 	bl	8003e44 <makeFreeRtosPriority>
 8003ed8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee2:	9202      	str	r2, [sp, #8]
 8003ee4:	9301      	str	r3, [sp, #4]
 8003ee6:	9100      	str	r1, [sp, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	4632      	mov	r2, r6
 8003eec:	4629      	mov	r1, r5
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f000 ff32 	bl	8004d58 <xTaskCreateStatic>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e01c      	b.n	8003f34 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685c      	ldr	r4, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f06:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff98 	bl	8003e44 <makeFreeRtosPriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	4632      	mov	r2, r6
 8003f22:	4629      	mov	r1, r5
 8003f24:	4620      	mov	r0, r4
 8003f26:	f000 ff77 	bl	8004e18 <xTaskCreate>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d001      	beq.n	8003f34 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f34:	68fb      	ldr	r3, [r7, #12]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <osDelay+0x16>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e000      	b.n	8003f56 <osDelay+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 f896 	bl	8005088 <vTaskDelay>
  
  return osOK;
 8003f5c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00f      	beq.n	8003f98 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10a      	bne.n	8003f94 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2203      	movs	r2, #3
 8003f84:	9200      	str	r2, [sp, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2100      	movs	r1, #0
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f000 f9c0 	bl	8004310 <xQueueGenericCreateStatic>
 8003f90:	4603      	mov	r3, r0
 8003f92:	e016      	b.n	8003fc2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e014      	b.n	8003fc2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d110      	bne.n	8003fc0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f000 fa31 	bl	800440a <xQueueGenericCreate>
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <osSemaphoreCreate+0x56>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa82 	bl	80044c0 <xQueueGenericSend>
      return sema;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	e000      	b.n	8003fc2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003fc0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	e03a      	b.n	800405a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d103      	bne.n	8003ff8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e009      	b.n	800400c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <osSemaphoreWait+0x40>
      ticks = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800400c:	f7ff ff32 	bl	8003e74 <inHandlerMode>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d017      	beq.n	8004046 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	461a      	mov	r2, r3
 800401c:	2100      	movs	r1, #0
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fcf0 	bl	8004a04 <xQueueReceiveFromISR>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <osSemaphoreWait+0x62>
      return osErrorOS;
 800402a:	23ff      	movs	r3, #255	@ 0xff
 800402c:	e015      	b.n	800405a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d011      	beq.n	8004058 <osSemaphoreWait+0x8c>
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <osSemaphoreWait+0x98>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	e008      	b.n	8004058 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fbcb 	bl	80047e4 <xQueueSemaphoreTake>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004054:	23ff      	movs	r3, #255	@ 0xff
 8004056:	e000      	b.n	800405a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	e000ed04 	.word	0xe000ed04

08004068 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004078:	f7ff fefc 	bl	8003e74 <inHandlerMode>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004082:	f107 0308 	add.w	r3, r7, #8
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb1b 	bl	80046c4 <xQueueGiveFromISR>
 800408e:	4603      	mov	r3, r0
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004094:	23ff      	movs	r3, #255	@ 0xff
 8004096:	e017      	b.n	80040c8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d013      	beq.n	80040c6 <osSemaphoreRelease+0x5e>
 800409e:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <osSemaphoreRelease+0x68>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	e00a      	b.n	80040c6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80040b0:	2300      	movs	r3, #0
 80040b2:	2200      	movs	r2, #0
 80040b4:	2100      	movs	r1, #0
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa02 	bl	80044c0 <xQueueGenericSend>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80040c2:	23ff      	movs	r3, #255	@ 0xff
 80040c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80040c6:	68fb      	ldr	r3, [r7, #12]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0208 	add.w	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f103 0208 	add.w	r2, r3, #8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f103 0208 	add.w	r2, r3, #8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d103      	bne.n	8004196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e00c      	b.n	80041b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3308      	adds	r3, #8
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	e002      	b.n	80041a4 <vListInsert+0x2e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d2f6      	bcs.n	800419e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	601a      	str	r2, [r3, #0]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6892      	ldr	r2, [r2, #8]
 80041fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6852      	ldr	r2, [r2, #4]
 8004208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	429a      	cmp	r2, r3
 8004212:	d103      	bne.n	800421c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004268:	f001 fea6 	bl	8005fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004298:	3b01      	subs	r3, #1
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	441a      	add	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	22ff      	movs	r2, #255	@ 0xff
 80042ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	22ff      	movs	r2, #255	@ 0xff
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d114      	bne.n	80042e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01a      	beq.n	80042fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3310      	adds	r3, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 f95c 	bl	8005588 <xTaskRemoveFromEventList>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042d6:	4b0d      	ldr	r3, [pc, #52]	@ (800430c <xQueueGenericReset+0xd0>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e009      	b.n	80042fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3310      	adds	r3, #16
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fef1 	bl	80040d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3324      	adds	r3, #36	@ 0x24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff feec 	bl	80040d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042fc:	f001 fe8e 	bl	800601c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	@ 0x38
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10b      	bne.n	800435a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	e7fd      	b.n	8004356 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <xQueueGenericCreateStatic+0x56>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <xQueueGenericCreateStatic+0x5a>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <xQueueGenericCreateStatic+0x5c>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	623b      	str	r3, [r7, #32]
}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	e7fd      	b.n	8004384 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <xQueueGenericCreateStatic+0x84>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <xQueueGenericCreateStatic+0x88>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <xQueueGenericCreateStatic+0x8a>
 8004398:	2300      	movs	r3, #0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10b      	bne.n	80043b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800439e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a2:	f383 8811 	msr	BASEPRI, r3
 80043a6:	f3bf 8f6f 	isb	sy
 80043aa:	f3bf 8f4f 	dsb	sy
 80043ae:	61fb      	str	r3, [r7, #28]
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	e7fd      	b.n	80043b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043b6:	2348      	movs	r3, #72	@ 0x48
 80043b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b48      	cmp	r3, #72	@ 0x48
 80043be:	d00b      	beq.n	80043d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f840 	bl	8004480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3730      	adds	r7, #48	@ 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08a      	sub	sp, #40	@ 0x28
 800440e:	af02      	add	r7, sp, #8
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	4613      	mov	r3, r2
 8004416:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <xQueueGenericCreate+0x2c>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	613b      	str	r3, [r7, #16]
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	e7fd      	b.n	8004432 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	3348      	adds	r3, #72	@ 0x48
 8004444:	4618      	mov	r0, r3
 8004446:	f001 fed9 	bl	80061fc <pvPortMalloc>
 800444a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d011      	beq.n	8004476 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3348      	adds	r3, #72	@ 0x48
 800445a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004464:	79fa      	ldrb	r2, [r7, #7]
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f805 	bl	8004480 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004476:	69bb      	ldr	r3, [r7, #24]
	}
 8004478:	4618      	mov	r0, r3
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e002      	b.n	80044a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044ae:	2101      	movs	r1, #1
 80044b0:	69b8      	ldr	r0, [r7, #24]
 80044b2:	f7ff fec3 	bl	800423c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08e      	sub	sp, #56	@ 0x38
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044ce:	2300      	movs	r3, #0
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10b      	bne.n	80044f4 <xQueueGenericSend+0x34>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d103      	bne.n	8004502 <xQueueGenericSend+0x42>
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <xQueueGenericSend+0x46>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <xQueueGenericSend+0x48>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <xQueueGenericSend+0x64>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d103      	bne.n	8004532 <xQueueGenericSend+0x72>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800452e:	2b01      	cmp	r3, #1
 8004530:	d101      	bne.n	8004536 <xQueueGenericSend+0x76>
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <xQueueGenericSend+0x78>
 8004536:	2300      	movs	r3, #0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <xQueueGenericSend+0x94>
	__asm volatile
 800453c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	623b      	str	r3, [r7, #32]
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004554:	f001 f9d8 	bl	8005908 <xTaskGetSchedulerState>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <xQueueGenericSend+0xa4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <xQueueGenericSend+0xa8>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <xQueueGenericSend+0xaa>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <xQueueGenericSend+0xc6>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61fb      	str	r3, [r7, #28]
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004586:	f001 fd17 	bl	8005fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800458e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <xQueueGenericSend+0xdc>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d129      	bne.n	80045f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a2:	f000 fac9 	bl	8004b38 <prvCopyDataToQueue>
 80045a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d010      	beq.n	80045d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	3324      	adds	r3, #36	@ 0x24
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 ffe7 	bl	8005588 <xTaskRemoveFromEventList>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d013      	beq.n	80045e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045c0:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <xQueueGenericSend+0x200>)
 80045c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	e00a      	b.n	80045e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d007      	beq.n	80045e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045d8:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <xQueueGenericSend+0x200>)
 80045da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045e8:	f001 fd18 	bl	800601c <vPortExitCritical>
				return pdPASS;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e063      	b.n	80046b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045f6:	f001 fd11 	bl	800601c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	e05c      	b.n	80046b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4618      	mov	r0, r3
 800460a:	f001 f821 	bl	8005650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800460e:	2301      	movs	r3, #1
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004612:	f001 fd03 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004616:	f000 fdcf 	bl	80051b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800461a:	f001 fccd 	bl	8005fb8 <vPortEnterCritical>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004624:	b25b      	sxtb	r3, r3
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d103      	bne.n	8004634 <xQueueGenericSend+0x174>
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800463a:	b25b      	sxtb	r3, r3
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d103      	bne.n	800464a <xQueueGenericSend+0x18a>
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800464a:	f001 fce7 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800464e:	1d3a      	adds	r2, r7, #4
 8004650:	f107 0314 	add.w	r3, r7, #20
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f001 f810 	bl	800567c <xTaskCheckForTimeOut>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d124      	bne.n	80046ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004664:	f000 fb60 	bl	8004d28 <prvIsQueueFull>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d018      	beq.n	80046a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3310      	adds	r3, #16
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ff60 	bl	800553c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800467c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800467e:	f000 faeb 	bl	8004c58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004682:	f000 fda7 	bl	80051d4 <xTaskResumeAll>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	f47f af7c 	bne.w	8004586 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800468e:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <xQueueGenericSend+0x200>)
 8004690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	e772      	b.n	8004586 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046a2:	f000 fad9 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a6:	f000 fd95 	bl	80051d4 <xTaskResumeAll>
 80046aa:	e76c      	b.n	8004586 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ae:	f000 fad3 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046b2:	f000 fd8f 	bl	80051d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3738      	adds	r7, #56	@ 0x38
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08e      	sub	sp, #56	@ 0x38
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61fb      	str	r3, [r7, #28]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <xQueueGiveFromISR+0x5c>
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <xQueueGiveFromISR+0x60>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <xQueueGiveFromISR+0x62>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	61bb      	str	r3, [r7, #24]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004742:	f001 fd19 	bl	8006178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004746:	f3ef 8211 	mrs	r2, BASEPRI
 800474a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	617a      	str	r2, [r7, #20]
 800475c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800475e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800476e:	429a      	cmp	r2, r3
 8004770:	d22b      	bcs.n	80047ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004782:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004784:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478c:	d112      	bne.n	80047b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	3324      	adds	r3, #36	@ 0x24
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fef4 	bl	8005588 <xTaskRemoveFromEventList>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e007      	b.n	80047c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047b8:	3301      	adds	r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	b25a      	sxtb	r2, r3
 80047be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c8:	e001      	b.n	80047ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	@ 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08e      	sub	sp, #56	@ 0x38
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	623b      	str	r3, [r7, #32]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61fb      	str	r3, [r7, #28]
}
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004838:	f001 f866 	bl	8005908 <xTaskGetSchedulerState>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <xQueueSemaphoreTake+0x64>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <xQueueSemaphoreTake+0x68>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <xQueueSemaphoreTake+0x6a>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	61bb      	str	r3, [r7, #24]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800486a:	f001 fba5 	bl	8005fb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800486e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d024      	beq.n	80048c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	1e5a      	subs	r2, r3, #1
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d104      	bne.n	8004894 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800488a:	f001 f9e9 	bl	8005c60 <pvTaskIncrementMutexHeldCount>
 800488e:	4602      	mov	r2, r0
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	3310      	adds	r3, #16
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fe71 	bl	8005588 <xTaskRemoveFromEventList>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048ac:	4b54      	ldr	r3, [pc, #336]	@ (8004a00 <xQueueSemaphoreTake+0x21c>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048bc:	f001 fbae 	bl	800601c <vPortExitCritical>
				return pdPASS;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e098      	b.n	80049f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d112      	bne.n	80048f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	617b      	str	r3, [r7, #20]
}
 80048e2:	bf00      	nop
 80048e4:	bf00      	nop
 80048e6:	e7fd      	b.n	80048e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048e8:	f001 fb98 	bl	800601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e082      	b.n	80049f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d106      	bne.n	8004904 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048f6:	f107 030c 	add.w	r3, r7, #12
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fea8 	bl	8005650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004904:	f001 fb8a 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004908:	f000 fc56 	bl	80051b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800490c:	f001 fb54 	bl	8005fb8 <vPortEnterCritical>
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004916:	b25b      	sxtb	r3, r3
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d103      	bne.n	8004926 <xQueueSemaphoreTake+0x142>
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800492c:	b25b      	sxtb	r3, r3
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d103      	bne.n	800493c <xQueueSemaphoreTake+0x158>
 8004934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800493c:	f001 fb6e 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004940:	463a      	mov	r2, r7
 8004942:	f107 030c 	add.w	r3, r7, #12
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fe97 	bl	800567c <xTaskCheckForTimeOut>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d132      	bne.n	80049ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004954:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004956:	f000 f9d1 	bl	8004cfc <prvIsQueueEmpty>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d026      	beq.n	80049ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004968:	f001 fb26 	bl	8005fb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800496c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 ffe7 	bl	8005944 <xTaskPriorityInherit>
 8004976:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004978:	f001 fb50 	bl	800601c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	3324      	adds	r3, #36	@ 0x24
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fdd9 	bl	800553c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800498a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800498c:	f000 f964 	bl	8004c58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004990:	f000 fc20 	bl	80051d4 <xTaskResumeAll>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	f47f af67 	bne.w	800486a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800499c:	4b18      	ldr	r3, [pc, #96]	@ (8004a00 <xQueueSemaphoreTake+0x21c>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	e75d      	b.n	800486a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049b0:	f000 f952 	bl	8004c58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049b4:	f000 fc0e 	bl	80051d4 <xTaskResumeAll>
 80049b8:	e757      	b.n	800486a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049bc:	f000 f94c 	bl	8004c58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049c0:	f000 fc08 	bl	80051d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049c6:	f000 f999 	bl	8004cfc <prvIsQueueEmpty>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f43f af4c 	beq.w	800486a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80049d8:	f001 faee 	bl	8005fb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049de:	f000 f893 	bl	8004b08 <prvGetDisinheritPriorityAfterTimeout>
 80049e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f8a8 	bl	8005b40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049f0:	f001 fb14 	bl	800601c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3738      	adds	r7, #56	@ 0x38
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	@ 0x38
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	623b      	str	r3, [r7, #32]
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <xQueueReceiveFromISR+0x3c>
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <xQueueReceiveFromISR+0x40>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <xQueueReceiveFromISR+0x42>
 8004a44:	2300      	movs	r3, #0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	61fb      	str	r3, [r7, #28]
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a62:	f001 fb89 	bl	8006178 <vPortValidateInterruptPriority>
	__asm volatile
 8004a66:	f3ef 8211 	mrs	r2, BASEPRI
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	61ba      	str	r2, [r7, #24]
 8004a7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02f      	beq.n	8004aee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9c:	f000 f8b6 	bl	8004c0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	1e5a      	subs	r2, r3, #1
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004aa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d112      	bne.n	8004ad8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abc:	3310      	adds	r3, #16
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 fd62 	bl	8005588 <xTaskRemoveFromEventList>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00e      	beq.n	8004ae8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e007      	b.n	8004ae8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	b25a      	sxtb	r2, r3
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aec:	e001      	b.n	8004af2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f383 8811 	msr	BASEPRI, r3
}
 8004afc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3738      	adds	r7, #56	@ 0x38
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e001      	b.n	8004b2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d14d      	bne.n	8004bfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff64 	bl	8005a30 <xTaskPriorityDisinherit>
 8004b68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	e043      	b.n	8004bfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d119      	bne.n	8004bac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6858      	ldr	r0, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b80:	461a      	mov	r2, r3
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	f001 fd90 	bl	80066a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d32b      	bcc.n	8004bfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e026      	b.n	8004bfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68d8      	ldr	r0, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	f001 fd76 	bl	80066a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	441a      	add	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d207      	bcs.n	8004be8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be0:	425b      	negs	r3, r3
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d105      	bne.n	8004bfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	441a      	add	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d303      	bcc.n	8004c40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68d9      	ldr	r1, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6838      	ldr	r0, [r7, #0]
 8004c4c:	f001 fd2c 	bl	80066a8 <memcpy>
	}
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c60:	f001 f9aa 	bl	8005fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c6c:	e011      	b.n	8004c92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d012      	beq.n	8004c9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	@ 0x24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc84 	bl	8005588 <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c86:	f000 fd5d 	bl	8005744 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	dce9      	bgt.n	8004c6e <prvUnlockQueue+0x16>
 8004c9a:	e000      	b.n	8004c9e <prvUnlockQueue+0x46>
					break;
 8004c9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	22ff      	movs	r2, #255	@ 0xff
 8004ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004ca6:	f001 f9b9 	bl	800601c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004caa:	f001 f985 	bl	8005fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cb6:	e011      	b.n	8004cdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fc5f 	bl	8005588 <xTaskRemoveFromEventList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cd0:	f000 fd38 	bl	8005744 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cd4:	7bbb      	ldrb	r3, [r7, #14]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	dce9      	bgt.n	8004cb8 <prvUnlockQueue+0x60>
 8004ce4:	e000      	b.n	8004ce8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ce6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	22ff      	movs	r2, #255	@ 0xff
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cf0:	f001 f994 	bl	800601c <vPortExitCritical>
}
 8004cf4:	bf00      	nop
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d04:	f001 f958 	bl	8005fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e001      	b.n	8004d1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d1a:	f001 f97f 	bl	800601c <vPortExitCritical>

	return xReturn;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d30:	f001 f942 	bl	8005fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d102      	bne.n	8004d46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	e001      	b.n	8004d4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d4a:	f001 f967 	bl	800601c <vPortExitCritical>

	return xReturn;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08e      	sub	sp, #56	@ 0x38
 8004d5c:	af04      	add	r7, sp, #16
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10b      	bne.n	8004d84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	623b      	str	r3, [r7, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	61fb      	str	r3, [r7, #28]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004da2:	2354      	movs	r3, #84	@ 0x54
 8004da4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b54      	cmp	r3, #84	@ 0x54
 8004daa:	d00b      	beq.n	8004dc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61bb      	str	r3, [r7, #24]
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004dc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01e      	beq.n	8004e0a <xTaskCreateStatic+0xb2>
 8004dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004de4:	2300      	movs	r3, #0
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	9302      	str	r3, [sp, #8]
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f850 	bl	8004ea2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e04:	f000 f8d6 	bl	8004fb4 <prvAddNewTaskToReadyList>
 8004e08:	e001      	b.n	8004e0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e0e:	697b      	ldr	r3, [r7, #20]
	}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3728      	adds	r7, #40	@ 0x28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	@ 0x30
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e28:	88fb      	ldrh	r3, [r7, #6]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 f9e5 	bl	80061fc <pvPortMalloc>
 8004e32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e3a:	2054      	movs	r0, #84	@ 0x54
 8004e3c:	f001 f9de 	bl	80061fc <pvPortMalloc>
 8004e40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e4e:	e005      	b.n	8004e5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e50:	6978      	ldr	r0, [r7, #20]
 8004e52:	f001 faa1 	bl	8006398 <vPortFree>
 8004e56:	e001      	b.n	8004e5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d017      	beq.n	8004e92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9303      	str	r3, [sp, #12]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f80e 	bl	8004ea2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e86:	69f8      	ldr	r0, [r7, #28]
 8004e88:	f000 f894 	bl	8004fb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e002      	b.n	8004e98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e98:	69bb      	ldr	r3, [r7, #24]
	}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3720      	adds	r7, #32
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b088      	sub	sp, #32
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f023 0307 	bic.w	r3, r3, #7
 8004ec8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	617b      	str	r3, [r7, #20]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01f      	beq.n	8004f32 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	e012      	b.n	8004f1e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4413      	add	r3, r2
 8004efe:	7819      	ldrb	r1, [r3, #0]
 8004f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	3334      	adds	r3, #52	@ 0x34
 8004f08:	460a      	mov	r2, r1
 8004f0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	2b0f      	cmp	r3, #15
 8004f22:	d9e9      	bls.n	8004ef8 <prvInitialiseNewTask+0x56>
 8004f24:	e000      	b.n	8004f28 <prvInitialiseNewTask+0x86>
			{
				break;
 8004f26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f30:	e003      	b.n	8004f3a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d901      	bls.n	8004f44 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f40:	2306      	movs	r3, #6
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	2200      	movs	r2, #0
 8004f54:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff f8da 	bl	8004114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	3318      	adds	r3, #24
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff f8d5 	bl	8004114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	f1c3 0207 	rsb	r2, r3, #7
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68f9      	ldr	r1, [r7, #12]
 8004f92:	69b8      	ldr	r0, [r7, #24]
 8004f94:	f000 fede 	bl	8005d54 <pxPortInitialiseStack>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004faa:	bf00      	nop
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fbc:	f000 fffc 	bl	8005fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800506c <prvAddNewTaskToReadyList+0xb8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	4a29      	ldr	r2, [pc, #164]	@ (800506c <prvAddNewTaskToReadyList+0xb8>)
 8004fc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fca:	4b29      	ldr	r3, [pc, #164]	@ (8005070 <prvAddNewTaskToReadyList+0xbc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fd2:	4a27      	ldr	r2, [pc, #156]	@ (8005070 <prvAddNewTaskToReadyList+0xbc>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fd8:	4b24      	ldr	r3, [pc, #144]	@ (800506c <prvAddNewTaskToReadyList+0xb8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d110      	bne.n	8005002 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fe0:	f000 fbd4 	bl	800578c <prvInitialiseTaskLists>
 8004fe4:	e00d      	b.n	8005002 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fe6:	4b23      	ldr	r3, [pc, #140]	@ (8005074 <prvAddNewTaskToReadyList+0xc0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d109      	bne.n	8005002 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <prvAddNewTaskToReadyList+0xbc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d802      	bhi.n	8005002 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <prvAddNewTaskToReadyList+0xbc>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005002:	4b1d      	ldr	r3, [pc, #116]	@ (8005078 <prvAddNewTaskToReadyList+0xc4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3301      	adds	r3, #1
 8005008:	4a1b      	ldr	r2, [pc, #108]	@ (8005078 <prvAddNewTaskToReadyList+0xc4>)
 800500a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	4b19      	ldr	r3, [pc, #100]	@ (800507c <prvAddNewTaskToReadyList+0xc8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	4a18      	ldr	r2, [pc, #96]	@ (800507c <prvAddNewTaskToReadyList+0xc8>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <prvAddNewTaskToReadyList+0xcc>)
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7ff f87a 	bl	800412e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800503a:	f000 ffef 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800503e:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <prvAddNewTaskToReadyList+0xc0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00e      	beq.n	8005064 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005046:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <prvAddNewTaskToReadyList+0xbc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d207      	bcs.n	8005064 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <prvAddNewTaskToReadyList+0xd0>)
 8005056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	2000055c 	.word	0x2000055c
 8005070:	2000045c 	.word	0x2000045c
 8005074:	20000568 	.word	0x20000568
 8005078:	20000578 	.word	0x20000578
 800507c:	20000564 	.word	0x20000564
 8005080:	20000460 	.word	0x20000460
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800509a:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <vTaskDelay+0x64>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <vTaskDelay+0x32>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050ba:	f000 f87d 	bl	80051b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050be:	2100      	movs	r1, #0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fde1 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c6:	f000 f885 	bl	80051d4 <xTaskResumeAll>
 80050ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050d2:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <vTaskDelay+0x68>)
 80050d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000584 	.word	0x20000584
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005102:	463a      	mov	r2, r7
 8005104:	1d39      	adds	r1, r7, #4
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb fa30 	bl	8000570 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005110:	6839      	ldr	r1, [r7, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	9202      	str	r2, [sp, #8]
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	2300      	movs	r3, #0
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2300      	movs	r3, #0
 8005120:	460a      	mov	r2, r1
 8005122:	491f      	ldr	r1, [pc, #124]	@ (80051a0 <vTaskStartScheduler+0xac>)
 8005124:	481f      	ldr	r0, [pc, #124]	@ (80051a4 <vTaskStartScheduler+0xb0>)
 8005126:	f7ff fe17 	bl	8004d58 <xTaskCreateStatic>
 800512a:	4603      	mov	r3, r0
 800512c:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <vTaskStartScheduler+0xb4>)
 800512e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005130:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <vTaskStartScheduler+0xb4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e001      	b.n	8005142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d116      	bne.n	8005176 <vTaskStartScheduler+0x82>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	613b      	str	r3, [r7, #16]
}
 800515a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800515c:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <vTaskStartScheduler+0xb8>)
 800515e:	f04f 32ff 	mov.w	r2, #4294967295
 8005162:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005164:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <vTaskStartScheduler+0xbc>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800516a:	4b12      	ldr	r3, [pc, #72]	@ (80051b4 <vTaskStartScheduler+0xc0>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005170:	f000 fe7e 	bl	8005e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005174:	e00f      	b.n	8005196 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d10b      	bne.n	8005196 <vTaskStartScheduler+0xa2>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60fb      	str	r3, [r7, #12]
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	e7fd      	b.n	8005192 <vTaskStartScheduler+0x9e>
}
 8005196:	bf00      	nop
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	08006ff4 	.word	0x08006ff4
 80051a4:	0800575d 	.word	0x0800575d
 80051a8:	20000580 	.word	0x20000580
 80051ac:	2000057c 	.word	0x2000057c
 80051b0:	20000568 	.word	0x20000568
 80051b4:	20000560 	.word	0x20000560

080051b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051bc:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <vTaskSuspendAll+0x18>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a03      	ldr	r2, [pc, #12]	@ (80051d0 <vTaskSuspendAll+0x18>)
 80051c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051c6:	bf00      	nop
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20000584 	.word	0x20000584

080051d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051e2:	4b42      	ldr	r3, [pc, #264]	@ (80052ec <xTaskResumeAll+0x118>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <xTaskResumeAll+0x2e>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	603b      	str	r3, [r7, #0]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005202:	f000 fed9 	bl	8005fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005206:	4b39      	ldr	r3, [pc, #228]	@ (80052ec <xTaskResumeAll+0x118>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a37      	ldr	r2, [pc, #220]	@ (80052ec <xTaskResumeAll+0x118>)
 800520e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005210:	4b36      	ldr	r3, [pc, #216]	@ (80052ec <xTaskResumeAll+0x118>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d161      	bne.n	80052dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005218:	4b35      	ldr	r3, [pc, #212]	@ (80052f0 <xTaskResumeAll+0x11c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d05d      	beq.n	80052dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005220:	e02e      	b.n	8005280 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005222:	4b34      	ldr	r3, [pc, #208]	@ (80052f4 <xTaskResumeAll+0x120>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	3318      	adds	r3, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe ffda 	bl	80041e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe ffd5 	bl	80041e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	4b2c      	ldr	r3, [pc, #176]	@ (80052f8 <xTaskResumeAll+0x124>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <xTaskResumeAll+0x124>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a27      	ldr	r2, [pc, #156]	@ (80052fc <xTaskResumeAll+0x128>)
 800525e:	441a      	add	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7fe ff61 	bl	800412e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005270:	4b23      	ldr	r3, [pc, #140]	@ (8005300 <xTaskResumeAll+0x12c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800527a:	4b22      	ldr	r3, [pc, #136]	@ (8005304 <xTaskResumeAll+0x130>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005280:	4b1c      	ldr	r3, [pc, #112]	@ (80052f4 <xTaskResumeAll+0x120>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1cc      	bne.n	8005222 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800528e:	f000 fb1b 	bl	80058c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005292:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <xTaskResumeAll+0x134>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800529e:	f000 f837 	bl	8005310 <xTaskIncrementTick>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052a8:	4b16      	ldr	r3, [pc, #88]	@ (8005304 <xTaskResumeAll+0x130>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f1      	bne.n	800529e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052ba:	4b13      	ldr	r3, [pc, #76]	@ (8005308 <xTaskResumeAll+0x134>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <xTaskResumeAll+0x130>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052cc:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <xTaskResumeAll+0x138>)
 80052ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052dc:	f000 fe9e 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 80052e0:	68bb      	ldr	r3, [r7, #8]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000584 	.word	0x20000584
 80052f0:	2000055c 	.word	0x2000055c
 80052f4:	2000051c 	.word	0x2000051c
 80052f8:	20000564 	.word	0x20000564
 80052fc:	20000460 	.word	0x20000460
 8005300:	2000045c 	.word	0x2000045c
 8005304:	20000570 	.word	0x20000570
 8005308:	2000056c 	.word	0x2000056c
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531a:	4b4f      	ldr	r3, [pc, #316]	@ (8005458 <xTaskIncrementTick+0x148>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 808f 	bne.w	8005442 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005324:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <xTaskIncrementTick+0x14c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800532c:	4a4b      	ldr	r2, [pc, #300]	@ (800545c <xTaskIncrementTick+0x14c>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d121      	bne.n	800537c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005338:	4b49      	ldr	r3, [pc, #292]	@ (8005460 <xTaskIncrementTick+0x150>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	603b      	str	r3, [r7, #0]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xTaskIncrementTick+0x46>
 800535a:	4b41      	ldr	r3, [pc, #260]	@ (8005460 <xTaskIncrementTick+0x150>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	4b40      	ldr	r3, [pc, #256]	@ (8005464 <xTaskIncrementTick+0x154>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3e      	ldr	r2, [pc, #248]	@ (8005460 <xTaskIncrementTick+0x150>)
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4a3e      	ldr	r2, [pc, #248]	@ (8005464 <xTaskIncrementTick+0x154>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b3e      	ldr	r3, [pc, #248]	@ (8005468 <xTaskIncrementTick+0x158>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	4a3c      	ldr	r2, [pc, #240]	@ (8005468 <xTaskIncrementTick+0x158>)
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	f000 faa6 	bl	80058c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800537c:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <xTaskIncrementTick+0x15c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	429a      	cmp	r2, r3
 8005384:	d348      	bcc.n	8005418 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005386:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <xTaskIncrementTick+0x150>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005390:	4b36      	ldr	r3, [pc, #216]	@ (800546c <xTaskIncrementTick+0x15c>)
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	601a      	str	r2, [r3, #0]
					break;
 8005398:	e03e      	b.n	8005418 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539a:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <xTaskIncrementTick+0x150>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d203      	bcs.n	80053ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053b2:	4a2e      	ldr	r2, [pc, #184]	@ (800546c <xTaskIncrementTick+0x15c>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053b8:	e02e      	b.n	8005418 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe ff12 	bl	80041e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	3318      	adds	r3, #24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe ff09 	bl	80041e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	2201      	movs	r2, #1
 80053dc:	409a      	lsls	r2, r3
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <xTaskIncrementTick+0x160>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	4a22      	ldr	r2, [pc, #136]	@ (8005470 <xTaskIncrementTick+0x160>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005474 <xTaskIncrementTick+0x164>)
 80053f6:	441a      	add	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7fe fe95 	bl	800412e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <xTaskIncrementTick+0x168>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	429a      	cmp	r2, r3
 8005410:	d3b9      	bcc.n	8005386 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005416:	e7b6      	b.n	8005386 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005418:	4b17      	ldr	r3, [pc, #92]	@ (8005478 <xTaskIncrementTick+0x168>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800541e:	4915      	ldr	r1, [pc, #84]	@ (8005474 <xTaskIncrementTick+0x164>)
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	440b      	add	r3, r1
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d901      	bls.n	8005434 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <xTaskIncrementTick+0x16c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e004      	b.n	800544c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005442:	4b0f      	ldr	r3, [pc, #60]	@ (8005480 <xTaskIncrementTick+0x170>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a0d      	ldr	r2, [pc, #52]	@ (8005480 <xTaskIncrementTick+0x170>)
 800544a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800544c:	697b      	ldr	r3, [r7, #20]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000584 	.word	0x20000584
 800545c:	20000560 	.word	0x20000560
 8005460:	20000514 	.word	0x20000514
 8005464:	20000518 	.word	0x20000518
 8005468:	20000574 	.word	0x20000574
 800546c:	2000057c 	.word	0x2000057c
 8005470:	20000564 	.word	0x20000564
 8005474:	20000460 	.word	0x20000460
 8005478:	2000045c 	.word	0x2000045c
 800547c:	20000570 	.word	0x20000570
 8005480:	2000056c 	.word	0x2000056c

08005484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800548a:	4b27      	ldr	r3, [pc, #156]	@ (8005528 <vTaskSwitchContext+0xa4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005492:	4b26      	ldr	r3, [pc, #152]	@ (800552c <vTaskSwitchContext+0xa8>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005498:	e040      	b.n	800551c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800549a:	4b24      	ldr	r3, [pc, #144]	@ (800552c <vTaskSwitchContext+0xa8>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a0:	4b23      	ldr	r3, [pc, #140]	@ (8005530 <vTaskSwitchContext+0xac>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	fab3 f383 	clz	r3, r3
 80054ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	f1c3 031f 	rsb	r3, r3, #31
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	491f      	ldr	r1, [pc, #124]	@ (8005534 <vTaskSwitchContext+0xb0>)
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	607b      	str	r3, [r7, #4]
}
 80054dc:	bf00      	nop
 80054de:	bf00      	nop
 80054e0:	e7fd      	b.n	80054de <vTaskSwitchContext+0x5a>
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4a11      	ldr	r2, [pc, #68]	@ (8005534 <vTaskSwitchContext+0xb0>)
 80054ee:	4413      	add	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3308      	adds	r3, #8
 8005504:	429a      	cmp	r2, r3
 8005506:	d104      	bne.n	8005512 <vTaskSwitchContext+0x8e>
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a07      	ldr	r2, [pc, #28]	@ (8005538 <vTaskSwitchContext+0xb4>)
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	20000584 	.word	0x20000584
 800552c:	20000570 	.word	0x20000570
 8005530:	20000564 	.word	0x20000564
 8005534:	20000460 	.word	0x20000460
 8005538:	2000045c 	.word	0x2000045c

0800553c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60fb      	str	r3, [r7, #12]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005564:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <vTaskPlaceOnEventList+0x48>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3318      	adds	r3, #24
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fe fe02 	bl	8004176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005572:	2101      	movs	r1, #1
 8005574:	6838      	ldr	r0, [r7, #0]
 8005576:	f000 fb87 	bl	8005c88 <prvAddCurrentTaskToDelayedList>
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	2000045c 	.word	0x2000045c

08005588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10b      	bne.n	80055b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60fb      	str	r3, [r7, #12]
}
 80055b0:	bf00      	nop
 80055b2:	bf00      	nop
 80055b4:	e7fd      	b.n	80055b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3318      	adds	r3, #24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fe14 	bl	80041e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <xTaskRemoveFromEventList+0xb0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11c      	bne.n	8005602 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe fe0b 	bl	80041e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d6:	2201      	movs	r2, #1
 80055d8:	409a      	lsls	r2, r3
 80055da:	4b18      	ldr	r3, [pc, #96]	@ (800563c <xTaskRemoveFromEventList+0xb4>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4313      	orrs	r3, r2
 80055e0:	4a16      	ldr	r2, [pc, #88]	@ (800563c <xTaskRemoveFromEventList+0xb4>)
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4a13      	ldr	r2, [pc, #76]	@ (8005640 <xTaskRemoveFromEventList+0xb8>)
 80055f2:	441a      	add	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fe fd97 	bl	800412e <vListInsertEnd>
 8005600:	e005      	b.n	800560e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3318      	adds	r3, #24
 8005606:	4619      	mov	r1, r3
 8005608:	480e      	ldr	r0, [pc, #56]	@ (8005644 <xTaskRemoveFromEventList+0xbc>)
 800560a:	f7fe fd90 	bl	800412e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005612:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <xTaskRemoveFromEventList+0xc0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	429a      	cmp	r2, r3
 800561a:	d905      	bls.n	8005628 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800561c:	2301      	movs	r3, #1
 800561e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005620:	4b0a      	ldr	r3, [pc, #40]	@ (800564c <xTaskRemoveFromEventList+0xc4>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e001      	b.n	800562c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800562c:	697b      	ldr	r3, [r7, #20]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000584 	.word	0x20000584
 800563c:	20000564 	.word	0x20000564
 8005640:	20000460 	.word	0x20000460
 8005644:	2000051c 	.word	0x2000051c
 8005648:	2000045c 	.word	0x2000045c
 800564c:	20000570 	.word	0x20000570

08005650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005658:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <vTaskInternalSetTimeOutState+0x24>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005660:	4b05      	ldr	r3, [pc, #20]	@ (8005678 <vTaskInternalSetTimeOutState+0x28>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	605a      	str	r2, [r3, #4]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	20000574 	.word	0x20000574
 8005678:	20000560 	.word	0x20000560

0800567c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	613b      	str	r3, [r7, #16]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60fb      	str	r3, [r7, #12]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056c2:	f000 fc79 	bl	8005fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056c6:	4b1d      	ldr	r3, [pc, #116]	@ (800573c <xTaskCheckForTimeOut+0xc0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056de:	d102      	bne.n	80056e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	e023      	b.n	800572e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <xTaskCheckForTimeOut+0xc4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d007      	beq.n	8005702 <xTaskCheckForTimeOut+0x86>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	e015      	b.n	800572e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	429a      	cmp	r2, r3
 800570a:	d20b      	bcs.n	8005724 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff99 	bl	8005650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800571e:	2300      	movs	r3, #0
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	e004      	b.n	800572e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800572e:	f000 fc75 	bl	800601c <vPortExitCritical>

	return xReturn;
 8005732:	69fb      	ldr	r3, [r7, #28]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3720      	adds	r7, #32
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	20000560 	.word	0x20000560
 8005740:	20000574 	.word	0x20000574

08005744 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <vTaskMissedYield+0x14>)
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	20000570 	.word	0x20000570

0800575c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005764:	f000 f852 	bl	800580c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <prvIdleTask+0x28>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d9f9      	bls.n	8005764 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <prvIdleTask+0x2c>)
 8005772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005780:	e7f0      	b.n	8005764 <prvIdleTask+0x8>
 8005782:	bf00      	nop
 8005784:	20000460 	.word	0x20000460
 8005788:	e000ed04 	.word	0xe000ed04

0800578c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005792:	2300      	movs	r3, #0
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	e00c      	b.n	80057b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a12      	ldr	r2, [pc, #72]	@ (80057ec <prvInitialiseTaskLists+0x60>)
 80057a4:	4413      	add	r3, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fc94 	bl	80040d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3301      	adds	r3, #1
 80057b0:	607b      	str	r3, [r7, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b06      	cmp	r3, #6
 80057b6:	d9ef      	bls.n	8005798 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057b8:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <prvInitialiseTaskLists+0x64>)
 80057ba:	f7fe fc8b 	bl	80040d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057be:	480d      	ldr	r0, [pc, #52]	@ (80057f4 <prvInitialiseTaskLists+0x68>)
 80057c0:	f7fe fc88 	bl	80040d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057c4:	480c      	ldr	r0, [pc, #48]	@ (80057f8 <prvInitialiseTaskLists+0x6c>)
 80057c6:	f7fe fc85 	bl	80040d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057ca:	480c      	ldr	r0, [pc, #48]	@ (80057fc <prvInitialiseTaskLists+0x70>)
 80057cc:	f7fe fc82 	bl	80040d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057d0:	480b      	ldr	r0, [pc, #44]	@ (8005800 <prvInitialiseTaskLists+0x74>)
 80057d2:	f7fe fc7f 	bl	80040d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005804 <prvInitialiseTaskLists+0x78>)
 80057d8:	4a05      	ldr	r2, [pc, #20]	@ (80057f0 <prvInitialiseTaskLists+0x64>)
 80057da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <prvInitialiseTaskLists+0x7c>)
 80057de:	4a05      	ldr	r2, [pc, #20]	@ (80057f4 <prvInitialiseTaskLists+0x68>)
 80057e0:	601a      	str	r2, [r3, #0]
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000460 	.word	0x20000460
 80057f0:	200004ec 	.word	0x200004ec
 80057f4:	20000500 	.word	0x20000500
 80057f8:	2000051c 	.word	0x2000051c
 80057fc:	20000530 	.word	0x20000530
 8005800:	20000548 	.word	0x20000548
 8005804:	20000514 	.word	0x20000514
 8005808:	20000518 	.word	0x20000518

0800580c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005812:	e019      	b.n	8005848 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005814:	f000 fbd0 	bl	8005fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005818:	4b10      	ldr	r3, [pc, #64]	@ (800585c <prvCheckTasksWaitingTermination+0x50>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	4618      	mov	r0, r3
 8005826:	f7fe fcdf 	bl	80041e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <prvCheckTasksWaitingTermination+0x54>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	4a0b      	ldr	r2, [pc, #44]	@ (8005860 <prvCheckTasksWaitingTermination+0x54>)
 8005832:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005834:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <prvCheckTasksWaitingTermination+0x58>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3b01      	subs	r3, #1
 800583a:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <prvCheckTasksWaitingTermination+0x58>)
 800583c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800583e:	f000 fbed 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f810 	bl	8005868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005848:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <prvCheckTasksWaitingTermination+0x58>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e1      	bne.n	8005814 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20000530 	.word	0x20000530
 8005860:	2000055c 	.word	0x2000055c
 8005864:	20000544 	.word	0x20000544

08005868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fd8a 	bl	8006398 <vPortFree>
				vPortFree( pxTCB );
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fd87 	bl	8006398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800588a:	e019      	b.n	80058c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005892:	2b01      	cmp	r3, #1
 8005894:	d103      	bne.n	800589e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fd7e 	bl	8006398 <vPortFree>
	}
 800589c:	e010      	b.n	80058c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d00b      	beq.n	80058c0 <prvDeleteTCB+0x58>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <prvDeleteTCB+0x54>
	}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005900 <prvResetNextTaskUnblockTime+0x38>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005904 <prvResetNextTaskUnblockTime+0x3c>)
 80058da:	f04f 32ff 	mov.w	r2, #4294967295
 80058de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058e0:	e008      	b.n	80058f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058e2:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <prvResetNextTaskUnblockTime+0x38>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4a04      	ldr	r2, [pc, #16]	@ (8005904 <prvResetNextTaskUnblockTime+0x3c>)
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000514 	.word	0x20000514
 8005904:	2000057c 	.word	0x2000057c

08005908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800590e:	4b0b      	ldr	r3, [pc, #44]	@ (800593c <xTaskGetSchedulerState+0x34>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d102      	bne.n	800591c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005916:	2301      	movs	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	e008      	b.n	800592e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800591c:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <xTaskGetSchedulerState+0x38>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005924:	2302      	movs	r3, #2
 8005926:	607b      	str	r3, [r7, #4]
 8005928:	e001      	b.n	800592e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800592a:	2300      	movs	r3, #0
 800592c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800592e:	687b      	ldr	r3, [r7, #4]
	}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20000568 	.word	0x20000568
 8005940:	20000584 	.word	0x20000584

08005944 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d05e      	beq.n	8005a18 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595e:	4b31      	ldr	r3, [pc, #196]	@ (8005a24 <xTaskPriorityInherit+0xe0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d24e      	bcs.n	8005a06 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b00      	cmp	r3, #0
 800596e:	db06      	blt.n	800597e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005970:	4b2c      	ldr	r3, [pc, #176]	@ (8005a24 <xTaskPriorityInherit+0xe0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	f1c3 0207 	rsb	r2, r3, #7
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6959      	ldr	r1, [r3, #20]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <xTaskPriorityInherit+0xe4>)
 8005990:	4413      	add	r3, r2
 8005992:	4299      	cmp	r1, r3
 8005994:	d12f      	bne.n	80059f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7fe fc24 	bl	80041e8 <uxListRemove>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	2201      	movs	r2, #1
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43da      	mvns	r2, r3
 80059b2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a2c <xTaskPriorityInherit+0xe8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4013      	ands	r3, r2
 80059b8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a2c <xTaskPriorityInherit+0xe8>)
 80059ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059bc:	4b19      	ldr	r3, [pc, #100]	@ (8005a24 <xTaskPriorityInherit+0xe0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	2201      	movs	r2, #1
 80059cc:	409a      	lsls	r2, r3
 80059ce:	4b17      	ldr	r3, [pc, #92]	@ (8005a2c <xTaskPriorityInherit+0xe8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	4a15      	ldr	r2, [pc, #84]	@ (8005a2c <xTaskPriorityInherit+0xe8>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4a10      	ldr	r2, [pc, #64]	@ (8005a28 <xTaskPriorityInherit+0xe4>)
 80059e6:	441a      	add	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f7fe fb9d 	bl	800412e <vListInsertEnd>
 80059f4:	e004      	b.n	8005a00 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <xTaskPriorityInherit+0xe0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e008      	b.n	8005a18 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <xTaskPriorityInherit+0xe0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d201      	bcs.n	8005a18 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a18:	68fb      	ldr	r3, [r7, #12]
	}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2000045c 	.word	0x2000045c
 8005a28:	20000460 	.word	0x20000460
 8005a2c:	20000564 	.word	0x20000564

08005a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d070      	beq.n	8005b28 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a46:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <xTaskPriorityDisinherit+0x104>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d00b      	beq.n	8005a68 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60fb      	str	r3, [r7, #12]
}
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	e7fd      	b.n	8005a64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a74:	f383 8811 	msr	BASEPRI, r3
 8005a78:	f3bf 8f6f 	isb	sy
 8005a7c:	f3bf 8f4f 	dsb	sy
 8005a80:	60bb      	str	r3, [r7, #8]
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	e7fd      	b.n	8005a84 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a8c:	1e5a      	subs	r2, r3, #1
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d044      	beq.n	8005b28 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d140      	bne.n	8005b28 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fe fb9c 	bl	80041e8 <uxListRemove>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d115      	bne.n	8005ae2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aba:	491f      	ldr	r1, [pc, #124]	@ (8005b38 <xTaskPriorityDisinherit+0x108>)
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xTaskPriorityDisinherit+0xb2>
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad6:	43da      	mvns	r2, r3
 8005ad8:	4b18      	ldr	r3, [pc, #96]	@ (8005b3c <xTaskPriorityDisinherit+0x10c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4013      	ands	r3, r2
 8005ade:	4a17      	ldr	r2, [pc, #92]	@ (8005b3c <xTaskPriorityDisinherit+0x10c>)
 8005ae0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aee:	f1c3 0207 	rsb	r2, r3, #7
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	2201      	movs	r2, #1
 8005afc:	409a      	lsls	r2, r3
 8005afe:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <xTaskPriorityDisinherit+0x10c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	4a0d      	ldr	r2, [pc, #52]	@ (8005b3c <xTaskPriorityDisinherit+0x10c>)
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a08      	ldr	r2, [pc, #32]	@ (8005b38 <xTaskPriorityDisinherit+0x108>)
 8005b16:	441a      	add	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	f7fe fb05 	bl	800412e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b28:	697b      	ldr	r3, [r7, #20]
	}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000045c 	.word	0x2000045c
 8005b38:	20000460 	.word	0x20000460
 8005b3c:	20000564 	.word	0x20000564

08005b40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d079      	beq.n	8005c4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	bf00      	nop
 8005b76:	e7fd      	b.n	8005b74 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d902      	bls.n	8005b88 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	e002      	b.n	8005b8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d059      	beq.n	8005c4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d154      	bne.n	8005c4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c54 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d10b      	bne.n	8005bc4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	60bb      	str	r3, [r7, #8]
}
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	db04      	blt.n	8005be2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f1c3 0207 	rsb	r2, r3, #7
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	6959      	ldr	r1, [r3, #20]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d129      	bne.n	8005c4c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fe faf3 	bl	80041e8 <uxListRemove>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10a      	bne.n	8005c1e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	43da      	mvns	r2, r3
 8005c14:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005c1c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	2201      	movs	r2, #1
 8005c24:	409a      	lsls	r2, r3
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c5c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4a06      	ldr	r2, [pc, #24]	@ (8005c58 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c3e:	441a      	add	r2, r3
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f7fe fa71 	bl	800412e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c4c:	bf00      	nop
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	2000045c 	.word	0x2000045c
 8005c58:	20000460 	.word	0x20000460
 8005c5c:	20000564 	.word	0x20000564

08005c60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c64:	4b07      	ldr	r3, [pc, #28]	@ (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c6c:	4b05      	ldr	r3, [pc, #20]	@ (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c72:	3201      	adds	r2, #1
 8005c74:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005c76:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c78:	681b      	ldr	r3, [r3, #0]
	}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	2000045c 	.word	0x2000045c

08005c88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c92:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	4b28      	ldr	r3, [pc, #160]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe faa2 	bl	80041e8 <uxListRemove>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10b      	bne.n	8005cc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005caa:	4b24      	ldr	r3, [pc, #144]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	4b21      	ldr	r3, [pc, #132]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	4a20      	ldr	r2, [pc, #128]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d10a      	bne.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x58>
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	481a      	ldr	r0, [pc, #104]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cda:	f7fe fa28 	bl	800412e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cde:	e026      	b.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ce8:	4b14      	ldr	r3, [pc, #80]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d209      	bcs.n	8005d0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cf8:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fe fa36 	bl	8004176 <vListInsert>
}
 8005d0a:	e010      	b.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f7fe fa2c 	bl	8004176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d202      	bcs.n	8005d2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d28:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6013      	str	r3, [r2, #0]
}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000560 	.word	0x20000560
 8005d3c:	2000045c 	.word	0x2000045c
 8005d40:	20000564 	.word	0x20000564
 8005d44:	20000548 	.word	0x20000548
 8005d48:	20000518 	.word	0x20000518
 8005d4c:	20000514 	.word	0x20000514
 8005d50:	2000057c 	.word	0x2000057c

08005d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d84:	4a0c      	ldr	r2, [pc, #48]	@ (8005db8 <pxPortInitialiseStack+0x64>)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b14      	subs	r3, #20
 8005d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f06f 0202 	mvn.w	r2, #2
 8005da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b20      	subs	r3, #32
 8005da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	08005dbd 	.word	0x08005dbd

08005dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dc6:	4b13      	ldr	r3, [pc, #76]	@ (8005e14 <prvTaskExitError+0x58>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d00b      	beq.n	8005de8 <prvTaskExitError+0x2c>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	60fb      	str	r3, [r7, #12]
}
 8005de2:	bf00      	nop
 8005de4:	bf00      	nop
 8005de6:	e7fd      	b.n	8005de4 <prvTaskExitError+0x28>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60bb      	str	r3, [r7, #8]
}
 8005dfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005dfc:	bf00      	nop
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0fc      	beq.n	8005dfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	2000000c 	.word	0x2000000c
	...

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	4770      	bx	lr
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst2>:
 8005e40:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e48:	4808      	ldr	r0, [pc, #32]	@ (8005e6c <prvPortStartFirstTask+0x24>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8814 	msr	CONTROL, r0
 8005e5a:	b662      	cpsie	i
 8005e5c:	b661      	cpsie	f
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	df00      	svc	0
 8005e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed08 	.word	0xe000ed08

08005e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e76:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10b      	bne.n	8005e98 <xPortStartScheduler+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <xPortStartScheduler+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10b      	bne.n	8005eba <xPortStartScheduler+0x4a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eba:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <xPortStartScheduler+0x130>)
 8005ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	22ff      	movs	r2, #255	@ 0xff
 8005eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <xPortStartScheduler+0x134>)
 8005ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee2:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ee8:	e009      	b.n	8005efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d0ef      	beq.n	8005eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f0a:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1c3 0307 	rsb	r3, r3, #7
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00b      	beq.n	8005f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f40:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4c:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f64:	f000 f8da 	bl	800611c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <xPortStartScheduler+0x140>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f6e:	f000 f8f9 	bl	8006164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f7e:	f7ff ff63 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f82:	f7ff fa7f 	bl	8005484 <vTaskSwitchContext>
	prvTaskExitError();
 8005f86:	f7ff ff19 	bl	8005dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed00 	.word	0xe000ed00
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	20000588 	.word	0x20000588
 8005fa8:	2000058c 	.word	0x2000058c
 8005fac:	e000ed20 	.word	0xe000ed20
 8005fb0:	2000000c 	.word	0x2000000c
 8005fb4:	e000ef34 	.word	0xe000ef34

08005fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d110      	bne.n	8006006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <vPortEnterCritical+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <vPortEnterCritical+0x4a>
	}
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	2000000c 	.word	0x2000000c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortExitCritical+0x26>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <vPortExitCritical+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <vPortExitCritical+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <vPortExitCritical+0x44>
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2000000c 	.word	0x2000000c

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7ff f9f0 	bl	8005484 <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7ff f90d 	bl	8005310 <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <xPortSysTickHandler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000000 	.word	0x20000000
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006172:	bf00      	nop
 8006174:	e000ed88 	.word	0xe000ed88

08006178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d915      	bls.n	80061b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <vPortValidateInterruptPriority+0x74>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006194:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <vPortValidateInterruptPriority+0x78>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	7afa      	ldrb	r2, [r7, #11]
 800619a:	429a      	cmp	r2, r3
 800619c:	d20b      	bcs.n	80061b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	e7fd      	b.n	80061b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061b6:	4b0f      	ldr	r3, [pc, #60]	@ (80061f4 <vPortValidateInterruptPriority+0x7c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061be:	4b0e      	ldr	r3, [pc, #56]	@ (80061f8 <vPortValidateInterruptPriority+0x80>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90b      	bls.n	80061de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	603b      	str	r3, [r7, #0]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vPortValidateInterruptPriority+0x62>
	}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	e000e3f0 	.word	0xe000e3f0
 80061f0:	20000588 	.word	0x20000588
 80061f4:	e000ed0c 	.word	0xe000ed0c
 80061f8:	2000058c 	.word	0x2000058c

080061fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006208:	f7fe ffd6 	bl	80051b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800620c:	4b5c      	ldr	r3, [pc, #368]	@ (8006380 <pvPortMalloc+0x184>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006214:	f000 f924 	bl	8006460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006218:	4b5a      	ldr	r3, [pc, #360]	@ (8006384 <pvPortMalloc+0x188>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	f040 8095 	bne.w	8006350 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01e      	beq.n	800626a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800622c:	2208      	movs	r2, #8
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4413      	add	r3, r2
 8006232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d015      	beq.n	800626a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f023 0307 	bic.w	r3, r3, #7
 8006244:	3308      	adds	r3, #8
 8006246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <pvPortMalloc+0x6e>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	617b      	str	r3, [r7, #20]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d06f      	beq.n	8006350 <pvPortMalloc+0x154>
 8006270:	4b45      	ldr	r3, [pc, #276]	@ (8006388 <pvPortMalloc+0x18c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	429a      	cmp	r2, r3
 8006278:	d86a      	bhi.n	8006350 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800627a:	4b44      	ldr	r3, [pc, #272]	@ (800638c <pvPortMalloc+0x190>)
 800627c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800627e:	4b43      	ldr	r3, [pc, #268]	@ (800638c <pvPortMalloc+0x190>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006284:	e004      	b.n	8006290 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d903      	bls.n	80062a2 <pvPortMalloc+0xa6>
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062a2:	4b37      	ldr	r3, [pc, #220]	@ (8006380 <pvPortMalloc+0x184>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d051      	beq.n	8006350 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2208      	movs	r2, #8
 80062b2:	4413      	add	r3, r2
 80062b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	1ad2      	subs	r2, r2, r3
 80062c6:	2308      	movs	r3, #8
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d920      	bls.n	8006310 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4413      	add	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <pvPortMalloc+0xfc>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	1ad2      	subs	r2, r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800630a:	69b8      	ldr	r0, [r7, #24]
 800630c:	f000 f90a 	bl	8006524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <pvPortMalloc+0x18c>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <pvPortMalloc+0x18c>)
 800631c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800631e:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <pvPortMalloc+0x18c>)
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b1b      	ldr	r3, [pc, #108]	@ (8006390 <pvPortMalloc+0x194>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d203      	bcs.n	8006332 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800632a:	4b17      	ldr	r3, [pc, #92]	@ (8006388 <pvPortMalloc+0x18c>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <pvPortMalloc+0x194>)
 8006330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	4b13      	ldr	r3, [pc, #76]	@ (8006384 <pvPortMalloc+0x188>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	431a      	orrs	r2, r3
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006346:	4b13      	ldr	r3, [pc, #76]	@ (8006394 <pvPortMalloc+0x198>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3301      	adds	r3, #1
 800634c:	4a11      	ldr	r2, [pc, #68]	@ (8006394 <pvPortMalloc+0x198>)
 800634e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006350:	f7fe ff40 	bl	80051d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <pvPortMalloc+0x17a>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	60fb      	str	r3, [r7, #12]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <pvPortMalloc+0x176>
	return pvReturn;
 8006376:	69fb      	ldr	r3, [r7, #28]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3728      	adds	r7, #40	@ 0x28
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20004198 	.word	0x20004198
 8006384:	200041ac 	.word	0x200041ac
 8006388:	2000419c 	.word	0x2000419c
 800638c:	20004190 	.word	0x20004190
 8006390:	200041a0 	.word	0x200041a0
 8006394:	200041a4 	.word	0x200041a4

08006398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d04f      	beq.n	800644a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063aa:	2308      	movs	r3, #8
 80063ac:	425b      	negs	r3, r3
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4413      	add	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	4b25      	ldr	r3, [pc, #148]	@ (8006454 <vPortFree+0xbc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4013      	ands	r3, r2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <vPortFree+0x46>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <vPortFree+0x66>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	4b14      	ldr	r3, [pc, #80]	@ (8006454 <vPortFree+0xbc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4013      	ands	r3, r2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01e      	beq.n	800644a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11a      	bne.n	800644a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	4b0e      	ldr	r3, [pc, #56]	@ (8006454 <vPortFree+0xbc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	43db      	mvns	r3, r3
 800641e:	401a      	ands	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006424:	f7fe fec8 	bl	80051b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <vPortFree+0xc0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4413      	add	r3, r2
 8006432:	4a09      	ldr	r2, [pc, #36]	@ (8006458 <vPortFree+0xc0>)
 8006434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006436:	6938      	ldr	r0, [r7, #16]
 8006438:	f000 f874 	bl	8006524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800643c:	4b07      	ldr	r3, [pc, #28]	@ (800645c <vPortFree+0xc4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a06      	ldr	r2, [pc, #24]	@ (800645c <vPortFree+0xc4>)
 8006444:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006446:	f7fe fec5 	bl	80051d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200041ac 	.word	0x200041ac
 8006458:	2000419c 	.word	0x2000419c
 800645c:	200041a8 	.word	0x200041a8

08006460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006466:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800646a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800646c:	4b27      	ldr	r3, [pc, #156]	@ (800650c <prvHeapInit+0xac>)
 800646e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00c      	beq.n	8006494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3307      	adds	r3, #7
 800647e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0307 	bic.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	4a1f      	ldr	r2, [pc, #124]	@ (800650c <prvHeapInit+0xac>)
 8006490:	4413      	add	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006498:	4a1d      	ldr	r2, [pc, #116]	@ (8006510 <prvHeapInit+0xb0>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800649e:	4b1c      	ldr	r3, [pc, #112]	@ (8006510 <prvHeapInit+0xb0>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	4413      	add	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064ac:	2208      	movs	r2, #8
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a15      	ldr	r2, [pc, #84]	@ (8006514 <prvHeapInit+0xb4>)
 80064c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80064c2:	4b14      	ldr	r3, [pc, #80]	@ (8006514 <prvHeapInit+0xb4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2200      	movs	r2, #0
 80064c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064ca:	4b12      	ldr	r3, [pc, #72]	@ (8006514 <prvHeapInit+0xb4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006514 <prvHeapInit+0xb4>)
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006518 <prvHeapInit+0xb8>)
 80064ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	4a09      	ldr	r2, [pc, #36]	@ (800651c <prvHeapInit+0xbc>)
 80064f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064f8:	4b09      	ldr	r3, [pc, #36]	@ (8006520 <prvHeapInit+0xc0>)
 80064fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064fe:	601a      	str	r2, [r3, #0]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	20000590 	.word	0x20000590
 8006510:	20004190 	.word	0x20004190
 8006514:	20004198 	.word	0x20004198
 8006518:	200041a0 	.word	0x200041a0
 800651c:	2000419c 	.word	0x2000419c
 8006520:	200041ac 	.word	0x200041ac

08006524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800652c:	4b28      	ldr	r3, [pc, #160]	@ (80065d0 <prvInsertBlockIntoFreeList+0xac>)
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e002      	b.n	8006538 <prvInsertBlockIntoFreeList+0x14>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d8f7      	bhi.n	8006532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d108      	bne.n	8006566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	441a      	add	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d118      	bne.n	80065ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d00d      	beq.n	80065a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	441a      	add	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	e008      	b.n	80065b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065a2:	4b0c      	ldr	r3, [pc, #48]	@ (80065d4 <prvInsertBlockIntoFreeList+0xb0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	e003      	b.n	80065b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d002      	beq.n	80065c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20004190 	.word	0x20004190
 80065d4:	20004198 	.word	0x20004198

080065d8 <sniprintf>:
 80065d8:	b40c      	push	{r2, r3}
 80065da:	b530      	push	{r4, r5, lr}
 80065dc:	4b17      	ldr	r3, [pc, #92]	@ (800663c <sniprintf+0x64>)
 80065de:	1e0c      	subs	r4, r1, #0
 80065e0:	681d      	ldr	r5, [r3, #0]
 80065e2:	b09d      	sub	sp, #116	@ 0x74
 80065e4:	da08      	bge.n	80065f8 <sniprintf+0x20>
 80065e6:	238b      	movs	r3, #139	@ 0x8b
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	b01d      	add	sp, #116	@ 0x74
 80065f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065f4:	b002      	add	sp, #8
 80065f6:	4770      	bx	lr
 80065f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006600:	bf14      	ite	ne
 8006602:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006606:	4623      	moveq	r3, r4
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	9307      	str	r3, [sp, #28]
 800660c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006610:	9002      	str	r0, [sp, #8]
 8006612:	9006      	str	r0, [sp, #24]
 8006614:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006618:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800661a:	ab21      	add	r3, sp, #132	@ 0x84
 800661c:	a902      	add	r1, sp, #8
 800661e:	4628      	mov	r0, r5
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	f000 f9a3 	bl	800696c <_svfiprintf_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	bfbc      	itt	lt
 800662a:	238b      	movlt	r3, #139	@ 0x8b
 800662c:	602b      	strlt	r3, [r5, #0]
 800662e:	2c00      	cmp	r4, #0
 8006630:	d0dd      	beq.n	80065ee <sniprintf+0x16>
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e7d9      	b.n	80065ee <sniprintf+0x16>
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <memset>:
 8006640:	4402      	add	r2, r0
 8006642:	4603      	mov	r3, r0
 8006644:	4293      	cmp	r3, r2
 8006646:	d100      	bne.n	800664a <memset+0xa>
 8006648:	4770      	bx	lr
 800664a:	f803 1b01 	strb.w	r1, [r3], #1
 800664e:	e7f9      	b.n	8006644 <memset+0x4>

08006650 <__errno>:
 8006650:	4b01      	ldr	r3, [pc, #4]	@ (8006658 <__errno+0x8>)
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000010 	.word	0x20000010

0800665c <__libc_init_array>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	4d0d      	ldr	r5, [pc, #52]	@ (8006694 <__libc_init_array+0x38>)
 8006660:	4c0d      	ldr	r4, [pc, #52]	@ (8006698 <__libc_init_array+0x3c>)
 8006662:	1b64      	subs	r4, r4, r5
 8006664:	10a4      	asrs	r4, r4, #2
 8006666:	2600      	movs	r6, #0
 8006668:	42a6      	cmp	r6, r4
 800666a:	d109      	bne.n	8006680 <__libc_init_array+0x24>
 800666c:	4d0b      	ldr	r5, [pc, #44]	@ (800669c <__libc_init_array+0x40>)
 800666e:	4c0c      	ldr	r4, [pc, #48]	@ (80066a0 <__libc_init_array+0x44>)
 8006670:	f000 fc66 	bl	8006f40 <_init>
 8006674:	1b64      	subs	r4, r4, r5
 8006676:	10a4      	asrs	r4, r4, #2
 8006678:	2600      	movs	r6, #0
 800667a:	42a6      	cmp	r6, r4
 800667c:	d105      	bne.n	800668a <__libc_init_array+0x2e>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f855 3b04 	ldr.w	r3, [r5], #4
 8006684:	4798      	blx	r3
 8006686:	3601      	adds	r6, #1
 8006688:	e7ee      	b.n	8006668 <__libc_init_array+0xc>
 800668a:	f855 3b04 	ldr.w	r3, [r5], #4
 800668e:	4798      	blx	r3
 8006690:	3601      	adds	r6, #1
 8006692:	e7f2      	b.n	800667a <__libc_init_array+0x1e>
 8006694:	08007058 	.word	0x08007058
 8006698:	08007058 	.word	0x08007058
 800669c:	08007058 	.word	0x08007058
 80066a0:	0800705c 	.word	0x0800705c

080066a4 <__retarget_lock_acquire_recursive>:
 80066a4:	4770      	bx	lr

080066a6 <__retarget_lock_release_recursive>:
 80066a6:	4770      	bx	lr

080066a8 <memcpy>:
 80066a8:	440a      	add	r2, r1
 80066aa:	4291      	cmp	r1, r2
 80066ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80066b0:	d100      	bne.n	80066b4 <memcpy+0xc>
 80066b2:	4770      	bx	lr
 80066b4:	b510      	push	{r4, lr}
 80066b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066be:	4291      	cmp	r1, r2
 80066c0:	d1f9      	bne.n	80066b6 <memcpy+0xe>
 80066c2:	bd10      	pop	{r4, pc}

080066c4 <_free_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4605      	mov	r5, r0
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d041      	beq.n	8006750 <_free_r+0x8c>
 80066cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d0:	1f0c      	subs	r4, r1, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfb8      	it	lt
 80066d6:	18e4      	addlt	r4, r4, r3
 80066d8:	f000 f8e0 	bl	800689c <__malloc_lock>
 80066dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006754 <_free_r+0x90>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	b933      	cbnz	r3, 80066f0 <_free_r+0x2c>
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6014      	str	r4, [r2, #0]
 80066e6:	4628      	mov	r0, r5
 80066e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ec:	f000 b8dc 	b.w	80068a8 <__malloc_unlock>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d908      	bls.n	8006706 <_free_r+0x42>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	1821      	adds	r1, r4, r0
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf01      	itttt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	1809      	addeq	r1, r1, r0
 8006702:	6021      	streq	r1, [r4, #0]
 8006704:	e7ed      	b.n	80066e2 <_free_r+0x1e>
 8006706:	461a      	mov	r2, r3
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b10b      	cbz	r3, 8006710 <_free_r+0x4c>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x42>
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	1850      	adds	r0, r2, r1
 8006714:	42a0      	cmp	r0, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x6c>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	4401      	add	r1, r0
 800671c:	1850      	adds	r0, r2, r1
 800671e:	4283      	cmp	r3, r0
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	d1e0      	bne.n	80066e6 <_free_r+0x22>
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	6053      	str	r3, [r2, #4]
 800672a:	4408      	add	r0, r1
 800672c:	6010      	str	r0, [r2, #0]
 800672e:	e7da      	b.n	80066e6 <_free_r+0x22>
 8006730:	d902      	bls.n	8006738 <_free_r+0x74>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d6      	b.n	80066e6 <_free_r+0x22>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	bf04      	itt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	bf04      	itt	eq
 8006748:	1809      	addeq	r1, r1, r0
 800674a:	6021      	streq	r1, [r4, #0]
 800674c:	6054      	str	r4, [r2, #4]
 800674e:	e7ca      	b.n	80066e6 <_free_r+0x22>
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	bf00      	nop
 8006754:	200042f4 	.word	0x200042f4

08006758 <sbrk_aligned>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4e0f      	ldr	r6, [pc, #60]	@ (8006798 <sbrk_aligned+0x40>)
 800675c:	460c      	mov	r4, r1
 800675e:	6831      	ldr	r1, [r6, #0]
 8006760:	4605      	mov	r5, r0
 8006762:	b911      	cbnz	r1, 800676a <sbrk_aligned+0x12>
 8006764:	f000 fba6 	bl	8006eb4 <_sbrk_r>
 8006768:	6030      	str	r0, [r6, #0]
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 fba1 	bl	8006eb4 <_sbrk_r>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d103      	bne.n	800677e <sbrk_aligned+0x26>
 8006776:	f04f 34ff 	mov.w	r4, #4294967295
 800677a:	4620      	mov	r0, r4
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	1cc4      	adds	r4, r0, #3
 8006780:	f024 0403 	bic.w	r4, r4, #3
 8006784:	42a0      	cmp	r0, r4
 8006786:	d0f8      	beq.n	800677a <sbrk_aligned+0x22>
 8006788:	1a21      	subs	r1, r4, r0
 800678a:	4628      	mov	r0, r5
 800678c:	f000 fb92 	bl	8006eb4 <_sbrk_r>
 8006790:	3001      	adds	r0, #1
 8006792:	d1f2      	bne.n	800677a <sbrk_aligned+0x22>
 8006794:	e7ef      	b.n	8006776 <sbrk_aligned+0x1e>
 8006796:	bf00      	nop
 8006798:	200042f0 	.word	0x200042f0

0800679c <_malloc_r>:
 800679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a0:	1ccd      	adds	r5, r1, #3
 80067a2:	f025 0503 	bic.w	r5, r5, #3
 80067a6:	3508      	adds	r5, #8
 80067a8:	2d0c      	cmp	r5, #12
 80067aa:	bf38      	it	cc
 80067ac:	250c      	movcc	r5, #12
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	4606      	mov	r6, r0
 80067b2:	db01      	blt.n	80067b8 <_malloc_r+0x1c>
 80067b4:	42a9      	cmp	r1, r5
 80067b6:	d904      	bls.n	80067c2 <_malloc_r+0x26>
 80067b8:	230c      	movs	r3, #12
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	2000      	movs	r0, #0
 80067be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006898 <_malloc_r+0xfc>
 80067c6:	f000 f869 	bl	800689c <__malloc_lock>
 80067ca:	f8d8 3000 	ldr.w	r3, [r8]
 80067ce:	461c      	mov	r4, r3
 80067d0:	bb44      	cbnz	r4, 8006824 <_malloc_r+0x88>
 80067d2:	4629      	mov	r1, r5
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7ff ffbf 	bl	8006758 <sbrk_aligned>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	4604      	mov	r4, r0
 80067de:	d158      	bne.n	8006892 <_malloc_r+0xf6>
 80067e0:	f8d8 4000 	ldr.w	r4, [r8]
 80067e4:	4627      	mov	r7, r4
 80067e6:	2f00      	cmp	r7, #0
 80067e8:	d143      	bne.n	8006872 <_malloc_r+0xd6>
 80067ea:	2c00      	cmp	r4, #0
 80067ec:	d04b      	beq.n	8006886 <_malloc_r+0xea>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	4639      	mov	r1, r7
 80067f2:	4630      	mov	r0, r6
 80067f4:	eb04 0903 	add.w	r9, r4, r3
 80067f8:	f000 fb5c 	bl	8006eb4 <_sbrk_r>
 80067fc:	4581      	cmp	r9, r0
 80067fe:	d142      	bne.n	8006886 <_malloc_r+0xea>
 8006800:	6821      	ldr	r1, [r4, #0]
 8006802:	1a6d      	subs	r5, r5, r1
 8006804:	4629      	mov	r1, r5
 8006806:	4630      	mov	r0, r6
 8006808:	f7ff ffa6 	bl	8006758 <sbrk_aligned>
 800680c:	3001      	adds	r0, #1
 800680e:	d03a      	beq.n	8006886 <_malloc_r+0xea>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	442b      	add	r3, r5
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	f8d8 3000 	ldr.w	r3, [r8]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	bb62      	cbnz	r2, 8006878 <_malloc_r+0xdc>
 800681e:	f8c8 7000 	str.w	r7, [r8]
 8006822:	e00f      	b.n	8006844 <_malloc_r+0xa8>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	1b52      	subs	r2, r2, r5
 8006828:	d420      	bmi.n	800686c <_malloc_r+0xd0>
 800682a:	2a0b      	cmp	r2, #11
 800682c:	d917      	bls.n	800685e <_malloc_r+0xc2>
 800682e:	1961      	adds	r1, r4, r5
 8006830:	42a3      	cmp	r3, r4
 8006832:	6025      	str	r5, [r4, #0]
 8006834:	bf18      	it	ne
 8006836:	6059      	strne	r1, [r3, #4]
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	bf08      	it	eq
 800683c:	f8c8 1000 	streq.w	r1, [r8]
 8006840:	5162      	str	r2, [r4, r5]
 8006842:	604b      	str	r3, [r1, #4]
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f82f 	bl	80068a8 <__malloc_unlock>
 800684a:	f104 000b 	add.w	r0, r4, #11
 800684e:	1d23      	adds	r3, r4, #4
 8006850:	f020 0007 	bic.w	r0, r0, #7
 8006854:	1ac2      	subs	r2, r0, r3
 8006856:	bf1c      	itt	ne
 8006858:	1a1b      	subne	r3, r3, r0
 800685a:	50a3      	strne	r3, [r4, r2]
 800685c:	e7af      	b.n	80067be <_malloc_r+0x22>
 800685e:	6862      	ldr	r2, [r4, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	bf0c      	ite	eq
 8006864:	f8c8 2000 	streq.w	r2, [r8]
 8006868:	605a      	strne	r2, [r3, #4]
 800686a:	e7eb      	b.n	8006844 <_malloc_r+0xa8>
 800686c:	4623      	mov	r3, r4
 800686e:	6864      	ldr	r4, [r4, #4]
 8006870:	e7ae      	b.n	80067d0 <_malloc_r+0x34>
 8006872:	463c      	mov	r4, r7
 8006874:	687f      	ldr	r7, [r7, #4]
 8006876:	e7b6      	b.n	80067e6 <_malloc_r+0x4a>
 8006878:	461a      	mov	r2, r3
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	42a3      	cmp	r3, r4
 800687e:	d1fb      	bne.n	8006878 <_malloc_r+0xdc>
 8006880:	2300      	movs	r3, #0
 8006882:	6053      	str	r3, [r2, #4]
 8006884:	e7de      	b.n	8006844 <_malloc_r+0xa8>
 8006886:	230c      	movs	r3, #12
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	4630      	mov	r0, r6
 800688c:	f000 f80c 	bl	80068a8 <__malloc_unlock>
 8006890:	e794      	b.n	80067bc <_malloc_r+0x20>
 8006892:	6005      	str	r5, [r0, #0]
 8006894:	e7d6      	b.n	8006844 <_malloc_r+0xa8>
 8006896:	bf00      	nop
 8006898:	200042f4 	.word	0x200042f4

0800689c <__malloc_lock>:
 800689c:	4801      	ldr	r0, [pc, #4]	@ (80068a4 <__malloc_lock+0x8>)
 800689e:	f7ff bf01 	b.w	80066a4 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	200042ec 	.word	0x200042ec

080068a8 <__malloc_unlock>:
 80068a8:	4801      	ldr	r0, [pc, #4]	@ (80068b0 <__malloc_unlock+0x8>)
 80068aa:	f7ff befc 	b.w	80066a6 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	200042ec 	.word	0x200042ec

080068b4 <__ssputs_r>:
 80068b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	688e      	ldr	r6, [r1, #8]
 80068ba:	461f      	mov	r7, r3
 80068bc:	42be      	cmp	r6, r7
 80068be:	680b      	ldr	r3, [r1, #0]
 80068c0:	4682      	mov	sl, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4690      	mov	r8, r2
 80068c6:	d82d      	bhi.n	8006924 <__ssputs_r+0x70>
 80068c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068d0:	d026      	beq.n	8006920 <__ssputs_r+0x6c>
 80068d2:	6965      	ldr	r5, [r4, #20]
 80068d4:	6909      	ldr	r1, [r1, #16]
 80068d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068da:	eba3 0901 	sub.w	r9, r3, r1
 80068de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068e2:	1c7b      	adds	r3, r7, #1
 80068e4:	444b      	add	r3, r9
 80068e6:	106d      	asrs	r5, r5, #1
 80068e8:	429d      	cmp	r5, r3
 80068ea:	bf38      	it	cc
 80068ec:	461d      	movcc	r5, r3
 80068ee:	0553      	lsls	r3, r2, #21
 80068f0:	d527      	bpl.n	8006942 <__ssputs_r+0x8e>
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7ff ff52 	bl	800679c <_malloc_r>
 80068f8:	4606      	mov	r6, r0
 80068fa:	b360      	cbz	r0, 8006956 <__ssputs_r+0xa2>
 80068fc:	6921      	ldr	r1, [r4, #16]
 80068fe:	464a      	mov	r2, r9
 8006900:	f7ff fed2 	bl	80066a8 <memcpy>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800690a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	6126      	str	r6, [r4, #16]
 8006912:	6165      	str	r5, [r4, #20]
 8006914:	444e      	add	r6, r9
 8006916:	eba5 0509 	sub.w	r5, r5, r9
 800691a:	6026      	str	r6, [r4, #0]
 800691c:	60a5      	str	r5, [r4, #8]
 800691e:	463e      	mov	r6, r7
 8006920:	42be      	cmp	r6, r7
 8006922:	d900      	bls.n	8006926 <__ssputs_r+0x72>
 8006924:	463e      	mov	r6, r7
 8006926:	6820      	ldr	r0, [r4, #0]
 8006928:	4632      	mov	r2, r6
 800692a:	4641      	mov	r1, r8
 800692c:	f000 faa8 	bl	8006e80 <memmove>
 8006930:	68a3      	ldr	r3, [r4, #8]
 8006932:	1b9b      	subs	r3, r3, r6
 8006934:	60a3      	str	r3, [r4, #8]
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	4433      	add	r3, r6
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	2000      	movs	r0, #0
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	462a      	mov	r2, r5
 8006944:	f000 fac6 	bl	8006ed4 <_realloc_r>
 8006948:	4606      	mov	r6, r0
 800694a:	2800      	cmp	r0, #0
 800694c:	d1e0      	bne.n	8006910 <__ssputs_r+0x5c>
 800694e:	6921      	ldr	r1, [r4, #16]
 8006950:	4650      	mov	r0, sl
 8006952:	f7ff feb7 	bl	80066c4 <_free_r>
 8006956:	230c      	movs	r3, #12
 8006958:	f8ca 3000 	str.w	r3, [sl]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e7e9      	b.n	800693e <__ssputs_r+0x8a>
	...

0800696c <_svfiprintf_r>:
 800696c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006970:	4698      	mov	r8, r3
 8006972:	898b      	ldrh	r3, [r1, #12]
 8006974:	061b      	lsls	r3, r3, #24
 8006976:	b09d      	sub	sp, #116	@ 0x74
 8006978:	4607      	mov	r7, r0
 800697a:	460d      	mov	r5, r1
 800697c:	4614      	mov	r4, r2
 800697e:	d510      	bpl.n	80069a2 <_svfiprintf_r+0x36>
 8006980:	690b      	ldr	r3, [r1, #16]
 8006982:	b973      	cbnz	r3, 80069a2 <_svfiprintf_r+0x36>
 8006984:	2140      	movs	r1, #64	@ 0x40
 8006986:	f7ff ff09 	bl	800679c <_malloc_r>
 800698a:	6028      	str	r0, [r5, #0]
 800698c:	6128      	str	r0, [r5, #16]
 800698e:	b930      	cbnz	r0, 800699e <_svfiprintf_r+0x32>
 8006990:	230c      	movs	r3, #12
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	b01d      	add	sp, #116	@ 0x74
 800699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699e:	2340      	movs	r3, #64	@ 0x40
 80069a0:	616b      	str	r3, [r5, #20]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a6:	2320      	movs	r3, #32
 80069a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b0:	2330      	movs	r3, #48	@ 0x30
 80069b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b50 <_svfiprintf_r+0x1e4>
 80069b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069ba:	f04f 0901 	mov.w	r9, #1
 80069be:	4623      	mov	r3, r4
 80069c0:	469a      	mov	sl, r3
 80069c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069c6:	b10a      	cbz	r2, 80069cc <_svfiprintf_r+0x60>
 80069c8:	2a25      	cmp	r2, #37	@ 0x25
 80069ca:	d1f9      	bne.n	80069c0 <_svfiprintf_r+0x54>
 80069cc:	ebba 0b04 	subs.w	fp, sl, r4
 80069d0:	d00b      	beq.n	80069ea <_svfiprintf_r+0x7e>
 80069d2:	465b      	mov	r3, fp
 80069d4:	4622      	mov	r2, r4
 80069d6:	4629      	mov	r1, r5
 80069d8:	4638      	mov	r0, r7
 80069da:	f7ff ff6b 	bl	80068b4 <__ssputs_r>
 80069de:	3001      	adds	r0, #1
 80069e0:	f000 80a7 	beq.w	8006b32 <_svfiprintf_r+0x1c6>
 80069e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069e6:	445a      	add	r2, fp
 80069e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069ea:	f89a 3000 	ldrb.w	r3, [sl]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 809f 	beq.w	8006b32 <_svfiprintf_r+0x1c6>
 80069f4:	2300      	movs	r3, #0
 80069f6:	f04f 32ff 	mov.w	r2, #4294967295
 80069fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069fe:	f10a 0a01 	add.w	sl, sl, #1
 8006a02:	9304      	str	r3, [sp, #16]
 8006a04:	9307      	str	r3, [sp, #28]
 8006a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a0c:	4654      	mov	r4, sl
 8006a0e:	2205      	movs	r2, #5
 8006a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a14:	484e      	ldr	r0, [pc, #312]	@ (8006b50 <_svfiprintf_r+0x1e4>)
 8006a16:	f7f9 fbe3 	bl	80001e0 <memchr>
 8006a1a:	9a04      	ldr	r2, [sp, #16]
 8006a1c:	b9d8      	cbnz	r0, 8006a56 <_svfiprintf_r+0xea>
 8006a1e:	06d0      	lsls	r0, r2, #27
 8006a20:	bf44      	itt	mi
 8006a22:	2320      	movmi	r3, #32
 8006a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a28:	0711      	lsls	r1, r2, #28
 8006a2a:	bf44      	itt	mi
 8006a2c:	232b      	movmi	r3, #43	@ 0x2b
 8006a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a32:	f89a 3000 	ldrb.w	r3, [sl]
 8006a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a38:	d015      	beq.n	8006a66 <_svfiprintf_r+0xfa>
 8006a3a:	9a07      	ldr	r2, [sp, #28]
 8006a3c:	4654      	mov	r4, sl
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f04f 0c0a 	mov.w	ip, #10
 8006a44:	4621      	mov	r1, r4
 8006a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a4a:	3b30      	subs	r3, #48	@ 0x30
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d94b      	bls.n	8006ae8 <_svfiprintf_r+0x17c>
 8006a50:	b1b0      	cbz	r0, 8006a80 <_svfiprintf_r+0x114>
 8006a52:	9207      	str	r2, [sp, #28]
 8006a54:	e014      	b.n	8006a80 <_svfiprintf_r+0x114>
 8006a56:	eba0 0308 	sub.w	r3, r0, r8
 8006a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	46a2      	mov	sl, r4
 8006a64:	e7d2      	b.n	8006a0c <_svfiprintf_r+0xa0>
 8006a66:	9b03      	ldr	r3, [sp, #12]
 8006a68:	1d19      	adds	r1, r3, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	9103      	str	r1, [sp, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfbb      	ittet	lt
 8006a72:	425b      	neglt	r3, r3
 8006a74:	f042 0202 	orrlt.w	r2, r2, #2
 8006a78:	9307      	strge	r3, [sp, #28]
 8006a7a:	9307      	strlt	r3, [sp, #28]
 8006a7c:	bfb8      	it	lt
 8006a7e:	9204      	strlt	r2, [sp, #16]
 8006a80:	7823      	ldrb	r3, [r4, #0]
 8006a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a84:	d10a      	bne.n	8006a9c <_svfiprintf_r+0x130>
 8006a86:	7863      	ldrb	r3, [r4, #1]
 8006a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a8a:	d132      	bne.n	8006af2 <_svfiprintf_r+0x186>
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	9203      	str	r2, [sp, #12]
 8006a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a98:	3402      	adds	r4, #2
 8006a9a:	9305      	str	r3, [sp, #20]
 8006a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b60 <_svfiprintf_r+0x1f4>
 8006aa0:	7821      	ldrb	r1, [r4, #0]
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	4650      	mov	r0, sl
 8006aa6:	f7f9 fb9b 	bl	80001e0 <memchr>
 8006aaa:	b138      	cbz	r0, 8006abc <_svfiprintf_r+0x150>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	eba0 000a 	sub.w	r0, r0, sl
 8006ab2:	2240      	movs	r2, #64	@ 0x40
 8006ab4:	4082      	lsls	r2, r0
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	3401      	adds	r4, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac0:	4824      	ldr	r0, [pc, #144]	@ (8006b54 <_svfiprintf_r+0x1e8>)
 8006ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ac6:	2206      	movs	r2, #6
 8006ac8:	f7f9 fb8a 	bl	80001e0 <memchr>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d036      	beq.n	8006b3e <_svfiprintf_r+0x1d2>
 8006ad0:	4b21      	ldr	r3, [pc, #132]	@ (8006b58 <_svfiprintf_r+0x1ec>)
 8006ad2:	bb1b      	cbnz	r3, 8006b1c <_svfiprintf_r+0x1b0>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	3307      	adds	r3, #7
 8006ad8:	f023 0307 	bic.w	r3, r3, #7
 8006adc:	3308      	adds	r3, #8
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae2:	4433      	add	r3, r6
 8006ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ae6:	e76a      	b.n	80069be <_svfiprintf_r+0x52>
 8006ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006aec:	460c      	mov	r4, r1
 8006aee:	2001      	movs	r0, #1
 8006af0:	e7a8      	b.n	8006a44 <_svfiprintf_r+0xd8>
 8006af2:	2300      	movs	r3, #0
 8006af4:	3401      	adds	r4, #1
 8006af6:	9305      	str	r3, [sp, #20]
 8006af8:	4619      	mov	r1, r3
 8006afa:	f04f 0c0a 	mov.w	ip, #10
 8006afe:	4620      	mov	r0, r4
 8006b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b04:	3a30      	subs	r2, #48	@ 0x30
 8006b06:	2a09      	cmp	r2, #9
 8006b08:	d903      	bls.n	8006b12 <_svfiprintf_r+0x1a6>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c6      	beq.n	8006a9c <_svfiprintf_r+0x130>
 8006b0e:	9105      	str	r1, [sp, #20]
 8006b10:	e7c4      	b.n	8006a9c <_svfiprintf_r+0x130>
 8006b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b16:	4604      	mov	r4, r0
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e7f0      	b.n	8006afe <_svfiprintf_r+0x192>
 8006b1c:	ab03      	add	r3, sp, #12
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	462a      	mov	r2, r5
 8006b22:	4b0e      	ldr	r3, [pc, #56]	@ (8006b5c <_svfiprintf_r+0x1f0>)
 8006b24:	a904      	add	r1, sp, #16
 8006b26:	4638      	mov	r0, r7
 8006b28:	f3af 8000 	nop.w
 8006b2c:	1c42      	adds	r2, r0, #1
 8006b2e:	4606      	mov	r6, r0
 8006b30:	d1d6      	bne.n	8006ae0 <_svfiprintf_r+0x174>
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	065b      	lsls	r3, r3, #25
 8006b36:	f53f af2d 	bmi.w	8006994 <_svfiprintf_r+0x28>
 8006b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b3c:	e72c      	b.n	8006998 <_svfiprintf_r+0x2c>
 8006b3e:	ab03      	add	r3, sp, #12
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	462a      	mov	r2, r5
 8006b44:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <_svfiprintf_r+0x1f0>)
 8006b46:	a904      	add	r1, sp, #16
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f000 f879 	bl	8006c40 <_printf_i>
 8006b4e:	e7ed      	b.n	8006b2c <_svfiprintf_r+0x1c0>
 8006b50:	0800701c 	.word	0x0800701c
 8006b54:	08007026 	.word	0x08007026
 8006b58:	00000000 	.word	0x00000000
 8006b5c:	080068b5 	.word	0x080068b5
 8006b60:	08007022 	.word	0x08007022

08006b64 <_printf_common>:
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4616      	mov	r6, r2
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	688a      	ldr	r2, [r1, #8]
 8006b6e:	690b      	ldr	r3, [r1, #16]
 8006b70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	bfb8      	it	lt
 8006b78:	4613      	movlt	r3, r2
 8006b7a:	6033      	str	r3, [r6, #0]
 8006b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b80:	4607      	mov	r7, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	b10a      	cbz	r2, 8006b8a <_printf_common+0x26>
 8006b86:	3301      	adds	r3, #1
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	0699      	lsls	r1, r3, #26
 8006b8e:	bf42      	ittt	mi
 8006b90:	6833      	ldrmi	r3, [r6, #0]
 8006b92:	3302      	addmi	r3, #2
 8006b94:	6033      	strmi	r3, [r6, #0]
 8006b96:	6825      	ldr	r5, [r4, #0]
 8006b98:	f015 0506 	ands.w	r5, r5, #6
 8006b9c:	d106      	bne.n	8006bac <_printf_common+0x48>
 8006b9e:	f104 0a19 	add.w	sl, r4, #25
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	6832      	ldr	r2, [r6, #0]
 8006ba6:	1a9b      	subs	r3, r3, r2
 8006ba8:	42ab      	cmp	r3, r5
 8006baa:	dc26      	bgt.n	8006bfa <_printf_common+0x96>
 8006bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	3b00      	subs	r3, #0
 8006bb4:	bf18      	it	ne
 8006bb6:	2301      	movne	r3, #1
 8006bb8:	0692      	lsls	r2, r2, #26
 8006bba:	d42b      	bmi.n	8006c14 <_printf_common+0xb0>
 8006bbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c8      	blx	r9
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d01e      	beq.n	8006c08 <_printf_common+0xa4>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	f003 0306 	and.w	r3, r3, #6
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	bf02      	ittt	eq
 8006bd6:	68e5      	ldreq	r5, [r4, #12]
 8006bd8:	6833      	ldreq	r3, [r6, #0]
 8006bda:	1aed      	subeq	r5, r5, r3
 8006bdc:	68a3      	ldr	r3, [r4, #8]
 8006bde:	bf0c      	ite	eq
 8006be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006be4:	2500      	movne	r5, #0
 8006be6:	4293      	cmp	r3, r2
 8006be8:	bfc4      	itt	gt
 8006bea:	1a9b      	subgt	r3, r3, r2
 8006bec:	18ed      	addgt	r5, r5, r3
 8006bee:	2600      	movs	r6, #0
 8006bf0:	341a      	adds	r4, #26
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d11a      	bne.n	8006c2c <_printf_common+0xc8>
 8006bf6:	2000      	movs	r0, #0
 8006bf8:	e008      	b.n	8006c0c <_printf_common+0xa8>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4641      	mov	r1, r8
 8006c00:	4638      	mov	r0, r7
 8006c02:	47c8      	blx	r9
 8006c04:	3001      	adds	r0, #1
 8006c06:	d103      	bne.n	8006c10 <_printf_common+0xac>
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	3501      	adds	r5, #1
 8006c12:	e7c6      	b.n	8006ba2 <_printf_common+0x3e>
 8006c14:	18e1      	adds	r1, r4, r3
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	2030      	movs	r0, #48	@ 0x30
 8006c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c1e:	4422      	add	r2, r4
 8006c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c28:	3302      	adds	r3, #2
 8006c2a:	e7c7      	b.n	8006bbc <_printf_common+0x58>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4622      	mov	r2, r4
 8006c30:	4641      	mov	r1, r8
 8006c32:	4638      	mov	r0, r7
 8006c34:	47c8      	blx	r9
 8006c36:	3001      	adds	r0, #1
 8006c38:	d0e6      	beq.n	8006c08 <_printf_common+0xa4>
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7d9      	b.n	8006bf2 <_printf_common+0x8e>
	...

08006c40 <_printf_i>:
 8006c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	7e0f      	ldrb	r7, [r1, #24]
 8006c46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c48:	2f78      	cmp	r7, #120	@ 0x78
 8006c4a:	4691      	mov	r9, r2
 8006c4c:	4680      	mov	r8, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	469a      	mov	sl, r3
 8006c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c56:	d807      	bhi.n	8006c68 <_printf_i+0x28>
 8006c58:	2f62      	cmp	r7, #98	@ 0x62
 8006c5a:	d80a      	bhi.n	8006c72 <_printf_i+0x32>
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	f000 80d2 	beq.w	8006e06 <_printf_i+0x1c6>
 8006c62:	2f58      	cmp	r7, #88	@ 0x58
 8006c64:	f000 80b9 	beq.w	8006dda <_printf_i+0x19a>
 8006c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c70:	e03a      	b.n	8006ce8 <_printf_i+0xa8>
 8006c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c76:	2b15      	cmp	r3, #21
 8006c78:	d8f6      	bhi.n	8006c68 <_printf_i+0x28>
 8006c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c80 <_printf_i+0x40>)
 8006c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c80:	08006cd9 	.word	0x08006cd9
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006c69 	.word	0x08006c69
 8006c8c:	08006c69 	.word	0x08006c69
 8006c90:	08006c69 	.word	0x08006c69
 8006c94:	08006c69 	.word	0x08006c69
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006c69 	.word	0x08006c69
 8006ca0:	08006c69 	.word	0x08006c69
 8006ca4:	08006c69 	.word	0x08006c69
 8006ca8:	08006c69 	.word	0x08006c69
 8006cac:	08006ded 	.word	0x08006ded
 8006cb0:	08006d17 	.word	0x08006d17
 8006cb4:	08006da7 	.word	0x08006da7
 8006cb8:	08006c69 	.word	0x08006c69
 8006cbc:	08006c69 	.word	0x08006c69
 8006cc0:	08006e0f 	.word	0x08006e0f
 8006cc4:	08006c69 	.word	0x08006c69
 8006cc8:	08006d17 	.word	0x08006d17
 8006ccc:	08006c69 	.word	0x08006c69
 8006cd0:	08006c69 	.word	0x08006c69
 8006cd4:	08006daf 	.word	0x08006daf
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	1d1a      	adds	r2, r3, #4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6032      	str	r2, [r6, #0]
 8006ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e09d      	b.n	8006e28 <_printf_i+0x1e8>
 8006cec:	6833      	ldr	r3, [r6, #0]
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	1d19      	adds	r1, r3, #4
 8006cf2:	6031      	str	r1, [r6, #0]
 8006cf4:	0606      	lsls	r6, r0, #24
 8006cf6:	d501      	bpl.n	8006cfc <_printf_i+0xbc>
 8006cf8:	681d      	ldr	r5, [r3, #0]
 8006cfa:	e003      	b.n	8006d04 <_printf_i+0xc4>
 8006cfc:	0645      	lsls	r5, r0, #25
 8006cfe:	d5fb      	bpl.n	8006cf8 <_printf_i+0xb8>
 8006d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d04:	2d00      	cmp	r5, #0
 8006d06:	da03      	bge.n	8006d10 <_printf_i+0xd0>
 8006d08:	232d      	movs	r3, #45	@ 0x2d
 8006d0a:	426d      	negs	r5, r5
 8006d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d10:	4859      	ldr	r0, [pc, #356]	@ (8006e78 <_printf_i+0x238>)
 8006d12:	230a      	movs	r3, #10
 8006d14:	e011      	b.n	8006d3a <_printf_i+0xfa>
 8006d16:	6821      	ldr	r1, [r4, #0]
 8006d18:	6833      	ldr	r3, [r6, #0]
 8006d1a:	0608      	lsls	r0, r1, #24
 8006d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d20:	d402      	bmi.n	8006d28 <_printf_i+0xe8>
 8006d22:	0649      	lsls	r1, r1, #25
 8006d24:	bf48      	it	mi
 8006d26:	b2ad      	uxthmi	r5, r5
 8006d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d2a:	4853      	ldr	r0, [pc, #332]	@ (8006e78 <_printf_i+0x238>)
 8006d2c:	6033      	str	r3, [r6, #0]
 8006d2e:	bf14      	ite	ne
 8006d30:	230a      	movne	r3, #10
 8006d32:	2308      	moveq	r3, #8
 8006d34:	2100      	movs	r1, #0
 8006d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d3a:	6866      	ldr	r6, [r4, #4]
 8006d3c:	60a6      	str	r6, [r4, #8]
 8006d3e:	2e00      	cmp	r6, #0
 8006d40:	bfa2      	ittt	ge
 8006d42:	6821      	ldrge	r1, [r4, #0]
 8006d44:	f021 0104 	bicge.w	r1, r1, #4
 8006d48:	6021      	strge	r1, [r4, #0]
 8006d4a:	b90d      	cbnz	r5, 8006d50 <_printf_i+0x110>
 8006d4c:	2e00      	cmp	r6, #0
 8006d4e:	d04b      	beq.n	8006de8 <_printf_i+0x1a8>
 8006d50:	4616      	mov	r6, r2
 8006d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d56:	fb03 5711 	mls	r7, r3, r1, r5
 8006d5a:	5dc7      	ldrb	r7, [r0, r7]
 8006d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d60:	462f      	mov	r7, r5
 8006d62:	42bb      	cmp	r3, r7
 8006d64:	460d      	mov	r5, r1
 8006d66:	d9f4      	bls.n	8006d52 <_printf_i+0x112>
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d10b      	bne.n	8006d84 <_printf_i+0x144>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07df      	lsls	r7, r3, #31
 8006d70:	d508      	bpl.n	8006d84 <_printf_i+0x144>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4299      	cmp	r1, r3
 8006d78:	bfde      	ittt	le
 8006d7a:	2330      	movle	r3, #48	@ 0x30
 8006d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d84:	1b92      	subs	r2, r2, r6
 8006d86:	6122      	str	r2, [r4, #16]
 8006d88:	f8cd a000 	str.w	sl, [sp]
 8006d8c:	464b      	mov	r3, r9
 8006d8e:	aa03      	add	r2, sp, #12
 8006d90:	4621      	mov	r1, r4
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7ff fee6 	bl	8006b64 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d14a      	bne.n	8006e32 <_printf_i+0x1f2>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	b004      	add	sp, #16
 8006da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f043 0320 	orr.w	r3, r3, #32
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	4833      	ldr	r0, [pc, #204]	@ (8006e7c <_printf_i+0x23c>)
 8006db0:	2778      	movs	r7, #120	@ 0x78
 8006db2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	6831      	ldr	r1, [r6, #0]
 8006dba:	061f      	lsls	r7, r3, #24
 8006dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dc0:	d402      	bmi.n	8006dc8 <_printf_i+0x188>
 8006dc2:	065f      	lsls	r7, r3, #25
 8006dc4:	bf48      	it	mi
 8006dc6:	b2ad      	uxthmi	r5, r5
 8006dc8:	6031      	str	r1, [r6, #0]
 8006dca:	07d9      	lsls	r1, r3, #31
 8006dcc:	bf44      	itt	mi
 8006dce:	f043 0320 	orrmi.w	r3, r3, #32
 8006dd2:	6023      	strmi	r3, [r4, #0]
 8006dd4:	b11d      	cbz	r5, 8006dde <_printf_i+0x19e>
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	e7ac      	b.n	8006d34 <_printf_i+0xf4>
 8006dda:	4827      	ldr	r0, [pc, #156]	@ (8006e78 <_printf_i+0x238>)
 8006ddc:	e7e9      	b.n	8006db2 <_printf_i+0x172>
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	f023 0320 	bic.w	r3, r3, #32
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	e7f6      	b.n	8006dd6 <_printf_i+0x196>
 8006de8:	4616      	mov	r6, r2
 8006dea:	e7bd      	b.n	8006d68 <_printf_i+0x128>
 8006dec:	6833      	ldr	r3, [r6, #0]
 8006dee:	6825      	ldr	r5, [r4, #0]
 8006df0:	6961      	ldr	r1, [r4, #20]
 8006df2:	1d18      	adds	r0, r3, #4
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	062e      	lsls	r6, r5, #24
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	d501      	bpl.n	8006e00 <_printf_i+0x1c0>
 8006dfc:	6019      	str	r1, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <_printf_i+0x1c6>
 8006e00:	0668      	lsls	r0, r5, #25
 8006e02:	d5fb      	bpl.n	8006dfc <_printf_i+0x1bc>
 8006e04:	8019      	strh	r1, [r3, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	6123      	str	r3, [r4, #16]
 8006e0a:	4616      	mov	r6, r2
 8006e0c:	e7bc      	b.n	8006d88 <_printf_i+0x148>
 8006e0e:	6833      	ldr	r3, [r6, #0]
 8006e10:	1d1a      	adds	r2, r3, #4
 8006e12:	6032      	str	r2, [r6, #0]
 8006e14:	681e      	ldr	r6, [r3, #0]
 8006e16:	6862      	ldr	r2, [r4, #4]
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7f9 f9e0 	bl	80001e0 <memchr>
 8006e20:	b108      	cbz	r0, 8006e26 <_printf_i+0x1e6>
 8006e22:	1b80      	subs	r0, r0, r6
 8006e24:	6060      	str	r0, [r4, #4]
 8006e26:	6863      	ldr	r3, [r4, #4]
 8006e28:	6123      	str	r3, [r4, #16]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e30:	e7aa      	b.n	8006d88 <_printf_i+0x148>
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	4632      	mov	r2, r6
 8006e36:	4649      	mov	r1, r9
 8006e38:	4640      	mov	r0, r8
 8006e3a:	47d0      	blx	sl
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d0ad      	beq.n	8006d9c <_printf_i+0x15c>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	079b      	lsls	r3, r3, #30
 8006e44:	d413      	bmi.n	8006e6e <_printf_i+0x22e>
 8006e46:	68e0      	ldr	r0, [r4, #12]
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	4298      	cmp	r0, r3
 8006e4c:	bfb8      	it	lt
 8006e4e:	4618      	movlt	r0, r3
 8006e50:	e7a6      	b.n	8006da0 <_printf_i+0x160>
 8006e52:	2301      	movs	r3, #1
 8006e54:	4632      	mov	r2, r6
 8006e56:	4649      	mov	r1, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	47d0      	blx	sl
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d09d      	beq.n	8006d9c <_printf_i+0x15c>
 8006e60:	3501      	adds	r5, #1
 8006e62:	68e3      	ldr	r3, [r4, #12]
 8006e64:	9903      	ldr	r1, [sp, #12]
 8006e66:	1a5b      	subs	r3, r3, r1
 8006e68:	42ab      	cmp	r3, r5
 8006e6a:	dcf2      	bgt.n	8006e52 <_printf_i+0x212>
 8006e6c:	e7eb      	b.n	8006e46 <_printf_i+0x206>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	f104 0619 	add.w	r6, r4, #25
 8006e74:	e7f5      	b.n	8006e62 <_printf_i+0x222>
 8006e76:	bf00      	nop
 8006e78:	0800702d 	.word	0x0800702d
 8006e7c:	0800703e 	.word	0x0800703e

08006e80 <memmove>:
 8006e80:	4288      	cmp	r0, r1
 8006e82:	b510      	push	{r4, lr}
 8006e84:	eb01 0402 	add.w	r4, r1, r2
 8006e88:	d902      	bls.n	8006e90 <memmove+0x10>
 8006e8a:	4284      	cmp	r4, r0
 8006e8c:	4623      	mov	r3, r4
 8006e8e:	d807      	bhi.n	8006ea0 <memmove+0x20>
 8006e90:	1e43      	subs	r3, r0, #1
 8006e92:	42a1      	cmp	r1, r4
 8006e94:	d008      	beq.n	8006ea8 <memmove+0x28>
 8006e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e9e:	e7f8      	b.n	8006e92 <memmove+0x12>
 8006ea0:	4402      	add	r2, r0
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	428a      	cmp	r2, r1
 8006ea6:	d100      	bne.n	8006eaa <memmove+0x2a>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006eb2:	e7f7      	b.n	8006ea4 <memmove+0x24>

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7f9 ff80 	bl	8000dc4 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200042e8 	.word	0x200042e8

08006ed4 <_realloc_r>:
 8006ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	4680      	mov	r8, r0
 8006eda:	4615      	mov	r5, r2
 8006edc:	460c      	mov	r4, r1
 8006ede:	b921      	cbnz	r1, 8006eea <_realloc_r+0x16>
 8006ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	f7ff bc59 	b.w	800679c <_malloc_r>
 8006eea:	b92a      	cbnz	r2, 8006ef8 <_realloc_r+0x24>
 8006eec:	f7ff fbea 	bl	80066c4 <_free_r>
 8006ef0:	2400      	movs	r4, #0
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef8:	f000 f81a 	bl	8006f30 <_malloc_usable_size_r>
 8006efc:	4285      	cmp	r5, r0
 8006efe:	4606      	mov	r6, r0
 8006f00:	d802      	bhi.n	8006f08 <_realloc_r+0x34>
 8006f02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f06:	d8f4      	bhi.n	8006ef2 <_realloc_r+0x1e>
 8006f08:	4629      	mov	r1, r5
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fc46 	bl	800679c <_malloc_r>
 8006f10:	4607      	mov	r7, r0
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d0ec      	beq.n	8006ef0 <_realloc_r+0x1c>
 8006f16:	42b5      	cmp	r5, r6
 8006f18:	462a      	mov	r2, r5
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	bf28      	it	cs
 8006f1e:	4632      	movcs	r2, r6
 8006f20:	f7ff fbc2 	bl	80066a8 <memcpy>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff fbcc 	bl	80066c4 <_free_r>
 8006f2c:	463c      	mov	r4, r7
 8006f2e:	e7e0      	b.n	8006ef2 <_realloc_r+0x1e>

08006f30 <_malloc_usable_size_r>:
 8006f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f34:	1f18      	subs	r0, r3, #4
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	bfbc      	itt	lt
 8006f3a:	580b      	ldrlt	r3, [r1, r0]
 8006f3c:	18c0      	addlt	r0, r0, r3
 8006f3e:	4770      	bx	lr

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
